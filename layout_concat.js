/*! jQuery v1.11.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function (a, b) { "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) { if (!a.document) throw new Error("jQuery requires a window with a document"); return b(a) } : b(a) }("undefined" != typeof window ? window : this, function (a, b) {
    var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = "".trim, l = {}, m = "1.11.0", n = function (a, b) { return new n.fn.init(a, b) }, o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, p = /^-ms-/, q = /-([\da-z])/gi, r = function (a, b) { return b.toUpperCase() }; n.fn = n.prototype = { jquery: m, constructor: n, selector: "", length: 0, toArray: function () { return d.call(this) }, get: function (a) { return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this) }, pushStack: function (a) { var b = n.merge(this.constructor(), a); return b.prevObject = this, b.context = this.context, b }, each: function (a, b) { return n.each(this, a, b) }, map: function (a) { return this.pushStack(n.map(this, function (b, c) { return a.call(b, c, b) })) }, slice: function () { return this.pushStack(d.apply(this, arguments)) }, first: function () { return this.eq(0) }, last: function () { return this.eq(-1) }, eq: function (a) { var b = this.length, c = +a + (0 > a ? b : 0); return this.pushStack(c >= 0 && b > c ? [this[c]] : []) }, end: function () { return this.prevObject || this.constructor(null) }, push: f, sort: c.sort, splice: c.splice }, n.extend = n.fn.extend = function () { var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1; for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++)if (null != (e = arguments[h])) for (d in e) a = g[d], c = e[d], g !== c && (j && c && (n.isPlainObject(c) || (b = n.isArray(c))) ? (b ? (b = !1, f = a && n.isArray(a) ? a : []) : f = a && n.isPlainObject(a) ? a : {}, g[d] = n.extend(j, f, c)) : void 0 !== c && (g[d] = c)); return g }, n.extend({ expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""), isReady: !0, error: function (a) { throw new Error(a) }, noop: function () { }, isFunction: function (a) { return "function" === n.type(a) }, isArray: Array.isArray || function (a) { return "array" === n.type(a) }, isWindow: function (a) { return null != a && a == a.window }, isNumeric: function (a) { return a - parseFloat(a) >= 0 }, isEmptyObject: function (a) { var b; for (b in a) return !1; return !0 }, isPlainObject: function (a) { var b; if (!a || "object" !== n.type(a) || a.nodeType || n.isWindow(a)) return !1; try { if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1 } catch (c) { return !1 } if (l.ownLast) for (b in a) return j.call(a, b); for (b in a); return void 0 === b || j.call(a, b) }, type: function (a) { return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a }, globalEval: function (b) { b && n.trim(b) && (a.execScript || function (b) { a.eval.call(a, b) })(b) }, camelCase: function (a) { return a.replace(p, "ms-").replace(q, r) }, nodeName: function (a, b) { return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase() }, each: function (a, b, c) { var d, e = 0, f = a.length, g = s(a); if (c) { if (g) { for (; f > e; e++)if (d = b.apply(a[e], c), d === !1) break } else for (e in a) if (d = b.apply(a[e], c), d === !1) break } else if (g) { for (; f > e; e++)if (d = b.call(a[e], e, a[e]), d === !1) break } else for (e in a) if (d = b.call(a[e], e, a[e]), d === !1) break; return a }, trim: k && !k.call("\ufeff\xa0") ? function (a) { return null == a ? "" : k.call(a) } : function (a) { return null == a ? "" : (a + "").replace(o, "") }, makeArray: function (a, b) { var c = b || []; return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c }, inArray: function (a, b, c) { var d; if (b) { if (g) return g.call(b, a, c); for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++)if (c in b && b[c] === a) return c } return -1 }, merge: function (a, b) { var c = +b.length, d = 0, e = a.length; while (c > d) a[e++] = b[d++]; if (c !== c) while (void 0 !== b[d]) a[e++] = b[d++]; return a.length = e, a }, grep: function (a, b, c) { for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++)d = !b(a[f], f), d !== h && e.push(a[f]); return e }, map: function (a, b, c) { var d, f = 0, g = a.length, h = s(a), i = []; if (h) for (; g > f; f++)d = b(a[f], f, c), null != d && i.push(d); else for (f in a) d = b(a[f], f, c), null != d && i.push(d); return e.apply([], i) }, guid: 1, proxy: function (a, b) { var c, e, f; return "string" == typeof b && (f = a[b], b = a, a = f), n.isFunction(a) ? (c = d.call(arguments, 2), e = function () { return a.apply(b || this, c.concat(d.call(arguments))) }, e.guid = a.guid = a.guid || n.guid++, e) : void 0 }, now: function () { return +new Date }, support: l }), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) { h["[object " + b + "]"] = b.toLowerCase() }); function s(a) { var b = a.length, c = n.type(a); return "function" === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a } var t = function (a) { var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s = "sizzle" + -new Date, t = a.document, u = 0, v = 0, w = eb(), x = eb(), y = eb(), z = function (a, b) { return a === b && (j = !0), 0 }, A = "undefined", B = 1 << 31, C = {}.hasOwnProperty, D = [], E = D.pop, F = D.push, G = D.push, H = D.slice, I = D.indexOf || function (a) { for (var b = 0, c = this.length; c > b; b++)if (this[b] === a) return b; return -1 }, J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", K = "[\\x20\\t\\r\\n\\f]", L = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", M = L.replace("w", "w#"), N = "\\[" + K + "*(" + L + ")" + K + "*(?:([*^$|!~]?=)" + K + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + M + ")|)|)" + K + "*\\]", O = ":(" + L + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + N.replace(3, 8) + ")*)|.*)\\)|)", P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"), Q = new RegExp("^" + K + "*," + K + "*"), R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"), S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"), T = new RegExp(O), U = new RegExp("^" + M + "$"), V = { ID: new RegExp("^#(" + L + ")"), CLASS: new RegExp("^\\.(" + L + ")"), TAG: new RegExp("^(" + L.replace("w", "w*") + ")"), ATTR: new RegExp("^" + N), PSEUDO: new RegExp("^" + O), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"), bool: new RegExp("^(?:" + J + ")$", "i"), needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i") }, W = /^(?:input|select|textarea|button)$/i, X = /^h\d$/i, Y = /^[^{]+\{\s*\[native \w/, Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, $ = /[+~]/, _ = /'|\\/g, ab = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"), bb = function (a, b, c) { var d = "0x" + b - 65536; return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320) }; try { G.apply(D = H.call(t.childNodes), t.childNodes), D[t.childNodes.length].nodeType } catch (cb) { G = { apply: D.length ? function (a, b) { F.apply(a, H.call(b)) } : function (a, b) { var c = a.length, d = 0; while (a[c++] = b[d++]); a.length = c - 1 } } } function db(a, b, d, e) { var f, g, h, i, j, m, p, q, u, v; if ((b ? b.ownerDocument || b : t) !== l && k(b), b = b || l, d = d || [], !a || "string" != typeof a) return d; if (1 !== (i = b.nodeType) && 9 !== i) return []; if (n && !e) { if (f = Z.exec(a)) if (h = f[1]) { if (9 === i) { if (g = b.getElementById(h), !g || !g.parentNode) return d; if (g.id === h) return d.push(g), d } else if (b.ownerDocument && (g = b.ownerDocument.getElementById(h)) && r(b, g) && g.id === h) return d.push(g), d } else { if (f[2]) return G.apply(d, b.getElementsByTagName(a)), d; if ((h = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(h)), d } if (c.qsa && (!o || !o.test(a))) { if (q = p = s, u = b, v = 9 === i && a, 1 === i && "object" !== b.nodeName.toLowerCase()) { m = ob(a), (p = b.getAttribute("id")) ? q = p.replace(_, "\\$&") : b.setAttribute("id", q), q = "[id='" + q + "'] ", j = m.length; while (j--) m[j] = q + pb(m[j]); u = $.test(a) && mb(b.parentNode) || b, v = m.join(",") } if (v) try { return G.apply(d, u.querySelectorAll(v)), d } catch (w) { } finally { p || b.removeAttribute("id") } } } return xb(a.replace(P, "$1"), b, d, e) } function eb() { var a = []; function b(c, e) { return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e } return b } function fb(a) { return a[s] = !0, a } function gb(a) { var b = l.createElement("div"); try { return !!a(b) } catch (c) { return !1 } finally { b.parentNode && b.parentNode.removeChild(b), b = null } } function hb(a, b) { var c = a.split("|"), e = a.length; while (e--) d.attrHandle[c[e]] = b } function ib(a, b) { var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || B) - (~a.sourceIndex || B); if (d) return d; if (c) while (c = c.nextSibling) if (c === b) return -1; return a ? 1 : -1 } function jb(a) { return function (b) { var c = b.nodeName.toLowerCase(); return "input" === c && b.type === a } } function kb(a) { return function (b) { var c = b.nodeName.toLowerCase(); return ("input" === c || "button" === c) && b.type === a } } function lb(a) { return fb(function (b) { return b = +b, fb(function (c, d) { var e, f = a([], c.length, b), g = f.length; while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e])) }) }) } function mb(a) { return a && typeof a.getElementsByTagName !== A && a } c = db.support = {}, f = db.isXML = function (a) { var b = a && (a.ownerDocument || a).documentElement; return b ? "HTML" !== b.nodeName : !1 }, k = db.setDocument = function (a) { var b, e = a ? a.ownerDocument || a : t, g = e.defaultView; return e !== l && 9 === e.nodeType && e.documentElement ? (l = e, m = e.documentElement, n = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener("unload", function () { k() }, !1) : g.attachEvent && g.attachEvent("onunload", function () { k() })), c.attributes = gb(function (a) { return a.className = "i", !a.getAttribute("className") }), c.getElementsByTagName = gb(function (a) { return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length }), c.getElementsByClassName = Y.test(e.getElementsByClassName) && gb(function (a) { return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i", 2 === a.getElementsByClassName("i").length }), c.getById = gb(function (a) { return m.appendChild(a).id = s, !e.getElementsByName || !e.getElementsByName(s).length }), c.getById ? (d.find.ID = function (a, b) { if (typeof b.getElementById !== A && n) { var c = b.getElementById(a); return c && c.parentNode ? [c] : [] } }, d.filter.ID = function (a) { var b = a.replace(ab, bb); return function (a) { return a.getAttribute("id") === b } }) : (delete d.find.ID, d.filter.ID = function (a) { var b = a.replace(ab, bb); return function (a) { var c = typeof a.getAttributeNode !== A && a.getAttributeNode("id"); return c && c.value === b } }), d.find.TAG = c.getElementsByTagName ? function (a, b) { return typeof b.getElementsByTagName !== A ? b.getElementsByTagName(a) : void 0 } : function (a, b) { var c, d = [], e = 0, f = b.getElementsByTagName(a); if ("*" === a) { while (c = f[e++]) 1 === c.nodeType && d.push(c); return d } return f }, d.find.CLASS = c.getElementsByClassName && function (a, b) { return typeof b.getElementsByClassName !== A && n ? b.getElementsByClassName(a) : void 0 }, p = [], o = [], (c.qsa = Y.test(e.querySelectorAll)) && (gb(function (a) { a.innerHTML = "<select t=''><option selected=''></option></select>", a.querySelectorAll("[t^='']").length && o.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || o.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll(":checked").length || o.push(":checked") }), gb(function (a) { var b = e.createElement("input"); b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && o.push("name" + K + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || o.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), o.push(",.*:") })), (c.matchesSelector = Y.test(q = m.webkitMatchesSelector || m.mozMatchesSelector || m.oMatchesSelector || m.msMatchesSelector)) && gb(function (a) { c.disconnectedMatch = q.call(a, "div"), q.call(a, "[s!='']:x"), p.push("!=", O) }), o = o.length && new RegExp(o.join("|")), p = p.length && new RegExp(p.join("|")), b = Y.test(m.compareDocumentPosition), r = b || Y.test(m.contains) ? function (a, b) { var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode; return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d))) } : function (a, b) { if (b) while (b = b.parentNode) if (b === a) return !0; return !1 }, z = b ? function (a, b) { if (a === b) return j = !0, 0; var d = !a.compareDocumentPosition - !b.compareDocumentPosition; return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === t && r(t, a) ? -1 : b === e || b.ownerDocument === t && r(t, b) ? 1 : i ? I.call(i, a) - I.call(i, b) : 0 : 4 & d ? -1 : 1) } : function (a, b) { if (a === b) return j = !0, 0; var c, d = 0, f = a.parentNode, g = b.parentNode, h = [a], k = [b]; if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : i ? I.call(i, a) - I.call(i, b) : 0; if (f === g) return ib(a, b); c = a; while (c = c.parentNode) h.unshift(c); c = b; while (c = c.parentNode) k.unshift(c); while (h[d] === k[d]) d++; return d ? ib(h[d], k[d]) : h[d] === t ? -1 : k[d] === t ? 1 : 0 }, e) : l }, db.matches = function (a, b) { return db(a, null, null, b) }, db.matchesSelector = function (a, b) { if ((a.ownerDocument || a) !== l && k(a), b = b.replace(S, "='$1']"), !(!c.matchesSelector || !n || p && p.test(b) || o && o.test(b))) try { var d = q.call(a, b); if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d } catch (e) { } return db(b, l, null, [a]).length > 0 }, db.contains = function (a, b) { return (a.ownerDocument || a) !== l && k(a), r(a, b) }, db.attr = function (a, b) { (a.ownerDocument || a) !== l && k(a); var e = d.attrHandle[b.toLowerCase()], f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !n) : void 0; return void 0 !== f ? f : c.attributes || !n ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null }, db.error = function (a) { throw new Error("Syntax error, unrecognized expression: " + a) }, db.uniqueSort = function (a) { var b, d = [], e = 0, f = 0; if (j = !c.detectDuplicates, i = !c.sortStable && a.slice(0), a.sort(z), j) { while (b = a[f++]) b === a[f] && (e = d.push(f)); while (e--) a.splice(d[e], 1) } return i = null, a }, e = db.getText = function (a) { var b, c = "", d = 0, f = a.nodeType; if (f) { if (1 === f || 9 === f || 11 === f) { if ("string" == typeof a.textContent) return a.textContent; for (a = a.firstChild; a; a = a.nextSibling)c += e(a) } else if (3 === f || 4 === f) return a.nodeValue } else while (b = a[d++]) c += e(b); return c }, d = db.selectors = { cacheLength: 50, createPseudo: fb, match: V, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function (a) { return a[1] = a[1].replace(ab, bb), a[3] = (a[4] || a[5] || "").replace(ab, bb), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4) }, CHILD: function (a) { return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || db.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && db.error(a[0]), a }, PSEUDO: function (a) { var b, c = !a[5] && a[2]; return V.CHILD.test(a[0]) ? null : (a[3] && void 0 !== a[4] ? a[2] = a[4] : c && T.test(c) && (b = ob(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3)) } }, filter: { TAG: function (a) { var b = a.replace(ab, bb).toLowerCase(); return "*" === a ? function () { return !0 } : function (a) { return a.nodeName && a.nodeName.toLowerCase() === b } }, CLASS: function (a) { var b = w[a + " "]; return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && w(a, function (a) { return b.test("string" == typeof a.className && a.className || typeof a.getAttribute !== A && a.getAttribute("class") || "") }) }, ATTR: function (a, b, c) { return function (d) { var e = db.attr(d, a); return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0 } }, CHILD: function (a, b, c, d, e) { var f = "nth" !== a.slice(0, 3), g = "last" !== a.slice(-4), h = "of-type" === b; return 1 === d && 0 === e ? function (a) { return !!a.parentNode } : function (b, c, i) { var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling", q = b.parentNode, r = h && b.nodeName.toLowerCase(), t = !i && !h; if (q) { if (f) { while (p) { l = b; while (l = l[p]) if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1; o = p = "only" === a && !o && "nextSibling" } return !0 } if (o = [g ? q.firstChild : q.lastChild], g && t) { k = q[s] || (q[s] = {}), j = k[a] || [], n = j[0] === u && j[1], m = j[0] === u && j[2], l = n && q.childNodes[n]; while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) if (1 === l.nodeType && ++m && l === b) { k[a] = [u, n, m]; break } } else if (t && (j = (b[s] || (b[s] = {}))[a]) && j[0] === u) m = j[1]; else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (t && ((l[s] || (l[s] = {}))[a] = [u, m]), l === b)) break; return m -= e, m === d || m % d === 0 && m / d >= 0 } } }, PSEUDO: function (a, b) { var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || db.error("unsupported pseudo: " + a); return e[s] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? fb(function (a, c) { var d, f = e(a, b), g = f.length; while (g--) d = I.call(a, f[g]), a[d] = !(c[d] = f[g]) }) : function (a) { return e(a, 0, c) }) : e } }, pseudos: { not: fb(function (a) { var b = [], c = [], d = g(a.replace(P, "$1")); return d[s] ? fb(function (a, b, c, e) { var f, g = d(a, null, e, []), h = a.length; while (h--) (f = g[h]) && (a[h] = !(b[h] = f)) }) : function (a, e, f) { return b[0] = a, d(b, null, f, c), !c.pop() } }), has: fb(function (a) { return function (b) { return db(a, b).length > 0 } }), contains: fb(function (a) { return function (b) { return (b.textContent || b.innerText || e(b)).indexOf(a) > -1 } }), lang: fb(function (a) { return U.test(a || "") || db.error("unsupported lang: " + a), a = a.replace(ab, bb).toLowerCase(), function (b) { var c; do if (c = n ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType); return !1 } }), target: function (b) { var c = a.location && a.location.hash; return c && c.slice(1) === b.id }, root: function (a) { return a === m }, focus: function (a) { return a === l.activeElement && (!l.hasFocus || l.hasFocus()) && !!(a.type || a.href || ~a.tabIndex) }, enabled: function (a) { return a.disabled === !1 }, disabled: function (a) { return a.disabled === !0 }, checked: function (a) { var b = a.nodeName.toLowerCase(); return "input" === b && !!a.checked || "option" === b && !!a.selected }, selected: function (a) { return a.parentNode && a.parentNode.selectedIndex, a.selected === !0 }, empty: function (a) { for (a = a.firstChild; a; a = a.nextSibling)if (a.nodeType < 6) return !1; return !0 }, parent: function (a) { return !d.pseudos.empty(a) }, header: function (a) { return X.test(a.nodeName) }, input: function (a) { return W.test(a.nodeName) }, button: function (a) { var b = a.nodeName.toLowerCase(); return "input" === b && "button" === a.type || "button" === b }, text: function (a) { var b; return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase()) }, first: lb(function () { return [0] }), last: lb(function (a, b) { return [b - 1] }), eq: lb(function (a, b, c) { return [0 > c ? c + b : c] }), even: lb(function (a, b) { for (var c = 0; b > c; c += 2)a.push(c); return a }), odd: lb(function (a, b) { for (var c = 1; b > c; c += 2)a.push(c); return a }), lt: lb(function (a, b, c) { for (var d = 0 > c ? c + b : c; --d >= 0;)a.push(d); return a }), gt: lb(function (a, b, c) { for (var d = 0 > c ? c + b : c; ++d < b;)a.push(d); return a }) } }, d.pseudos.nth = d.pseudos.eq; for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) d.pseudos[b] = jb(b); for (b in { submit: !0, reset: !0 }) d.pseudos[b] = kb(b); function nb() { } nb.prototype = d.filters = d.pseudos, d.setFilters = new nb; function ob(a, b) { var c, e, f, g, h, i, j, k = x[a + " "]; if (k) return b ? 0 : k.slice(0); h = a, i = [], j = d.preFilter; while (h) { (!c || (e = Q.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(P, " ") }), h = h.slice(c.length)); for (g in d.filter) !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length)); if (!c) break } return b ? h.length : h ? db.error(a) : x(a, i).slice(0) } function pb(a) { for (var b = 0, c = a.length, d = ""; c > b; b++)d += a[b].value; return d } function qb(a, b, c) { var d = b.dir, e = c && "parentNode" === d, f = v++; return b.first ? function (b, c, f) { while (b = b[d]) if (1 === b.nodeType || e) return a(b, c, f) } : function (b, c, g) { var h, i, j = [u, f]; if (g) { while (b = b[d]) if ((1 === b.nodeType || e) && a(b, c, g)) return !0 } else while (b = b[d]) if (1 === b.nodeType || e) { if (i = b[s] || (b[s] = {}), (h = i[d]) && h[0] === u && h[1] === f) return j[2] = h[2]; if (i[d] = j, j[2] = a(b, c, g)) return !0 } } } function rb(a) { return a.length > 1 ? function (b, c, d) { var e = a.length; while (e--) if (!a[e](b, c, d)) return !1; return !0 } : a[0] } function sb(a, b, c, d, e) { for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)(f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h)); return g } function tb(a, b, c, d, e, f) { return d && !d[s] && (d = tb(d)), e && !e[s] && (e = tb(e, f)), fb(function (f, g, h, i) { var j, k, l, m = [], n = [], o = g.length, p = f || wb(b || "*", h.nodeType ? [h] : h, []), q = !a || !f && b ? p : sb(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q; if (c && c(q, r, h, i), d) { j = sb(r, n), d(j, [], h, i), k = j.length; while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l)) } if (f) { if (e || a) { if (e) { j = [], k = r.length; while (k--) (l = r[k]) && j.push(q[k] = l); e(null, r = [], j, i) } k = r.length; while (k--) (l = r[k]) && (j = e ? I.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l)) } } else r = sb(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r) }) } function ub(a) { for (var b, c, e, f = a.length, g = d.relative[a[0].type], i = g || d.relative[" "], j = g ? 1 : 0, k = qb(function (a) { return a === b }, i, !0), l = qb(function (a) { return I.call(b, a) > -1 }, i, !0), m = [function (a, c, d) { return !g && (d || c !== h) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d)) }]; f > j; j++)if (c = d.relative[a[j].type]) m = [qb(rb(m), c)]; else { if (c = d.filter[a[j].type].apply(null, a[j].matches), c[s]) { for (e = ++j; f > e; e++)if (d.relative[a[e].type]) break; return tb(j > 1 && rb(m), j > 1 && pb(a.slice(0, j - 1).concat({ value: " " === a[j - 2].type ? "*" : "" })).replace(P, "$1"), c, e > j && ub(a.slice(j, e)), f > e && ub(a = a.slice(e)), f > e && pb(a)) } m.push(c) } return rb(m) } function vb(a, b) { var c = b.length > 0, e = a.length > 0, f = function (f, g, i, j, k) { var m, n, o, p = 0, q = "0", r = f && [], s = [], t = h, v = f || e && d.find.TAG("*", k), w = u += null == t ? 1 : Math.random() || .1, x = v.length; for (k && (h = g !== l && g); q !== x && null != (m = v[q]); q++) { if (e && m) { n = 0; while (o = a[n++]) if (o(m, g, i)) { j.push(m); break } k && (u = w) } c && ((m = !o && m) && p--, f && r.push(m)) } if (p += q, c && q !== p) { n = 0; while (o = b[n++]) o(r, s, g, i); if (f) { if (p > 0) while (q--) r[q] || s[q] || (s[q] = E.call(j)); s = sb(s) } G.apply(j, s), k && !f && s.length > 0 && p + b.length > 1 && db.uniqueSort(j) } return k && (u = w, h = t), r }; return c ? fb(f) : f } g = db.compile = function (a, b) { var c, d = [], e = [], f = y[a + " "]; if (!f) { b || (b = ob(a)), c = b.length; while (c--) f = ub(b[c]), f[s] ? d.push(f) : e.push(f); f = y(a, vb(e, d)) } return f }; function wb(a, b, c) { for (var d = 0, e = b.length; e > d; d++)db(a, b[d], c); return c } function xb(a, b, e, f) { var h, i, j, k, l, m = ob(a); if (!f && 1 === m.length) { if (i = m[0] = m[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && c.getById && 9 === b.nodeType && n && d.relative[i[1].type]) { if (b = (d.find.ID(j.matches[0].replace(ab, bb), b) || [])[0], !b) return e; a = a.slice(i.shift().value.length) } h = V.needsContext.test(a) ? 0 : i.length; while (h--) { if (j = i[h], d.relative[k = j.type]) break; if ((l = d.find[k]) && (f = l(j.matches[0].replace(ab, bb), $.test(i[0].type) && mb(b.parentNode) || b))) { if (i.splice(h, 1), a = f.length && pb(i), !a) return G.apply(e, f), e; break } } } return g(a, m)(f, b, !n, e, $.test(a) && mb(b.parentNode) || b), e } return c.sortStable = s.split("").sort(z).join("") === s, c.detectDuplicates = !!j, k(), c.sortDetached = gb(function (a) { return 1 & a.compareDocumentPosition(l.createElement("div")) }), gb(function (a) { return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href") }) || hb("type|href|height|width", function (a, b, c) { return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2) }), c.attributes && gb(function (a) { return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value") }) || hb("value", function (a, b, c) { return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue }), gb(function (a) { return null == a.getAttribute("disabled") }) || hb(J, function (a, b, c) { var d; return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null }), db }(a); n.find = t, n.expr = t.selectors, n.expr[":"] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains; var u = n.expr.match.needsContext, v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, w = /^.[^:#\[\.,]*$/; function x(a, b, c) { if (n.isFunction(b)) return n.grep(a, function (a, d) { return !!b.call(a, d, a) !== c }); if (b.nodeType) return n.grep(a, function (a) { return a === b !== c }); if ("string" == typeof b) { if (w.test(b)) return n.filter(b, a, c); b = n.filter(b, a) } return n.grep(a, function (a) { return n.inArray(a, b) >= 0 !== c }) } n.filter = function (a, b, c) { var d = b[0]; return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) { return 1 === a.nodeType })) }, n.fn.extend({ find: function (a) { var b, c = [], d = this, e = d.length; if ("string" != typeof a) return this.pushStack(n(a).filter(function () { for (b = 0; e > b; b++)if (n.contains(d[b], this)) return !0 })); for (b = 0; e > b; b++)n.find(a, d[b], c); return c = this.pushStack(e > 1 ? n.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c }, filter: function (a) { return this.pushStack(x(this, a || [], !1)) }, not: function (a) { return this.pushStack(x(this, a || [], !0)) }, is: function (a) { return !!x(this, "string" == typeof a && u.test(a) ? n(a) : a || [], !1).length } }); var y, z = a.document, A = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, B = n.fn.init = function (a, b) { var c, d; if (!a) return this; if ("string" == typeof a) { if (c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : A.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a); if (c[1]) { if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : z, !0)), v.test(c[1]) && n.isPlainObject(b)) for (c in b) n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]); return this } if (d = z.getElementById(c[2]), d && d.parentNode) { if (d.id !== c[2]) return y.find(a); this.length = 1, this[0] = d } return this.context = z, this.selector = a, this } return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this)) }; B.prototype = n.fn, y = n(z); var C = /^(?:parents|prev(?:Until|All))/, D = { children: !0, contents: !0, next: !0, prev: !0 }; n.extend({ dir: function (a, b, c) { var d = [], e = a[b]; while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !n(e).is(c))) 1 === e.nodeType && d.push(e), e = e[b]; return d }, sibling: function (a, b) { for (var c = []; a; a = a.nextSibling)1 === a.nodeType && a !== b && c.push(a); return c } }), n.fn.extend({ has: function (a) { var b, c = n(a, this), d = c.length; return this.filter(function () { for (b = 0; d > b; b++)if (n.contains(this, c[b])) return !0 }) }, closest: function (a, b) { for (var c, d = 0, e = this.length, f = [], g = u.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++)for (c = this[d]; c && c !== b; c = c.parentNode)if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) { f.push(c); break } return this.pushStack(f.length > 1 ? n.unique(f) : f) }, index: function (a) { return a ? "string" == typeof a ? n.inArray(this[0], n(a)) : n.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1 }, add: function (a, b) { return this.pushStack(n.unique(n.merge(this.get(), n(a, b)))) }, addBack: function (a) { return this.add(null == a ? this.prevObject : this.prevObject.filter(a)) } }); function E(a, b) { do a = a[b]; while (a && 1 !== a.nodeType); return a } n.each({ parent: function (a) { var b = a.parentNode; return b && 11 !== b.nodeType ? b : null }, parents: function (a) { return n.dir(a, "parentNode") }, parentsUntil: function (a, b, c) { return n.dir(a, "parentNode", c) }, next: function (a) { return E(a, "nextSibling") }, prev: function (a) { return E(a, "previousSibling") }, nextAll: function (a) { return n.dir(a, "nextSibling") }, prevAll: function (a) { return n.dir(a, "previousSibling") }, nextUntil: function (a, b, c) { return n.dir(a, "nextSibling", c) }, prevUntil: function (a, b, c) { return n.dir(a, "previousSibling", c) }, siblings: function (a) { return n.sibling((a.parentNode || {}).firstChild, a) }, children: function (a) { return n.sibling(a.firstChild) }, contents: function (a) { return n.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : n.merge([], a.childNodes) } }, function (a, b) { n.fn[a] = function (c, d) { var e = n.map(this, b, c); return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (D[a] || (e = n.unique(e)), C.test(a) && (e = e.reverse())), this.pushStack(e) } }); var F = /\S+/g, G = {}; function H(a) { var b = G[a] = {}; return n.each(a.match(F) || [], function (a, c) { b[c] = !0 }), b } n.Callbacks = function (a) { a = "string" == typeof a ? G[a] || H(a) : n.extend({}, a); var b, c, d, e, f, g, h = [], i = !a.once && [], j = function (l) { for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++)if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) { c = !1; break } b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable()) }, k = { add: function () { if (h) { var d = h.length; !function f(b) { n.each(b, function (b, c) { var d = n.type(c); "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c) }) }(arguments), b ? e = h.length : c && (g = d, j(c)) } return this }, remove: function () { return h && n.each(arguments, function (a, c) { var d; while ((d = n.inArray(c, h, d)) > -1) h.splice(d, 1), b && (e >= d && e--, f >= d && f--) }), this }, has: function (a) { return a ? n.inArray(a, h) > -1 : !(!h || !h.length) }, empty: function () { return h = [], e = 0, this }, disable: function () { return h = i = c = void 0, this }, disabled: function () { return !h }, lock: function () { return i = void 0, c || k.disable(), this }, locked: function () { return !i }, fireWith: function (a, c) { return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this }, fire: function () { return k.fireWith(this, arguments), this }, fired: function () { return !!d } }; return k }, n.extend({ Deferred: function (a) { var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]], c = "pending", d = { state: function () { return c }, always: function () { return e.done(arguments).fail(arguments), this }, then: function () { var a = arguments; return n.Deferred(function (c) { n.each(b, function (b, f) { var g = n.isFunction(a[b]) && a[b]; e[f[1]](function () { var a = g && g.apply(this, arguments); a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments) }) }), a = null }).promise() }, promise: function (a) { return null != a ? n.extend(a, d) : d } }, e = {}; return d.pipe = d.then, n.each(b, function (a, f) { var g = f[2], h = f[3]; d[f[1]] = g.add, h && g.add(function () { c = h }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () { return e[f[0] + "With"](this === e ? d : this, arguments), this }, e[f[0] + "With"] = g.fireWith }), d.promise(e), a && a.call(e, e), e }, when: function (a) { var b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && n.isFunction(a.promise) ? e : 0, g = 1 === f ? a : n.Deferred(), h = function (a, b, c) { return function (e) { b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c) } }, i, j, k; if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++)c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f; return f || g.resolveWith(k, c), g.promise() } }); var I; n.fn.ready = function (a) { return n.ready.promise().done(a), this }, n.extend({ isReady: !1, readyWait: 1, holdReady: function (a) { a ? n.readyWait++ : n.ready(!0) }, ready: function (a) { if (a === !0 ? !--n.readyWait : !n.isReady) { if (!z.body) return setTimeout(n.ready); n.isReady = !0, a !== !0 && --n.readyWait > 0 || (I.resolveWith(z, [n]), n.fn.trigger && n(z).trigger("ready").off("ready")) } } }); function J() { z.addEventListener ? (z.removeEventListener("DOMContentLoaded", K, !1), a.removeEventListener("load", K, !1)) : (z.detachEvent("onreadystatechange", K), a.detachEvent("onload", K)) } function K() { (z.addEventListener || "load" === event.type || "complete" === z.readyState) && (J(), n.ready()) } n.ready.promise = function (b) { if (!I) if (I = n.Deferred(), "complete" === z.readyState) setTimeout(n.ready); else if (z.addEventListener) z.addEventListener("DOMContentLoaded", K, !1), a.addEventListener("load", K, !1); else { z.attachEvent("onreadystatechange", K), a.attachEvent("onload", K); var c = !1; try { c = null == a.frameElement && z.documentElement } catch (d) { } c && c.doScroll && !function e() { if (!n.isReady) { try { c.doScroll("left") } catch (a) { return setTimeout(e, 50) } J(), n.ready() } }() } return I.promise(b) }; var L = "undefined", M; for (M in n(l)) break; l.ownLast = "0" !== M, l.inlineBlockNeedsLayout = !1, n(function () { var a, b, c = z.getElementsByTagName("body")[0]; c && (a = z.createElement("div"), a.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px", b = z.createElement("div"), c.appendChild(a).appendChild(b), typeof b.style.zoom !== L && (b.style.cssText = "border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1", (l.inlineBlockNeedsLayout = 3 === b.offsetWidth) && (c.style.zoom = 1)), c.removeChild(a), a = b = null) }), function () { var a = z.createElement("div"); if (null == l.deleteExpando) { l.deleteExpando = !0; try { delete a.test } catch (b) { l.deleteExpando = !1 } } a = null }(), n.acceptData = function (a) { var b = n.noData[(a.nodeName + " ").toLowerCase()], c = +a.nodeType || 1; return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b }; var N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, O = /([A-Z])/g; function P(a, b, c) { if (void 0 === c && 1 === a.nodeType) { var d = "data-" + b.replace(O, "-$1").toLowerCase(); if (c = a.getAttribute(d), "string" == typeof c) { try { c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : N.test(c) ? n.parseJSON(c) : c } catch (e) { } n.data(a, b, c) } else c = void 0 } return c } function Q(a) { var b; for (b in a) if (("data" !== b || !n.isEmptyObject(a[b])) && "toJSON" !== b) return !1; return !0 } function R(a, b, d, e) {
        if (n.acceptData(a)) {
            var f, g, h = n.expando, i = a.nodeType, j = i ? n.cache : a, k = i ? a[h] : a[h] && h; if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || n.guid++ : h), j[k] || (j[k] = i ? {} : { toJSON: n.noop }), ("object" == typeof b || "function" == typeof b) && (e ? j[k] = n.extend(j[k], b) : j[k].data = n.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[n.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[n.camelCase(b)])) : f = g, f
        }
    } function S(a, b, c) { if (n.acceptData(a)) { var d, e, f = a.nodeType, g = f ? n.cache : a, h = f ? a[n.expando] : n.expando; if (g[h]) { if (b && (d = c ? g[h] : g[h].data)) { n.isArray(b) ? b = b.concat(n.map(b, n.camelCase)) : b in d ? b = [b] : (b = n.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length; while (e--) delete d[b[e]]; if (c ? !Q(d) : !n.isEmptyObject(d)) return } (c || (delete g[h].data, Q(g[h]))) && (f ? n.cleanData([a], !0) : l.deleteExpando || g != g.window ? delete g[h] : g[h] = null) } } } n.extend({ cache: {}, noData: { "applet ": !0, "embed ": !0, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" }, hasData: function (a) { return a = a.nodeType ? n.cache[a[n.expando]] : a[n.expando], !!a && !Q(a) }, data: function (a, b, c) { return R(a, b, c) }, removeData: function (a, b) { return S(a, b) }, _data: function (a, b, c) { return R(a, b, c, !0) }, _removeData: function (a, b) { return S(a, b, !0) } }), n.fn.extend({ data: function (a, b) { var c, d, e, f = this[0], g = f && f.attributes; if (void 0 === a) { if (this.length && (e = n.data(f), 1 === f.nodeType && !n._data(f, "parsedAttrs"))) { c = g.length; while (c--) d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), P(f, d, e[d])); n._data(f, "parsedAttrs", !0) } return e } return "object" == typeof a ? this.each(function () { n.data(this, a) }) : arguments.length > 1 ? this.each(function () { n.data(this, a, b) }) : f ? P(f, a, n.data(f, a)) : void 0 }, removeData: function (a) { return this.each(function () { n.removeData(this, a) }) } }), n.extend({ queue: function (a, b, c) { var d; return a ? (b = (b || "fx") + "queue", d = n._data(a, b), c && (!d || n.isArray(c) ? d = n._data(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0 }, dequeue: function (a, b) { b = b || "fx"; var c = n.queue(a, b), d = c.length, e = c.shift(), f = n._queueHooks(a, b), g = function () { n.dequeue(a, b) }; "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire() }, _queueHooks: function (a, b) { var c = b + "queueHooks"; return n._data(a, c) || n._data(a, c, { empty: n.Callbacks("once memory").add(function () { n._removeData(a, b + "queue"), n._removeData(a, c) }) }) } }), n.fn.extend({ queue: function (a, b) { var c = 2; return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () { var c = n.queue(this, a, b); n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a) }) }, dequeue: function (a) { return this.each(function () { n.dequeue(this, a) }) }, clearQueue: function (a) { return this.queue(a || "fx", []) }, promise: function (a, b) { var c, d = 1, e = n.Deferred(), f = this, g = this.length, h = function () { --d || e.resolveWith(f, [f]) }; "string" != typeof a && (b = a, a = void 0), a = a || "fx"; while (g--) c = n._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h)); return h(), e.promise(b) } }); var T = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, U = ["Top", "Right", "Bottom", "Left"], V = function (a, b) { return a = b || a, "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a) }, W = n.access = function (a, b, c, d, e, f, g) { var h = 0, i = a.length, j = null == c; if ("object" === n.type(c)) { e = !0; for (h in c) n.access(a, b, h, c[h], !0, f, g) } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) { return j.call(n(a), c) })), b)) for (; i > h; h++)b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c))); return e ? a : j ? b.call(a) : i ? b(a[0], c) : f }, X = /^(?:checkbox|radio)$/i; !function () { var a = z.createDocumentFragment(), b = z.createElement("div"), c = z.createElement("input"); if (b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a>", l.leadingWhitespace = 3 === b.firstChild.nodeType, l.tbody = !b.getElementsByTagName("tbody").length, l.htmlSerialize = !!b.getElementsByTagName("link").length, l.html5Clone = "<:nav></:nav>" !== z.createElement("nav").cloneNode(!0).outerHTML, c.type = "checkbox", c.checked = !0, a.appendChild(c), l.appendChecked = c.checked, b.innerHTML = "<textarea>x</textarea>", l.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, a.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", l.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, l.noCloneEvent = !0, b.attachEvent && (b.attachEvent("onclick", function () { l.noCloneEvent = !1 }), b.cloneNode(!0).click()), null == l.deleteExpando) { l.deleteExpando = !0; try { delete b.test } catch (d) { l.deleteExpando = !1 } } a = b = c = null }(), function () { var b, c, d = z.createElement("div"); for (b in { submit: !0, change: !0, focusin: !0 }) c = "on" + b, (l[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), l[b + "Bubbles"] = d.attributes[c].expando === !1); d = null }(); var Y = /^(?:input|select|textarea)$/i, Z = /^key/, $ = /^(?:mouse|contextmenu)|click/, _ = /^(?:focusinfocus|focusoutblur)$/, ab = /^([^.]*)(?:\.(.+)|)$/; function bb() { return !0 } function cb() { return !1 } function db() { try { return z.activeElement } catch (a) { } } n.event = { global: {}, add: function (a, b, c, d, e) { var f, g, h, i, j, k, l, m, o, p, q, r = n._data(a); if (r) { c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = n.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) { return typeof n === L || a && n.event.triggered === a.type ? void 0 : n.event.dispatch.apply(k.elem, arguments) }, k.elem = a), b = (b || "").match(F) || [""], h = b.length; while (h--) f = ab.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = n.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = n.event.special[o] || {}, l = n.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && n.expr.match.needsContext.test(e), namespace: p.join(".") }, i), (m = g[o]) || (m = g[o] = [], m.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, l) : m.push(l), n.event.global[o] = !0); a = null } }, remove: function (a, b, c, d, e) { var f, g, h, i, j, k, l, m, o, p, q, r = n.hasData(a) && n._data(a); if (r && (k = r.events)) { b = (b || "").match(F) || [""], j = b.length; while (j--) if (h = ab.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) { l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = m.length; while (f--) g = m[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (m.splice(f, 1), g.selector && m.delegateCount--, l.remove && l.remove.call(a, g)); i && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete k[o]) } else for (o in k) n.event.remove(a, o + b[j], c, d, !0); n.isEmptyObject(k) && (delete r.handle, n._removeData(a, "events")) } }, trigger: function (b, c, d, e) { var f, g, h, i, k, l, m, o = [d || z], p = j.call(b, "type") ? b.type : b, q = j.call(b, "namespace") ? b.namespace.split(".") : []; if (h = l = d = d || z, 3 !== d.nodeType && 8 !== d.nodeType && !_.test(p + n.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[n.expando] ? b : new n.Event(p, "object" == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), k = n.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) { if (!e && !k.noBubble && !n.isWindow(d)) { for (i = k.delegateType || p, _.test(i + p) || (h = h.parentNode); h; h = h.parentNode)o.push(h), l = h; l === (d.ownerDocument || z) && o.push(l.defaultView || l.parentWindow || a) } m = 0; while ((h = o[m++]) && !b.isPropagationStopped()) b.type = m > 1 ? i : k.bindType || p, f = (n._data(h, "events") || {})[b.type] && n._data(h, "handle"), f && f.apply(h, c), f = g && h[g], f && f.apply && n.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault()); if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && n.acceptData(d) && g && d[p] && !n.isWindow(d)) { l = d[g], l && (d[g] = null), n.event.triggered = p; try { d[p]() } catch (r) { } n.event.triggered = void 0, l && (d[g] = l) } return b.result } }, dispatch: function (a) { a = n.event.fix(a); var b, c, e, f, g, h = [], i = d.call(arguments), j = (n._data(this, "events") || {})[a.type] || [], k = n.event.special[a.type] || {}; if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) { h = n.event.handlers.call(this, a, j), b = 0; while ((f = h[b++]) && !a.isPropagationStopped()) { a.currentTarget = f.elem, g = 0; while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((n.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation())) } return k.postDispatch && k.postDispatch.call(this, a), a.result } }, handlers: function (a, b) { var c, d, e, f, g = [], h = b.delegateCount, i = a.target; if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i != this; i = i.parentNode || this)if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) { for (e = [], f = 0; h > f; f++)d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? n(c, this).index(i) >= 0 : n.find(c, this, null, [i]).length), e[c] && e.push(d); e.length && g.push({ elem: i, handlers: e }) } return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g }, fix: function (a) { if (a[n.expando]) return a; var b, c, d, e = a.type, f = a, g = this.fixHooks[e]; g || (this.fixHooks[e] = g = $.test(e) ? this.mouseHooks : Z.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length; while (b--) c = d[b], a[c] = f[c]; return a.target || (a.target = f.srcElement || z), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a }, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function (a, b) { return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a } }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function (a, b) { var c, d, e, f = b.button, g = b.fromElement; return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || z, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a } }, special: { load: { noBubble: !0 }, focus: { trigger: function () { if (this !== db() && this.focus) try { return this.focus(), !1 } catch (a) { } }, delegateType: "focusin" }, blur: { trigger: function () { return this === db() && this.blur ? (this.blur(), !1) : void 0 }, delegateType: "focusout" }, click: { trigger: function () { return n.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0 }, _default: function (a) { return n.nodeName(a.target, "a") } }, beforeunload: { postDispatch: function (a) { void 0 !== a.result && (a.originalEvent.returnValue = a.result) } } }, simulate: function (a, b, c, d) { var e = n.extend(new n.Event, c, { type: a, isSimulated: !0, originalEvent: {} }); d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault() } }, n.removeEvent = z.removeEventListener ? function (a, b, c) { a.removeEventListener && a.removeEventListener(b, c, !1) } : function (a, b, c) { var d = "on" + b; a.detachEvent && (typeof a[d] === L && (a[d] = null), a.detachEvent(d, c)) }, n.Event = function (a, b) { return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && (a.returnValue === !1 || a.getPreventDefault && a.getPreventDefault()) ? bb : cb) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b) }, n.Event.prototype = { isDefaultPrevented: cb, isPropagationStopped: cb, isImmediatePropagationStopped: cb, preventDefault: function () { var a = this.originalEvent; this.isDefaultPrevented = bb, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1) }, stopPropagation: function () { var a = this.originalEvent; this.isPropagationStopped = bb, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0) }, stopImmediatePropagation: function () { this.isImmediatePropagationStopped = bb, this.stopPropagation() } }, n.each({ mouseenter: "mouseover", mouseleave: "mouseout" }, function (a, b) { n.event.special[a] = { delegateType: b, bindType: b, handle: function (a) { var c, d = this, e = a.relatedTarget, f = a.handleObj; return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c } } }), l.submitBubbles || (n.event.special.submit = { setup: function () { return n.nodeName(this, "form") ? !1 : void n.event.add(this, "click._submit keypress._submit", function (a) { var b = a.target, c = n.nodeName(b, "input") || n.nodeName(b, "button") ? b.form : void 0; c && !n._data(c, "submitBubbles") && (n.event.add(c, "submit._submit", function (a) { a._submit_bubble = !0 }), n._data(c, "submitBubbles", !0)) }) }, postDispatch: function (a) { a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && n.event.simulate("submit", this.parentNode, a, !0)) }, teardown: function () { return n.nodeName(this, "form") ? !1 : void n.event.remove(this, "._submit") } }), l.changeBubbles || (n.event.special.change = { setup: function () { return Y.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (n.event.add(this, "propertychange._change", function (a) { "checked" === a.originalEvent.propertyName && (this._just_changed = !0) }), n.event.add(this, "click._change", function (a) { this._just_changed && !a.isTrigger && (this._just_changed = !1), n.event.simulate("change", this, a, !0) })), !1) : void n.event.add(this, "beforeactivate._change", function (a) { var b = a.target; Y.test(b.nodeName) && !n._data(b, "changeBubbles") && (n.event.add(b, "change._change", function (a) { !this.parentNode || a.isSimulated || a.isTrigger || n.event.simulate("change", this.parentNode, a, !0) }), n._data(b, "changeBubbles", !0)) }) }, handle: function (a) { var b = a.target; return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0 }, teardown: function () { return n.event.remove(this, "._change"), !Y.test(this.nodeName) } }), l.focusinBubbles || n.each({ focus: "focusin", blur: "focusout" }, function (a, b) { var c = function (a) { n.event.simulate(b, a.target, n.event.fix(a), !0) }; n.event.special[b] = { setup: function () { var d = this.ownerDocument || this, e = n._data(d, b); e || d.addEventListener(a, c, !0), n._data(d, b, (e || 0) + 1) }, teardown: function () { var d = this.ownerDocument || this, e = n._data(d, b) - 1; e ? n._data(d, b, e) : (d.removeEventListener(a, c, !0), n._removeData(d, b)) } } }), n.fn.extend({ on: function (a, b, c, d, e) { var f, g; if ("object" == typeof a) { "string" != typeof b && (c = c || b, b = void 0); for (f in a) this.on(f, b, c, a[f], e); return this } if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = cb; else if (!d) return this; return 1 === e && (g = d, d = function (a) { return n().off(a), g.apply(this, arguments) }, d.guid = g.guid || (g.guid = n.guid++)), this.each(function () { n.event.add(this, a, d, c, b) }) }, one: function (a, b, c, d) { return this.on(a, b, c, d, 1) }, off: function (a, b, c) { var d, e; if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this; if ("object" == typeof a) { for (e in a) this.off(e, b, a[e]); return this } return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = cb), this.each(function () { n.event.remove(this, a, c, b) }) }, trigger: function (a, b) { return this.each(function () { n.event.trigger(a, b, this) }) }, triggerHandler: function (a, b) { var c = this[0]; return c ? n.event.trigger(a, b, c, !0) : void 0 } }); function eb(a) { var b = fb.split("|"), c = a.createDocumentFragment(); if (c.createElement) while (b.length) c.createElement(b.pop()); return c } var fb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", gb = / jQuery\d+="(?:null|\d+)"/g, hb = new RegExp("<(?:" + fb + ")[\\s/>]", "i"), ib = /^\s+/, jb = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, kb = /<([\w:]+)/, lb = /<tbody/i, mb = /<|&#?\w+;/, nb = /<(?:script|style|link)/i, ob = /checked\s*(?:[^=]|=\s*.checked.)/i, pb = /^$|\/(?:java|ecma)script/i, qb = /^true\/(.*)/, rb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, sb = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: l.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] }, tb = eb(z), ub = tb.appendChild(z.createElement("div")); sb.optgroup = sb.option, sb.tbody = sb.tfoot = sb.colgroup = sb.caption = sb.thead, sb.th = sb.td; function vb(a, b) { var c, d, e = 0, f = typeof a.getElementsByTagName !== L ? a.getElementsByTagName(b || "*") : typeof a.querySelectorAll !== L ? a.querySelectorAll(b || "*") : void 0; if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++)!b || n.nodeName(d, b) ? f.push(d) : n.merge(f, vb(d, b)); return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], f) : f } function wb(a) { X.test(a.type) && (a.defaultChecked = a.checked) } function xb(a, b) { return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a } function yb(a) { return a.type = (null !== n.find.attr(a, "type")) + "/" + a.type, a } function zb(a) { var b = qb.exec(a.type); return b ? a.type = b[1] : a.removeAttribute("type"), a } function Ab(a, b) { for (var c, d = 0; null != (c = a[d]); d++)n._data(c, "globalEval", !b || n._data(b[d], "globalEval")) } function Bb(a, b) { if (1 === b.nodeType && n.hasData(a)) { var c, d, e, f = n._data(a), g = n._data(b, f), h = f.events; if (h) { delete g.handle, g.events = {}; for (c in h) for (d = 0, e = h[c].length; e > d; d++)n.event.add(b, c, h[c][d]) } g.data && (g.data = n.extend({}, g.data)) } } function Cb(a, b) { var c, d, e; if (1 === b.nodeType) { if (c = b.nodeName.toLowerCase(), !l.noCloneEvent && b[n.expando]) { e = n._data(b); for (d in e.events) n.removeEvent(b, d, e.handle); b.removeAttribute(n.expando) } "script" === c && b.text !== a.text ? (yb(b).text = a.text, zb(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), l.html5Clone && a.innerHTML && !n.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && X.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue) } } n.extend({ clone: function (a, b, c) { var d, e, f, g, h, i = n.contains(a.ownerDocument, a); if (l.html5Clone || n.isXMLDoc(a) || !hb.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (ub.innerHTML = a.outerHTML, ub.removeChild(f = ub.firstChild)), !(l.noCloneEvent && l.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (d = vb(f), h = vb(a), g = 0; null != (e = h[g]); ++g)d[g] && Cb(e, d[g]); if (b) if (c) for (h = h || vb(a), d = d || vb(f), g = 0; null != (e = h[g]); g++)Bb(e, d[g]); else Bb(a, f); return d = vb(f, "script"), d.length > 0 && Ab(d, !i && vb(a, "script")), d = h = e = null, f }, buildFragment: function (a, b, c, d) { for (var e, f, g, h, i, j, k, m = a.length, o = eb(b), p = [], q = 0; m > q; q++)if (f = a[q], f || 0 === f) if ("object" === n.type(f)) n.merge(p, f.nodeType ? [f] : f); else if (mb.test(f)) { h = h || o.appendChild(b.createElement("div")), i = (kb.exec(f) || ["", ""])[1].toLowerCase(), k = sb[i] || sb._default, h.innerHTML = k[1] + f.replace(jb, "<$1></$2>") + k[2], e = k[0]; while (e--) h = h.lastChild; if (!l.leadingWhitespace && ib.test(f) && p.push(b.createTextNode(ib.exec(f)[0])), !l.tbody) { f = "table" !== i || lb.test(f) ? "<table>" !== k[1] || lb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length; while (e--) n.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j) } n.merge(p, h.childNodes), h.textContent = ""; while (h.firstChild) h.removeChild(h.firstChild); h = o.lastChild } else p.push(b.createTextNode(f)); h && o.removeChild(h), l.appendChecked || n.grep(vb(p, "input"), wb), q = 0; while (f = p[q++]) if ((!d || -1 === n.inArray(f, d)) && (g = n.contains(f.ownerDocument, f), h = vb(o.appendChild(f), "script"), g && Ab(h), c)) { e = 0; while (f = h[e++]) pb.test(f.type || "") && c.push(f) } return h = null, o }, cleanData: function (a, b) { for (var d, e, f, g, h = 0, i = n.expando, j = n.cache, k = l.deleteExpando, m = n.event.special; null != (d = a[h]); h++)if ((b || n.acceptData(d)) && (f = d[i], g = f && j[f])) { if (g.events) for (e in g.events) m[e] ? n.event.remove(d, e) : n.removeEvent(d, e, g.handle); j[f] && (delete j[f], k ? delete d[i] : typeof d.removeAttribute !== L ? d.removeAttribute(i) : d[i] = null, c.push(f)) } } }), n.fn.extend({ text: function (a) { return W(this, function (a) { return void 0 === a ? n.text(this) : this.empty().append((this[0] && this[0].ownerDocument || z).createTextNode(a)) }, null, a, arguments.length) }, append: function () { return this.domManip(arguments, function (a) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) { var b = xb(this, a); b.appendChild(a) } }) }, prepend: function () { return this.domManip(arguments, function (a) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) { var b = xb(this, a); b.insertBefore(a, b.firstChild) } }) }, before: function () { return this.domManip(arguments, function (a) { this.parentNode && this.parentNode.insertBefore(a, this) }) }, after: function () { return this.domManip(arguments, function (a) { this.parentNode && this.parentNode.insertBefore(a, this.nextSibling) }) }, remove: function (a, b) { for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++)b || 1 !== c.nodeType || n.cleanData(vb(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && Ab(vb(c, "script")), c.parentNode.removeChild(c)); return this }, empty: function () { for (var a, b = 0; null != (a = this[b]); b++) { 1 === a.nodeType && n.cleanData(vb(a, !1)); while (a.firstChild) a.removeChild(a.firstChild); a.options && n.nodeName(a, "select") && (a.options.length = 0) } return this }, clone: function (a, b) { return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () { return n.clone(this, a, b) }) }, html: function (a) { return W(this, function (a) { var b = this[0] || {}, c = 0, d = this.length; if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(gb, "") : void 0; if (!("string" != typeof a || nb.test(a) || !l.htmlSerialize && hb.test(a) || !l.leadingWhitespace && ib.test(a) || sb[(kb.exec(a) || ["", ""])[1].toLowerCase()])) { a = a.replace(jb, "<$1></$2>"); try { for (; d > c; c++)b = this[c] || {}, 1 === b.nodeType && (n.cleanData(vb(b, !1)), b.innerHTML = a); b = 0 } catch (e) { } } b && this.empty().append(a) }, null, a, arguments.length) }, replaceWith: function () { var a = arguments[0]; return this.domManip(arguments, function (b) { a = this.parentNode, n.cleanData(vb(this)), a && a.replaceChild(b, this) }), a && (a.length || a.nodeType) ? this : this.remove() }, detach: function (a) { return this.remove(a, !0) }, domManip: function (a, b) { a = e.apply([], a); var c, d, f, g, h, i, j = 0, k = this.length, m = this, o = k - 1, p = a[0], q = n.isFunction(p); if (q || k > 1 && "string" == typeof p && !l.checkClone && ob.test(p)) return this.each(function (c) { var d = m.eq(c); q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b) }); if (k && (i = n.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) { for (g = n.map(vb(i, "script"), yb), f = g.length; k > j; j++)d = i, j !== o && (d = n.clone(d, !0, !0), f && n.merge(g, vb(d, "script"))), b.call(this[j], d, j); if (f) for (h = g[g.length - 1].ownerDocument, n.map(g, zb), j = 0; f > j; j++)d = g[j], pb.test(d.type || "") && !n._data(d, "globalEval") && n.contains(h, d) && (d.src ? n._evalUrl && n._evalUrl(d.src) : n.globalEval((d.text || d.textContent || d.innerHTML || "").replace(rb, ""))); i = c = null } return this } }), n.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) { n.fn[a] = function (a) { for (var c, d = 0, e = [], g = n(a), h = g.length - 1; h >= d; d++)c = d === h ? this : this.clone(!0), n(g[d])[b](c), f.apply(e, c.get()); return this.pushStack(e) } }); var Db, Eb = {}; function Fb(b, c) { var d = n(c.createElement(b)).appendTo(c.body), e = a.getDefaultComputedStyle ? a.getDefaultComputedStyle(d[0]).display : n.css(d[0], "display"); return d.detach(), e } function Gb(a) { var b = z, c = Eb[a]; return c || (c = Fb(a, b), "none" !== c && c || (Db = (Db || n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Db[0].contentWindow || Db[0].contentDocument).document, b.write(), b.close(), c = Fb(a, b), Db.detach()), Eb[a] = c), c } !function () { var a, b, c = z.createElement("div"), d = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0"; c.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", a = c.getElementsByTagName("a")[0], a.style.cssText = "float:left;opacity:.5", l.opacity = /^0.5/.test(a.style.opacity), l.cssFloat = !!a.style.cssFloat, c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", l.clearCloneStyle = "content-box" === c.style.backgroundClip, a = c = null, l.shrinkWrapBlocks = function () { var a, c, e, f; if (null == b) { if (a = z.getElementsByTagName("body")[0], !a) return; f = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px", c = z.createElement("div"), e = z.createElement("div"), a.appendChild(c).appendChild(e), b = !1, typeof e.style.zoom !== L && (e.style.cssText = d + ";width:1px;padding:1px;zoom:1", e.innerHTML = "<div></div>", e.firstChild.style.width = "5px", b = 3 !== e.offsetWidth), a.removeChild(c), a = c = e = null } return b } }(); var Hb = /^margin/, Ib = new RegExp("^(" + T + ")(?!px)[a-z%]+$", "i"), Jb, Kb, Lb = /^(top|right|bottom|left)$/; a.getComputedStyle ? (Jb = function (a) { return a.ownerDocument.defaultView.getComputedStyle(a, null) }, Kb = function (a, b, c) { var d, e, f, g, h = a.style; return c = c || Jb(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), Ib.test(g) && Hb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + "" }) : z.documentElement.currentStyle && (Jb = function (a) { return a.currentStyle }, Kb = function (a, b, c) { var d, e, f, g, h = a.style; return c = c || Jb(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Ib.test(g) && !Lb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto" }); function Mb(a, b) { return { get: function () { var c = a(); if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments) } } } !function () { var b, c, d, e, f, g, h = z.createElement("div"), i = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px", j = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0"; h.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", b = h.getElementsByTagName("a")[0], b.style.cssText = "float:left;opacity:.5", l.opacity = /^0.5/.test(b.style.opacity), l.cssFloat = !!b.style.cssFloat, h.style.backgroundClip = "content-box", h.cloneNode(!0).style.backgroundClip = "", l.clearCloneStyle = "content-box" === h.style.backgroundClip, b = h = null, n.extend(l, { reliableHiddenOffsets: function () { if (null != c) return c; var a, b, d, e = z.createElement("div"), f = z.getElementsByTagName("body")[0]; if (f) return e.setAttribute("className", "t"), e.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", a = z.createElement("div"), a.style.cssText = i, f.appendChild(a).appendChild(e), e.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", b = e.getElementsByTagName("td"), b[0].style.cssText = "padding:0;margin:0;border:0;display:none", d = 0 === b[0].offsetHeight, b[0].style.display = "", b[1].style.display = "none", c = d && 0 === b[0].offsetHeight, f.removeChild(a), e = f = null, c }, boxSizing: function () { return null == d && k(), d }, boxSizingReliable: function () { return null == e && k(), e }, pixelPosition: function () { return null == f && k(), f }, reliableMarginRight: function () { var b, c, d, e; if (null == g && a.getComputedStyle) { if (b = z.getElementsByTagName("body")[0], !b) return; c = z.createElement("div"), d = z.createElement("div"), c.style.cssText = i, b.appendChild(c).appendChild(d), e = d.appendChild(z.createElement("div")), e.style.cssText = d.style.cssText = j, e.style.marginRight = e.style.width = "0", d.style.width = "1px", g = !parseFloat((a.getComputedStyle(e, null) || {}).marginRight), b.removeChild(c) } return g } }); function k() { var b, c, h = z.getElementsByTagName("body")[0]; h && (b = z.createElement("div"), c = z.createElement("div"), b.style.cssText = i, h.appendChild(b).appendChild(c), c.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;display:block;padding:1px;border:1px;width:4px;margin-top:1%;top:1%", n.swap(h, null != h.style.zoom ? { zoom: 1 } : {}, function () { d = 4 === c.offsetWidth }), e = !0, f = !1, g = !0, a.getComputedStyle && (f = "1%" !== (a.getComputedStyle(c, null) || {}).top, e = "4px" === (a.getComputedStyle(c, null) || { width: "4px" }).width), h.removeChild(b), c = h = null) } }(), n.swap = function (a, b, c, d) { var e, f, g = {}; for (f in b) g[f] = a.style[f], a.style[f] = b[f]; e = c.apply(a, d || []); for (f in b) a.style[f] = g[f]; return e }; var Nb = /alpha\([^)]*\)/i, Ob = /opacity\s*=\s*([^)]*)/, Pb = /^(none|table(?!-c[ea]).+)/, Qb = new RegExp("^(" + T + ")(.*)$", "i"), Rb = new RegExp("^([+-])=(" + T + ")", "i"), Sb = { position: "absolute", visibility: "hidden", display: "block" }, Tb = { letterSpacing: 0, fontWeight: 400 }, Ub = ["Webkit", "O", "Moz", "ms"]; function Vb(a, b) { if (b in a) return b; var c = b.charAt(0).toUpperCase() + b.slice(1), d = b, e = Ub.length; while (e--) if (b = Ub[e] + c, b in a) return b; return d } function Wb(a, b) { for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)d = a[g], d.style && (f[g] = n._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && V(d) && (f[g] = n._data(d, "olddisplay", Gb(d.nodeName)))) : f[g] || (e = V(d), (c && "none" !== c || !e) && n._data(d, "olddisplay", e ? c : n.css(d, "display")))); for (g = 0; h > g; g++)d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none")); return a } function Xb(a, b, c) { var d = Qb.exec(b); return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b } function Yb(a, b, c, d, e) { for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2)"margin" === c && (g += n.css(a, c + U[f], !0, e)), d ? ("content" === c && (g -= n.css(a, "padding" + U[f], !0, e)), "margin" !== c && (g -= n.css(a, "border" + U[f] + "Width", !0, e))) : (g += n.css(a, "padding" + U[f], !0, e), "padding" !== c && (g += n.css(a, "border" + U[f] + "Width", !0, e))); return g } function Zb(a, b, c) { var d = !0, e = "width" === b ? a.offsetWidth : a.offsetHeight, f = Jb(a), g = l.boxSizing() && "border-box" === n.css(a, "boxSizing", !1, f); if (0 >= e || null == e) { if (e = Kb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Ib.test(e)) return e; d = g && (l.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0 } return e + Yb(a, b, c || (g ? "border" : "content"), d, f) + "px" } n.extend({ cssHooks: { opacity: { get: function (a, b) { if (b) { var c = Kb(a, "opacity"); return "" === c ? "1" : c } } } }, cssNumber: { columnCount: !0, fillOpacity: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": l.cssFloat ? "cssFloat" : "styleFloat" }, style: function (a, b, c, d) { if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) { var e, f, g, h = n.camelCase(b), i = a.style; if (b = n.cssProps[h] || (n.cssProps[h] = Vb(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b]; if (f = typeof c, "string" === f && (e = Rb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || n.cssNumber[h] || (c += "px"), l.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try { i[b] = "", i[b] = c } catch (j) { } } }, css: function (a, b, c, d) { var e, f, g, h = n.camelCase(b); return b = n.cssProps[h] || (n.cssProps[h] = Vb(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Kb(a, b, d)), "normal" === f && b in Tb && (f = Tb[b]), "" === c || c ? (e = parseFloat(f), c === !0 || n.isNumeric(e) ? e || 0 : f) : f } }), n.each(["height", "width"], function (a, b) { n.cssHooks[b] = { get: function (a, c, d) { return c ? 0 === a.offsetWidth && Pb.test(n.css(a, "display")) ? n.swap(a, Sb, function () { return Zb(a, b, d) }) : Zb(a, b, d) : void 0 }, set: function (a, c, d) { var e = d && Jb(a); return Xb(a, c, d ? Yb(a, b, d, l.boxSizing() && "border-box" === n.css(a, "boxSizing", !1, e), e) : 0) } } }), l.opacity || (n.cssHooks.opacity = { get: function (a, b) { return Ob.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "" }, set: function (a, b) { var c = a.style, d = a.currentStyle, e = n.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "", f = d && d.filter || c.filter || ""; c.zoom = 1, (b >= 1 || "" === b) && "" === n.trim(f.replace(Nb, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Nb.test(f) ? f.replace(Nb, e) : f + " " + e) } }), n.cssHooks.marginRight = Mb(l.reliableMarginRight, function (a, b) { return b ? n.swap(a, { display: "inline-block" }, Kb, [a, "marginRight"]) : void 0 }), n.each({ margin: "", padding: "", border: "Width" }, function (a, b) { n.cssHooks[a + b] = { expand: function (c) { for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++)e[a + U[d] + b] = f[d] || f[d - 2] || f[0]; return e } }, Hb.test(a) || (n.cssHooks[a + b].set = Xb) }), n.fn.extend({
        css: function (a, b) {
            return W(this, function (a, b, c) {
                var d, e, f = {}, g = 0; if (n.isArray(b)) { for (d = Jb(a), e = b.length; e > g; g++)f[b[g]] = n.css(a, b[g], !1, d); return f } return void 0 !== c ? n.style(a, b, c) : n.css(a, b)
            }, a, b, arguments.length > 1)
        }, show: function () { return Wb(this, !0) }, hide: function () { return Wb(this) }, toggle: function (a) { return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () { V(this) ? n(this).show() : n(this).hide() }) }
    }); function $b(a, b, c, d, e) { return new $b.prototype.init(a, b, c, d, e) } n.Tween = $b, $b.prototype = { constructor: $b, init: function (a, b, c, d, e, f) { this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? "" : "px") }, cur: function () { var a = $b.propHooks[this.prop]; return a && a.get ? a.get(this) : $b.propHooks._default.get(this) }, run: function (a) { var b, c = $b.propHooks[this.prop]; return this.pos = b = this.options.duration ? n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : $b.propHooks._default.set(this), this } }, $b.prototype.init.prototype = $b.prototype, $b.propHooks = { _default: { get: function (a) { var b; return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop] }, set: function (a) { n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now } } }, $b.propHooks.scrollTop = $b.propHooks.scrollLeft = { set: function (a) { a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now) } }, n.easing = { linear: function (a) { return a }, swing: function (a) { return .5 - Math.cos(a * Math.PI) / 2 } }, n.fx = $b.prototype.init, n.fx.step = {}; var _b, ac, bc = /^(?:toggle|show|hide)$/, cc = new RegExp("^(?:([+-])=|)(" + T + ")([a-z%]*)$", "i"), dc = /queueHooks$/, ec = [jc], fc = { "*": [function (a, b) { var c = this.createTween(a, b), d = c.cur(), e = cc.exec(b), f = e && e[3] || (n.cssNumber[a] ? "" : "px"), g = (n.cssNumber[a] || "px" !== f && +d) && cc.exec(n.css(c.elem, a)), h = 1, i = 20; if (g && g[3] !== f) { f = f || g[3], e = e || [], g = +d || 1; do h = h || ".5", g /= h, n.style(c.elem, a, g + f); while (h !== (h = c.cur() / d) && 1 !== h && --i) } return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c }] }; function gc() { return setTimeout(function () { _b = void 0 }), _b = n.now() } function hc(a, b) { var c, d = { height: a }, e = 0; for (b = b ? 1 : 0; 4 > e; e += 2 - b)c = U[e], d["margin" + c] = d["padding" + c] = a; return b && (d.opacity = d.width = a), d } function ic(a, b, c) { for (var d, e = (fc[b] || []).concat(fc["*"]), f = 0, g = e.length; g > f; f++)if (d = e[f].call(c, b, a)) return d } function jc(a, b, c) { var d, e, f, g, h, i, j, k, m = this, o = {}, p = a.style, q = a.nodeType && V(a), r = n._data(a, "fxshow"); c.queue || (h = n._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () { h.unqueued || i() }), h.unqueued++, m.always(function () { m.always(function () { h.unqueued--, n.queue(a, "fx").length || h.empty.fire() }) })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = n.css(a, "display"), k = Gb(a.nodeName), "none" === j && (j = k), "inline" === j && "none" === n.css(a, "float") && (l.inlineBlockNeedsLayout && "inline" !== k ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", l.shrinkWrapBlocks() || m.always(function () { p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2] })); for (d in b) if (e = b[d], bc.exec(e)) { if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) { if ("show" !== e || !r || void 0 === r[d]) continue; q = !0 } o[d] = r && r[d] || n.style(a, d) } if (!n.isEmptyObject(o)) { r ? "hidden" in r && (q = r.hidden) : r = n._data(a, "fxshow", {}), f && (r.hidden = !q), q ? n(a).show() : m.done(function () { n(a).hide() }), m.done(function () { var b; n._removeData(a, "fxshow"); for (b in o) n.style(a, b, o[b]) }); for (d in o) g = ic(q ? r[d] : 0, d, m), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0)) } } function kc(a, b) { var c, d, e, f, g; for (c in a) if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && "expand" in g) { f = g.expand(f), delete a[d]; for (c in f) c in a || (a[c] = f[c], b[c] = e) } else b[d] = e } function lc(a, b, c) { var d, e, f = 0, g = ec.length, h = n.Deferred().always(function () { delete i.elem }), i = function () { if (e) return !1; for (var b = _b || gc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++)j.tweens[g].run(f); return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1) }, j = h.promise({ elem: a, props: n.extend({}, b), opts: n.extend(!0, { specialEasing: {} }, c), originalProperties: b, originalOptions: c, startTime: _b || gc(), duration: c.duration, tweens: [], createTween: function (b, c) { var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing); return j.tweens.push(d), d }, stop: function (b) { var c = 0, d = b ? j.tweens.length : 0; if (e) return this; for (e = !0; d > c; c++)j.tweens[c].run(1); return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this } }), k = j.props; for (kc(k, j.opts.specialEasing); g > f; f++)if (d = ec[f].call(j, a, k, j.opts)) return d; return n.map(k, ic, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always) } n.Animation = n.extend(lc, { tweener: function (a, b) { n.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" "); for (var c, d = 0, e = a.length; e > d; d++)c = a[d], fc[c] = fc[c] || [], fc[c].unshift(b) }, prefilter: function (a, b) { b ? ec.unshift(a) : ec.push(a) } }), n.speed = function (a, b, c) { var d = a && "object" == typeof a ? n.extend({}, a) : { complete: c || !c && b || n.isFunction(a) && a, duration: a, easing: c && b || b && !n.isFunction(b) && b }; return d.duration = n.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () { n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue) }, d }, n.fn.extend({ fadeTo: function (a, b, c, d) { return this.filter(V).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d) }, animate: function (a, b, c, d) { var e = n.isEmptyObject(a), f = n.speed(b, c, d), g = function () { var b = lc(this, n.extend({}, a), f); (e || n._data(this, "finish")) && b.stop(!0) }; return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g) }, stop: function (a, b, c) { var d = function (a) { var b = a.stop; delete a.stop, b(c) }; return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () { var b = !0, e = null != a && a + "queueHooks", f = n.timers, g = n._data(this); if (e) g[e] && g[e].stop && d(g[e]); else for (e in g) g[e] && g[e].stop && dc.test(e) && d(g[e]); for (e = f.length; e--;)f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1)); (b || !c) && n.dequeue(this, a) }) }, finish: function (a) { return a !== !1 && (a = a || "fx"), this.each(function () { var b, c = n._data(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = n.timers, g = d ? d.length : 0; for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;)f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1)); for (b = 0; g > b; b++)d[b] && d[b].finish && d[b].finish.call(this); delete c.finish }) } }), n.each(["toggle", "show", "hide"], function (a, b) { var c = n.fn[b]; n.fn[b] = function (a, d, e) { return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(hc(b, !0), a, d, e) } }), n.each({ slideDown: hc("show"), slideUp: hc("hide"), slideToggle: hc("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) { n.fn[a] = function (a, c, d) { return this.animate(b, a, c, d) } }), n.timers = [], n.fx.tick = function () { var a, b = n.timers, c = 0; for (_b = n.now(); c < b.length; c++)a = b[c], a() || b[c] !== a || b.splice(c--, 1); b.length || n.fx.stop(), _b = void 0 }, n.fx.timer = function (a) { n.timers.push(a), a() ? n.fx.start() : n.timers.pop() }, n.fx.interval = 13, n.fx.start = function () { ac || (ac = setInterval(n.fx.tick, n.fx.interval)) }, n.fx.stop = function () { clearInterval(ac), ac = null }, n.fx.speeds = { slow: 600, fast: 200, _default: 400 }, n.fn.delay = function (a, b) { return a = n.fx ? n.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) { var d = setTimeout(b, a); c.stop = function () { clearTimeout(d) } }) }, function () { var a, b, c, d, e = z.createElement("div"); e.setAttribute("className", "t"), e.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", a = e.getElementsByTagName("a")[0], c = z.createElement("select"), d = c.appendChild(z.createElement("option")), b = e.getElementsByTagName("input")[0], a.style.cssText = "top:1px", l.getSetAttribute = "t" !== e.className, l.style = /top/.test(a.getAttribute("style")), l.hrefNormalized = "/a" === a.getAttribute("href"), l.checkOn = !!b.value, l.optSelected = d.selected, l.enctype = !!z.createElement("form").enctype, c.disabled = !0, l.optDisabled = !d.disabled, b = z.createElement("input"), b.setAttribute("value", ""), l.input = "" === b.getAttribute("value"), b.value = "t", b.setAttribute("type", "radio"), l.radioValue = "t" === b.value, a = b = c = d = e = null }(); var mc = /\r/g; n.fn.extend({ val: function (a) { var b, c, d, e = this[0]; { if (arguments.length) return d = n.isFunction(a), this.each(function (c) { var e; 1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function (a) { return null == a ? "" : a + "" })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e)) }); if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(mc, "") : null == c ? "" : c) } } }), n.extend({ valHooks: { option: { get: function (a) { var b = n.find.attr(a, "value"); return null != b ? b : n.text(a) } }, select: { get: function (a) { for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)if (c = d[i], !(!c.selected && i !== e || (l.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && n.nodeName(c.parentNode, "optgroup"))) { if (b = n(c).val(), f) return b; g.push(b) } return g }, set: function (a, b) { var c, d, e = a.options, f = n.makeArray(b), g = e.length; while (g--) if (d = e[g], n.inArray(n.valHooks.option.get(d), f) >= 0) try { d.selected = c = !0 } catch (h) { d.scrollHeight } else d.selected = !1; return c || (a.selectedIndex = -1), e } } } }), n.each(["radio", "checkbox"], function () { n.valHooks[this] = { set: function (a, b) { return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0 } }, l.checkOn || (n.valHooks[this].get = function (a) { return null === a.getAttribute("value") ? "on" : a.value }) }); var nc, oc, pc = n.expr.attrHandle, qc = /^(?:checked|selected)$/i, rc = l.getSetAttribute, sc = l.input; n.fn.extend({ attr: function (a, b) { return W(this, n.attr, a, b, arguments.length > 1) }, removeAttr: function (a) { return this.each(function () { n.removeAttr(this, a) }) } }), n.extend({ attr: function (a, b, c) { var d, e, f = a.nodeType; if (a && 3 !== f && 8 !== f && 2 !== f) return typeof a.getAttribute === L ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? oc : nc)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void n.removeAttr(a, b)) }, removeAttr: function (a, b) { var c, d, e = 0, f = b && b.match(F); if (f && 1 === a.nodeType) while (c = f[e++]) d = n.propFix[c] || c, n.expr.match.bool.test(c) ? sc && rc || !qc.test(c) ? a[d] = !1 : a[n.camelCase("default-" + c)] = a[d] = !1 : n.attr(a, c, ""), a.removeAttribute(rc ? c : d) }, attrHooks: { type: { set: function (a, b) { if (!l.radioValue && "radio" === b && n.nodeName(a, "input")) { var c = a.value; return a.setAttribute("type", b), c && (a.value = c), b } } } } }), oc = { set: function (a, b, c) { return b === !1 ? n.removeAttr(a, c) : sc && rc || !qc.test(c) ? a.setAttribute(!rc && n.propFix[c] || c, c) : a[n.camelCase("default-" + c)] = a[c] = !0, c } }, n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) { var c = pc[b] || n.find.attr; pc[b] = sc && rc || !qc.test(b) ? function (a, b, d) { var e, f; return d || (f = pc[b], pc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, pc[b] = f), e } : function (a, b, c) { return c ? void 0 : a[n.camelCase("default-" + b)] ? b.toLowerCase() : null } }), sc && rc || (n.attrHooks.value = { set: function (a, b, c) { return n.nodeName(a, "input") ? void (a.defaultValue = b) : nc && nc.set(a, b, c) } }), rc || (nc = { set: function (a, b, c) { var d = a.getAttributeNode(c); return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0 } }, pc.id = pc.name = pc.coords = function (a, b, c) { var d; return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null }, n.valHooks.button = { get: function (a, b) { var c = a.getAttributeNode(b); return c && c.specified ? c.value : void 0 }, set: nc.set }, n.attrHooks.contenteditable = { set: function (a, b, c) { nc.set(a, "" === b ? !1 : b, c) } }, n.each(["width", "height"], function (a, b) { n.attrHooks[b] = { set: function (a, c) { return "" === c ? (a.setAttribute(b, "auto"), c) : void 0 } } })), l.style || (n.attrHooks.style = { get: function (a) { return a.style.cssText || void 0 }, set: function (a, b) { return a.style.cssText = b + "" } }); var tc = /^(?:input|select|textarea|button|object)$/i, uc = /^(?:a|area)$/i; n.fn.extend({ prop: function (a, b) { return W(this, n.prop, a, b, arguments.length > 1) }, removeProp: function (a) { return a = n.propFix[a] || a, this.each(function () { try { this[a] = void 0, delete this[a] } catch (b) { } }) } }), n.extend({ propFix: { "for": "htmlFor", "class": "className" }, prop: function (a, b, c) { var d, e, f, g = a.nodeType; if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b] }, propHooks: { tabIndex: { get: function (a) { var b = n.find.attr(a, "tabindex"); return b ? parseInt(b, 10) : tc.test(a.nodeName) || uc.test(a.nodeName) && a.href ? 0 : -1 } } } }), l.hrefNormalized || n.each(["href", "src"], function (a, b) { n.propHooks[b] = { get: function (a) { return a.getAttribute(b, 4) } } }), l.optSelected || (n.propHooks.selected = { get: function (a) { var b = a.parentNode; return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null } }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () { n.propFix[this.toLowerCase()] = this }), l.enctype || (n.propFix.enctype = "encoding"); var vc = /[\t\r\n\f]/g; n.fn.extend({ addClass: function (a) { var b, c, d, e, f, g, h = 0, i = this.length, j = "string" == typeof a && a; if (n.isFunction(a)) return this.each(function (b) { n(this).addClass(a.call(this, b, this.className)) }); if (j) for (b = (a || "").match(F) || []; i > h; h++)if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(vc, " ") : " ")) { f = 0; while (e = b[f++]) d.indexOf(" " + e + " ") < 0 && (d += e + " "); g = n.trim(d), c.className !== g && (c.className = g) } return this }, removeClass: function (a) { var b, c, d, e, f, g, h = 0, i = this.length, j = 0 === arguments.length || "string" == typeof a && a; if (n.isFunction(a)) return this.each(function (b) { n(this).removeClass(a.call(this, b, this.className)) }); if (j) for (b = (a || "").match(F) || []; i > h; h++)if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(vc, " ") : "")) { f = 0; while (e = b[f++]) while (d.indexOf(" " + e + " ") >= 0) d = d.replace(" " + e + " ", " "); g = a ? n.trim(d) : "", c.className !== g && (c.className = g) } return this }, toggleClass: function (a, b) { var c = typeof a; return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function (c) { n(this).toggleClass(a.call(this, c, this.className, b), b) } : function () { if ("string" === c) { var b, d = 0, e = n(this), f = a.match(F) || []; while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b) } else (c === L || "boolean" === c) && (this.className && n._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : n._data(this, "__className__") || "") }) }, hasClass: function (a) { for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++)if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(vc, " ").indexOf(b) >= 0) return !0; return !1 } }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) { n.fn[b] = function (a, c) { return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b) } }), n.fn.extend({ hover: function (a, b) { return this.mouseenter(a).mouseleave(b || a) }, bind: function (a, b, c) { return this.on(a, null, b, c) }, unbind: function (a, b) { return this.off(a, null, b) }, delegate: function (a, b, c, d) { return this.on(b, a, c, d) }, undelegate: function (a, b, c) { return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c) } }); var wc = n.now(), xc = /\?/, yc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g; n.parseJSON = function (b) { if (a.JSON && a.JSON.parse) return a.JSON.parse(b + ""); var c, d = null, e = n.trim(b + ""); return e && !n.trim(e.replace(yc, function (a, b, e, f) { return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "") })) ? Function("return " + e)() : n.error("Invalid JSON: " + b) }, n.parseXML = function (b) { var c, d; if (!b || "string" != typeof b) return null; try { a.DOMParser ? (d = new DOMParser, c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b)) } catch (e) { c = void 0 } return c && c.documentElement && !c.getElementsByTagName("parsererror").length || n.error("Invalid XML: " + b), c }; var zc, Ac, Bc = /#.*$/, Cc = /([?&])_=[^&]*/, Dc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Ec = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Fc = /^(?:GET|HEAD)$/, Gc = /^\/\//, Hc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, Ic = {}, Jc = {}, Kc = "*/".concat("*"); try { Ac = location.href } catch (Lc) { Ac = z.createElement("a"), Ac.href = "", Ac = Ac.href } zc = Hc.exec(Ac.toLowerCase()) || []; function Mc(a) { return function (b, c) { "string" != typeof b && (c = b, b = "*"); var d, e = 0, f = b.toLowerCase().match(F) || []; if (n.isFunction(c)) while (d = f[e++]) "+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c) } } function Nc(a, b, c, d) { var e = {}, f = a === Jc; function g(h) { var i; return e[h] = !0, n.each(a[h] || [], function (a, h) { var j = h(b, c, d); return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1) }), i } return g(b.dataTypes[0]) || !e["*"] && g("*") } function Oc(a, b) { var c, d, e = n.ajaxSettings.flatOptions || {}; for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]); return c && n.extend(!0, a, c), a } function Pc(a, b, c) { var d, e, f, g, h = a.contents, i = a.dataTypes; while ("*" === i[0]) i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type")); if (e) for (g in h) if (h[g] && h[g].test(e)) { i.unshift(g); break } if (i[0] in c) f = i[0]; else { for (g in c) { if (!i[0] || a.converters[g + " " + i[0]]) { f = g; break } d || (d = g) } f = f || d } return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0 } function Qc(a, b, c, d) { var e, f, g, h, i, j = {}, k = a.dataTypes.slice(); if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g]; f = k.shift(); while (f) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i; else if ("*" !== i && i !== f) { if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) { g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1])); break } if (g !== !0) if (g && a["throws"]) b = g(b); else try { b = g(b) } catch (l) { return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f } } } return { state: "success", data: b } } n.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: Ac, type: "GET", isLocal: Ec.test(zc[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Kc, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": n.parseJSON, "text xml": n.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function (a, b) { return b ? Oc(Oc(a, n.ajaxSettings), b) : Oc(n.ajaxSettings, a) }, ajaxPrefilter: Mc(Ic), ajaxTransport: Mc(Jc), ajax: function (a, b) { "object" == typeof a && (b = a, a = void 0), b = b || {}; var c, d, e, f, g, h, i, j, k = n.ajaxSetup({}, b), l = k.context || k, m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event, o = n.Deferred(), p = n.Callbacks("once memory"), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = "canceled", v = { readyState: 0, getResponseHeader: function (a) { var b; if (2 === t) { if (!j) { j = {}; while (b = Dc.exec(f)) j[b[1].toLowerCase()] = b[2] } b = j[a.toLowerCase()] } return null == b ? null : b }, getAllResponseHeaders: function () { return 2 === t ? f : null }, setRequestHeader: function (a, b) { var c = a.toLowerCase(); return t || (a = s[c] = s[c] || a, r[a] = b), this }, overrideMimeType: function (a) { return t || (k.mimeType = a), this }, statusCode: function (a) { var b; if (a) if (2 > t) for (b in a) q[b] = [q[b], a[b]]; else v.always(a[v.status]); return this }, abort: function (a) { var b = a || u; return i && i.abort(b), x(0, b), this } }; if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || Ac) + "").replace(Bc, "").replace(Gc, zc[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || "*").toLowerCase().match(F) || [""], null == k.crossDomain && (c = Hc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === zc[1] && c[2] === zc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (zc[3] || ("http:" === zc[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = n.param(k.data, k.traditional)), Nc(Ic, k, b, v), 2 === t) return v; h = k.global, h && 0 === n.active++ && n.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Fc.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (xc.test(e) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Cc.test(e) ? e.replace(Cc, "$1_=" + wc++) : e + (xc.test(e) ? "&" : "?") + "_=" + wc++)), k.ifModified && (n.lastModified[e] && v.setRequestHeader("If-Modified-Since", n.lastModified[e]), n.etag[e] && v.setRequestHeader("If-None-Match", n.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Kc + "; q=0.01" : "") : k.accepts["*"]); for (d in k.headers) v.setRequestHeader(d, k.headers[d]); if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort(); u = "abort"; for (d in { success: 1, error: 1, complete: 1 }) v[d](k[d]); if (i = Nc(Jc, k, b, v)) { v.readyState = 1, h && m.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () { v.abort("timeout") }, k.timeout)); try { t = 1, i.send(r, x) } catch (w) { if (!(2 > t)) throw w; x(-1, w) } } else x(-1, "No Transport"); function x(a, b, c, d) { var j, r, s, u, w, x = b; 2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Pc(k, v, c)), u = Qc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (n.lastModified[e] = w), w = v.getResponseHeader("etag"), w && (n.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && m.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (m.trigger("ajaxComplete", [v, k]), --n.active || n.event.trigger("ajaxStop"))) } return v }, getJSON: function (a, b, c) { return n.get(a, b, c, "json") }, getScript: function (a, b) { return n.get(a, void 0, b, "script") } }), n.each(["get", "post"], function (a, b) { n[b] = function (a, c, d, e) { return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({ url: a, type: b, dataType: e, data: c, success: d }) } }), n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) { n.fn[b] = function (a) { return this.on(b, a) } }), n._evalUrl = function (a) { return n.ajax({ url: a, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 }) }, n.fn.extend({ wrapAll: function (a) { if (n.isFunction(a)) return this.each(function (b) { n(this).wrapAll(a.call(this, b)) }); if (this[0]) { var b = n(a, this[0].ownerDocument).eq(0).clone(!0); this[0].parentNode && b.insertBefore(this[0]), b.map(function () { var a = this; while (a.firstChild && 1 === a.firstChild.nodeType) a = a.firstChild; return a }).append(this) } return this }, wrapInner: function (a) { return this.each(n.isFunction(a) ? function (b) { n(this).wrapInner(a.call(this, b)) } : function () { var b = n(this), c = b.contents(); c.length ? c.wrapAll(a) : b.append(a) }) }, wrap: function (a) { var b = n.isFunction(a); return this.each(function (c) { n(this).wrapAll(b ? a.call(this, c) : a) }) }, unwrap: function () { return this.parent().each(function () { n.nodeName(this, "body") || n(this).replaceWith(this.childNodes) }).end() } }), n.expr.filters.hidden = function (a) { return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !l.reliableHiddenOffsets() && "none" === (a.style && a.style.display || n.css(a, "display")) }, n.expr.filters.visible = function (a) { return !n.expr.filters.hidden(a) }; var Rc = /%20/g, Sc = /\[\]$/, Tc = /\r?\n/g, Uc = /^(?:submit|button|image|reset|file)$/i, Vc = /^(?:input|select|textarea|keygen)/i; function Wc(a, b, c, d) { var e; if (n.isArray(b)) n.each(b, function (b, e) { c || Sc.test(a) ? d(a, e) : Wc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d) }); else if (c || "object" !== n.type(b)) d(a, b); else for (e in b) Wc(a + "[" + e + "]", b[e], c, d) } n.param = function (a, b) { var c, d = [], e = function (a, b) { b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b) }; if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () { e(this.name, this.value) }); else for (c in a) Wc(c, a[c], b, e); return d.join("&").replace(Rc, "+") }, n.fn.extend({ serialize: function () { return n.param(this.serializeArray()) }, serializeArray: function () { return this.map(function () { var a = n.prop(this, "elements"); return a ? n.makeArray(a) : this }).filter(function () { var a = this.type; return this.name && !n(this).is(":disabled") && Vc.test(this.nodeName) && !Uc.test(a) && (this.checked || !X.test(a)) }).map(function (a, b) { var c = n(this).val(); return null == c ? null : n.isArray(c) ? n.map(c, function (a) { return { name: b.name, value: a.replace(Tc, "\r\n") } }) : { name: b.name, value: c.replace(Tc, "\r\n") } }).get() } }), n.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () { return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && $c() || _c() } : $c; var Xc = 0, Yc = {}, Zc = n.ajaxSettings.xhr(); a.ActiveXObject && n(a).on("unload", function () { for (var a in Yc) Yc[a](void 0, !0) }), l.cors = !!Zc && "withCredentials" in Zc, Zc = l.ajax = !!Zc, Zc && n.ajaxTransport(function (a) { if (!a.crossDomain || l.cors) { var b; return { send: function (c, d) { var e, f = a.xhr(), g = ++Xc; if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) f[e] = a.xhrFields[e]; a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest"); for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + ""); f.send(a.hasContent && a.data || null), b = function (c, e) { var h, i, j; if (b && (e || 4 === f.readyState)) if (delete Yc[g], b = void 0, f.onreadystatechange = n.noop, e) 4 !== f.readyState && f.abort(); else { j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText); try { i = f.statusText } catch (k) { i = "" } h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404 } j && d(h, i, j, f.getAllResponseHeaders()) }, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Yc[g] = b : b() }, abort: function () { b && b(void 0, !0) } } } }); function $c() { try { return new a.XMLHttpRequest } catch (b) { } } function _c() { try { return new a.ActiveXObject("Microsoft.XMLHTTP") } catch (b) { } } n.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function (a) { return n.globalEval(a), a } } }), n.ajaxPrefilter("script", function (a) { void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1) }), n.ajaxTransport("script", function (a) { if (a.crossDomain) { var b, c = z.head || n("head")[0] || z.documentElement; return { send: function (d, e) { b = z.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) { (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success")) }, c.insertBefore(b, c.firstChild) }, abort: function () { b && b.onload(void 0, !0) } } } }); var ad = [], bd = /(=)\?(?=&|$)|\?\?/; n.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var a = ad.pop() || n.expando + "_" + wc++; return this[a] = !0, a } }), n.ajaxPrefilter("json jsonp", function (b, c, d) { var e, f, g, h = b.jsonp !== !1 && (bd.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && bd.test(b.data) && "data"); return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(bd, "$1" + e) : b.jsonp !== !1 && (b.url += (xc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () { return g || n.error(e + " was not called"), g[0] }, b.dataTypes[0] = "json", f = a[e], a[e] = function () { g = arguments }, d.always(function () { a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, ad.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0 }), "script") : void 0 }), n.parseHTML = function (a, b, c) { if (!a || "string" != typeof a) return null; "boolean" == typeof b && (c = b, b = !1), b = b || z; var d = v.exec(a), e = !c && []; return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes)) }; var cd = n.fn.load; n.fn.load = function (a, b, c) { if ("string" != typeof a && cd) return cd.apply(this, arguments); var d, e, f, g = this, h = a.indexOf(" "); return h >= 0 && (d = a.slice(h, a.length), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (f = "POST"), g.length > 0 && n.ajax({ url: a, type: f, dataType: "html", data: b }).done(function (a) { e = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a) }).complete(c && function (a, b) { g.each(c, e || [a.responseText, b, a]) }), this }, n.expr.filters.animated = function (a) { return n.grep(n.timers, function (b) { return a === b.elem }).length }; var dd = a.document.documentElement; function ed(a) { return n.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1 } n.offset = { setOffset: function (a, b, c) { var d, e, f, g, h, i, j, k = n.css(a, "position"), l = n(a), m = {}; "static" === k && (a.style.position = "relative"), h = l.offset(), f = n.css(a, "top"), i = n.css(a, "left"), j = ("absolute" === k || "fixed" === k) && n.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m) } }, n.fn.extend({ offset: function (a) { if (arguments.length) return void 0 === a ? this : this.each(function (b) { n.offset.setOffset(this, a, b) }); var b, c, d = { top: 0, left: 0 }, e = this[0], f = e && e.ownerDocument; if (f) return b = f.documentElement, n.contains(b, e) ? (typeof e.getBoundingClientRect !== L && (d = e.getBoundingClientRect()), c = ed(f), { top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0), left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0) }) : d }, position: function () { if (this[0]) { var a, b, c = { top: 0, left: 0 }, d = this[0]; return "fixed" === n.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], "html") || (c = a.offset()), c.top += n.css(a[0], "borderTopWidth", !0), c.left += n.css(a[0], "borderLeftWidth", !0)), { top: b.top - c.top - n.css(d, "marginTop", !0), left: b.left - c.left - n.css(d, "marginLeft", !0) } } }, offsetParent: function () { return this.map(function () { var a = this.offsetParent || dd; while (a && !n.nodeName(a, "html") && "static" === n.css(a, "position")) a = a.offsetParent; return a || dd }) } }), n.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) { var c = /Y/.test(b); n.fn[a] = function (d) { return W(this, function (a, d, e) { var f = ed(a); return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? n(f).scrollLeft() : e, c ? e : n(f).scrollTop()) : a[d] = e) }, a, d, arguments.length, null) } }), n.each(["top", "left"], function (a, b) { n.cssHooks[b] = Mb(l.pixelPosition, function (a, c) { return c ? (c = Kb(a, b), Ib.test(c) ? n(a).position()[b] + "px" : c) : void 0 }) }), n.each({ Height: "height", Width: "width" }, function (a, b) { n.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) { n.fn[d] = function (d, e) { var f = arguments.length && (c || "boolean" != typeof d), g = c || (d === !0 || e === !0 ? "margin" : "border"); return W(this, function (b, c, d) { var e; return n.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g) }, b, f ? d : void 0, f, null) } }) }), n.fn.size = function () { return this.length }, n.fn.andSelf = n.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () { return n }); var fd = a.jQuery, gd = a.$; return n.noConflict = function (b) { return a.$ === n && (a.$ = gd), b && a.jQuery === n && (a.jQuery = fd), n }, typeof b === L && (a.jQuery = a.$ = n), n
});

    /*!
     * Select2 4.1.0-rc.0
     * https://select2.github.io
     *
     * Released under the MIT license
     * https://github.com/select2/select2/blob/master/LICENSE.md
     */
    ; (function (factory) {
        if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define(['jquery'], factory);
        } else if (typeof module === 'object' && module.exports) {
            // Node/CommonJS
            module.exports = function (root, jQuery) {
                if (jQuery === undefined) {
                    // require('jQuery') returns a factory that requires window to
                    // build a jQuery instance, we normalize how we use modules
                    // that require this pattern but the window provided is a noop
                    // if it's defined (how jquery works)
                    if (typeof window !== 'undefined') {
                        jQuery = require('jquery');
                    }
                    else {
                        jQuery = require('jquery')(root);
                    }
                }
                factory(jQuery);
                return jQuery;
            };
        } else {
            // Browser globals
            factory(jQuery);
        }
    }(function (jQuery) {
        // This is needed so we can catch the AMD loader configuration and use it
        // The inner file should be wrapped (by `banner.start.js`) in a function that
        // returns the AMD loader references.
        var S2 = (function () {
            // Restore the Select2 AMD loader so it can be used
            // Needed mostly in the language files, where the loader is not inserted
            if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
                var S2 = jQuery.fn.select2.amd;
            }
            var S2; (function () {
                if (!S2 || !S2.requirejs) {
                    if (!S2) { S2 = {}; } else { require = S2; }
                    /**
                     * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
                     * Released under MIT license, http://github.com/requirejs/almond/LICENSE
                     */
                    //Going sloppy to avoid 'use strict' string cost, but strict practices should
                    //be followed.
                    /*global setTimeout: false */

                    var requirejs, require, define;
                    (function (undef) {
                        var main, req, makeMap, handlers,
                            defined = {},
                            waiting = {},
                            config = {},
                            defining = {},
                            hasOwn = Object.prototype.hasOwnProperty,
                            aps = [].slice,
                            jsSuffixRegExp = /\.js$/;

                        function hasProp(obj, prop) {
                            return hasOwn.call(obj, prop);
                        }

                        /**
                         * Given a relative module name, like ./something, normalize it to
                         * a real name that can be mapped to a path.
                         * @param {String} name the relative name
                         * @param {String} baseName a real name that the name arg is relative
                         * to.
                         * @returns {String} normalized name
                         */
                        function normalize(name, baseName) {
                            var nameParts, nameSegment, mapValue, foundMap, lastIndex,
                                foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
                                baseParts = baseName && baseName.split("/"),
                                map = config.map,
                                starMap = (map && map['*']) || {};

                            //Adjust any relative paths.
                            if (name) {
                                name = name.split('/');
                                lastIndex = name.length - 1;

                                // If wanting node ID compatibility, strip .js from end
                                // of IDs. Have to do this here, and not in nameToUrl
                                // because node allows either .js or non .js to map
                                // to same file.
                                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                                }

                                // Starts with a '.' so need the baseName
                                if (name[0].charAt(0) === '.' && baseParts) {
                                    //Convert baseName to array, and lop off the last part,
                                    //so that . matches that 'directory' and not name of the baseName's
                                    //module. For instance, baseName of 'one/two/three', maps to
                                    //'one/two/three.js', but we want the directory, 'one/two' for
                                    //this normalization.
                                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                                    name = normalizedBaseParts.concat(name);
                                }

                                //start trimDots
                                for (i = 0; i < name.length; i++) {
                                    part = name[i];
                                    if (part === '.') {
                                        name.splice(i, 1);
                                        i -= 1;
                                    } else if (part === '..') {
                                        // If at the start, or previous value is still ..,
                                        // keep them so that when converted to a path it may
                                        // still work when converted to a path, even though
                                        // as an ID it is less than ideal. In larger point
                                        // releases, may be better to just kick out an error.
                                        if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                                            continue;
                                        } else if (i > 0) {
                                            name.splice(i - 1, 2);
                                            i -= 2;
                                        }
                                    }
                                }
                                //end trimDots

                                name = name.join('/');
                            }

                            //Apply map config if available.
                            if ((baseParts || starMap) && map) {
                                nameParts = name.split('/');

                                for (i = nameParts.length; i > 0; i -= 1) {
                                    nameSegment = nameParts.slice(0, i).join("/");

                                    if (baseParts) {
                                        //Find the longest baseName segment match in the config.
                                        //So, do joins on the biggest to smallest lengths of baseParts.
                                        for (j = baseParts.length; j > 0; j -= 1) {
                                            mapValue = map[baseParts.slice(0, j).join('/')];

                                            //baseName segment has  config, find if it has one for
                                            //this name.
                                            if (mapValue) {
                                                mapValue = mapValue[nameSegment];
                                                if (mapValue) {
                                                    //Match, update name to the new value.
                                                    foundMap = mapValue;
                                                    foundI = i;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    if (foundMap) {
                                        break;
                                    }

                                    //Check for a star map match, but just hold on to it,
                                    //if there is a shorter segment match later in a matching
                                    //config, then favor over this star map.
                                    if (!foundStarMap && starMap && starMap[nameSegment]) {
                                        foundStarMap = starMap[nameSegment];
                                        starI = i;
                                    }
                                }

                                if (!foundMap && foundStarMap) {
                                    foundMap = foundStarMap;
                                    foundI = starI;
                                }

                                if (foundMap) {
                                    nameParts.splice(0, foundI, foundMap);
                                    name = nameParts.join('/');
                                }
                            }

                            return name;
                        }

                        function makeRequire(relName, forceSync) {
                            return function () {
                                //A version of a require function that passes a moduleName
                                //value for items that may need to
                                //look up paths relative to the moduleName
                                var args = aps.call(arguments, 0);

                                //If first arg is not require('string'), and there is only
                                //one arg, it is the array form without a callback. Insert
                                //a null so that the following concat is correct.
                                if (typeof args[0] !== 'string' && args.length === 1) {
                                    args.push(null);
                                }
                                return req.apply(undef, args.concat([relName, forceSync]));
                            };
                        }

                        function makeNormalize(relName) {
                            return function (name) {
                                return normalize(name, relName);
                            };
                        }

                        function makeLoad(depName) {
                            return function (value) {
                                defined[depName] = value;
                            };
                        }

                        function callDep(name) {
                            if (hasProp(waiting, name)) {
                                var args = waiting[name];
                                delete waiting[name];
                                defining[name] = true;
                                main.apply(undef, args);
                            }

                            if (!hasProp(defined, name) && !hasProp(defining, name)) {
                                throw new Error('No ' + name);
                            }
                            return defined[name];
                        }

                        //Turns a plugin!resource to [plugin, resource]
                        //with the plugin being undefined if the name
                        //did not have a plugin prefix.
                        function splitPrefix(name) {
                            var prefix,
                                index = name ? name.indexOf('!') : -1;
                            if (index > -1) {
                                prefix = name.substring(0, index);
                                name = name.substring(index + 1, name.length);
                            }
                            return [prefix, name];
                        }

                        //Creates a parts array for a relName where first part is plugin ID,
                        //second part is resource ID. Assumes relName has already been normalized.
                        function makeRelParts(relName) {
                            return relName ? splitPrefix(relName) : [];
                        }

                        /**
                         * Makes a name map, normalizing the name, and using a plugin
                         * for normalization if necessary. Grabs a ref to plugin
                         * too, as an optimization.
                         */
                        makeMap = function (name, relParts) {
                            var plugin,
                                parts = splitPrefix(name),
                                prefix = parts[0],
                                relResourceName = relParts[1];

                            name = parts[1];

                            if (prefix) {
                                prefix = normalize(prefix, relResourceName);
                                plugin = callDep(prefix);
                            }

                            //Normalize according
                            if (prefix) {
                                if (plugin && plugin.normalize) {
                                    name = plugin.normalize(name, makeNormalize(relResourceName));
                                } else {
                                    name = normalize(name, relResourceName);
                                }
                            } else {
                                name = normalize(name, relResourceName);
                                parts = splitPrefix(name);
                                prefix = parts[0];
                                name = parts[1];
                                if (prefix) {
                                    plugin = callDep(prefix);
                                }
                            }

                            //Using ridiculous property names for space reasons
                            return {
                                f: prefix ? prefix + '!' + name : name, //fullName
                                n: name,
                                pr: prefix,
                                p: plugin
                            };
                        };

                        function makeConfig(name) {
                            return function () {
                                return (config && config.config && config.config[name]) || {};
                            };
                        }

                        handlers = {
                            require: function (name) {
                                return makeRequire(name);
                            },
                            exports: function (name) {
                                var e = defined[name];
                                if (typeof e !== 'undefined') {
                                    return e;
                                } else {
                                    return (defined[name] = {});
                                }
                            },
                            module: function (name) {
                                return {
                                    id: name,
                                    uri: '',
                                    exports: defined[name],
                                    config: makeConfig(name)
                                };
                            }
                        };

                        main = function (name, deps, callback, relName) {
                            var cjsModule, depName, ret, map, i, relParts,
                                args = [],
                                callbackType = typeof callback,
                                usingExports;

                            //Use name if no relName
                            relName = relName || name;
                            relParts = makeRelParts(relName);

                            //Call the callback to define the module, if necessary.
                            if (callbackType === 'undefined' || callbackType === 'function') {
                                //Pull out the defined dependencies and pass the ordered
                                //values to the callback.
                                //Default to [require, exports, module] if no deps
                                deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
                                for (i = 0; i < deps.length; i += 1) {
                                    map = makeMap(deps[i], relParts);
                                    depName = map.f;

                                    //Fast path CommonJS standard dependencies.
                                    if (depName === "require") {
                                        args[i] = handlers.require(name);
                                    } else if (depName === "exports") {
                                        //CommonJS module spec 1.1
                                        args[i] = handlers.exports(name);
                                        usingExports = true;
                                    } else if (depName === "module") {
                                        //CommonJS module spec 1.1
                                        cjsModule = args[i] = handlers.module(name);
                                    } else if (hasProp(defined, depName) ||
                                        hasProp(waiting, depName) ||
                                        hasProp(defining, depName)) {
                                        args[i] = callDep(depName);
                                    } else if (map.p) {
                                        map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                                        args[i] = defined[depName];
                                    } else {
                                        throw new Error(name + ' missing ' + depName);
                                    }
                                }

                                ret = callback ? callback.apply(defined[name], args) : undefined;

                                if (name) {
                                    //If setting exports via "module" is in play,
                                    //favor that over return value and exports. After that,
                                    //favor a non-undefined return value over exports use.
                                    if (cjsModule && cjsModule.exports !== undef &&
                                        cjsModule.exports !== defined[name]) {
                                        defined[name] = cjsModule.exports;
                                    } else if (ret !== undef || !usingExports) {
                                        //Use the return value from the function.
                                        defined[name] = ret;
                                    }
                                }
                            } else if (name) {
                                //May just be an object definition for the module. Only
                                //worry about defining if have a module name.
                                defined[name] = callback;
                            }
                        };

                        requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
                            if (typeof deps === "string") {
                                if (handlers[deps]) {
                                    //callback in this case is really relName
                                    return handlers[deps](callback);
                                }
                                //Just return the module wanted. In this scenario, the
                                //deps arg is the module name, and second arg (if passed)
                                //is just the relName.
                                //Normalize module name, if it contains . or ..
                                return callDep(makeMap(deps, makeRelParts(callback)).f);
                            } else if (!deps.splice) {
                                //deps is a config object, not an array.
                                config = deps;
                                if (config.deps) {
                                    req(config.deps, config.callback);
                                }
                                if (!callback) {
                                    return;
                                }

                                if (callback.splice) {
                                    //callback is an array, which means it is a dependency list.
                                    //Adjust args if there are dependencies
                                    deps = callback;
                                    callback = relName;
                                    relName = null;
                                } else {
                                    deps = undef;
                                }
                            }

                            //Support require(['a'])
                            callback = callback || function () { };

                            //If relName is a function, it is an errback handler,
                            //so remove it.
                            if (typeof relName === 'function') {
                                relName = forceSync;
                                forceSync = alt;
                            }

                            //Simulate async callback;
                            if (forceSync) {
                                main(undef, deps, callback, relName);
                            } else {
                                //Using a non-zero value because of concern for what old browsers
                                //do, and latest browsers "upgrade" to 4 if lower value is used:
                                //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                                //If want a value immediately, use require('id') instead -- something
                                //that works in almond on the global level, but not guaranteed and
                                //unlikely to work in other AMD implementations.
                                setTimeout(function () {
                                    main(undef, deps, callback, relName);
                                }, 4);
                            }

                            return req;
                        };

                        /**
                         * Just drops the config on the floor, but returns req in case
                         * the config return value is used.
                         */
                        req.config = function (cfg) {
                            return req(cfg);
                        };

                        /**
                         * Expose module registry for debugging and tooling
                         */
                        requirejs._defined = defined;

                        define = function (name, deps, callback) {
                            if (typeof name !== 'string') {
                                throw new Error('See almond README: incorrect module build, no module name');
                            }

                            //This module may not have dependencies
                            if (!deps.splice) {
                                //deps is not an array, so probably means
                                //an object literal or factory function for
                                //the value. Adjust args.
                                callback = deps;
                                deps = [];
                            }

                            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                                waiting[name] = [name, deps, callback];
                            }
                        };

                        define.amd = {
                            jQuery: true
                        };
                    }());

                    S2.requirejs = requirejs; S2.require = require; S2.define = define;
                }
            }());
            S2.define("almond", function () { });

            /* global jQuery:false, $:false */
            S2.define('jquery', [], function () {
                var _$ = jQuery || $;

                if (_$ == null && console && console.error) {
                    console.error(
                        'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
                        'found. Make sure that you are including jQuery before Select2 on your ' +
                        'web page.'
                    );
                }

                return _$;
            });

            S2.define('select2/utils', [
                'jquery'
            ], function ($) {
                var Utils = {};

                Utils.Extend = function (ChildClass, SuperClass) {
                    var __hasProp = {}.hasOwnProperty;

                    function BaseConstructor() {
                        this.constructor = ChildClass;
                    }

                    for (var key in SuperClass) {
                        if (__hasProp.call(SuperClass, key)) {
                            ChildClass[key] = SuperClass[key];
                        }
                    }

                    BaseConstructor.prototype = SuperClass.prototype;
                    ChildClass.prototype = new BaseConstructor();
                    ChildClass.__super__ = SuperClass.prototype;

                    return ChildClass;
                };

                function getMethods(theClass) {
                    var proto = theClass.prototype;

                    var methods = [];

                    for (var methodName in proto) {
                        var m = proto[methodName];

                        if (typeof m !== 'function') {
                            continue;
                        }

                        if (methodName === 'constructor') {
                            continue;
                        }

                        methods.push(methodName);
                    }

                    return methods;
                }

                Utils.Decorate = function (SuperClass, DecoratorClass) {
                    var decoratedMethods = getMethods(DecoratorClass);
                    var superMethods = getMethods(SuperClass);

                    function DecoratedClass() {
                        var unshift = Array.prototype.unshift;

                        var argCount = DecoratorClass.prototype.constructor.length;

                        var calledConstructor = SuperClass.prototype.constructor;

                        if (argCount > 0) {
                            unshift.call(arguments, SuperClass.prototype.constructor);

                            calledConstructor = DecoratorClass.prototype.constructor;
                        }

                        calledConstructor.apply(this, arguments);
                    }

                    DecoratorClass.displayName = SuperClass.displayName;

                    function ctr() {
                        this.constructor = DecoratedClass;
                    }

                    DecoratedClass.prototype = new ctr();

                    for (var m = 0; m < superMethods.length; m++) {
                        var superMethod = superMethods[m];

                        DecoratedClass.prototype[superMethod] =
                            SuperClass.prototype[superMethod];
                    }

                    var calledMethod = function (methodName) {
                        // Stub out the original method if it's not decorating an actual method
                        var originalMethod = function () { };

                        if (methodName in DecoratedClass.prototype) {
                            originalMethod = DecoratedClass.prototype[methodName];
                        }

                        var decoratedMethod = DecoratorClass.prototype[methodName];

                        return function () {
                            var unshift = Array.prototype.unshift;

                            unshift.call(arguments, originalMethod);

                            return decoratedMethod.apply(this, arguments);
                        };
                    };

                    for (var d = 0; d < decoratedMethods.length; d++) {
                        var decoratedMethod = decoratedMethods[d];

                        DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
                    }

                    return DecoratedClass;
                };

                var Observable = function () {
                    this.listeners = {};
                };

                Observable.prototype.on = function (event, callback) {
                    this.listeners = this.listeners || {};

                    if (event in this.listeners) {
                        this.listeners[event].push(callback);
                    } else {
                        this.listeners[event] = [callback];
                    }
                };

                Observable.prototype.trigger = function (event) {
                    var slice = Array.prototype.slice;
                    var params = slice.call(arguments, 1);

                    this.listeners = this.listeners || {};

                    // Params should always come in as an array
                    if (params == null) {
                        params = [];
                    }

                    // If there are no arguments to the event, use a temporary object
                    if (params.length === 0) {
                        params.push({});
                    }

                    // Set the `_type` of the first object to the event
                    params[0]._type = event;

                    if (event in this.listeners) {
                        this.invoke(this.listeners[event], slice.call(arguments, 1));
                    }

                    if ('*' in this.listeners) {
                        this.invoke(this.listeners['*'], arguments);
                    }
                };

                Observable.prototype.invoke = function (listeners, params) {
                    for (var i = 0, len = listeners.length; i < len; i++) {
                        listeners[i].apply(this, params);
                    }
                };

                Utils.Observable = Observable;

                Utils.generateChars = function (length) {
                    var chars = '';

                    for (var i = 0; i < length; i++) {
                        var randomChar = Math.floor(Math.random() * 36);
                        chars += randomChar.toString(36);
                    }

                    return chars;
                };

                Utils.bind = function (func, context) {
                    return function () {
                        func.apply(context, arguments);
                    };
                };

                Utils._convertData = function (data) {
                    for (var originalKey in data) {
                        var keys = originalKey.split('-');

                        var dataLevel = data;

                        if (keys.length === 1) {
                            continue;
                        }

                        for (var k = 0; k < keys.length; k++) {
                            var key = keys[k];

                            // Lowercase the first letter
                            // By default, dash-separated becomes camelCase
                            key = key.substring(0, 1).toLowerCase() + key.substring(1);

                            if (!(key in dataLevel)) {
                                dataLevel[key] = {};
                            }

                            if (k == keys.length - 1) {
                                dataLevel[key] = data[originalKey];
                            }

                            dataLevel = dataLevel[key];
                        }

                        delete data[originalKey];
                    }

                    return data;
                };

                Utils.hasScroll = function (index, el) {
                    // Adapted from the function created by @ShadowScripter
                    // and adapted by @BillBarry on the Stack Exchange Code Review website.
                    // The original code can be found at
                    // http://codereview.stackexchange.com/q/13338
                    // and was designed to be used with the Sizzle selector engine.

                    var $el = $(el);
                    var overflowX = el.style.overflowX;
                    var overflowY = el.style.overflowY;

                    //Check both x and y declarations
                    if (overflowX === overflowY &&
                        (overflowY === 'hidden' || overflowY === 'visible')) {
                        return false;
                    }

                    if (overflowX === 'scroll' || overflowY === 'scroll') {
                        return true;
                    }

                    return ($el.innerHeight() < el.scrollHeight ||
                        $el.innerWidth() < el.scrollWidth);
                };

                Utils.escapeMarkup = function (markup) {
                    var replaceMap = {
                        '\\': '&#92;',
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        '\'': '&#39;',
                        '/': '&#47;'
                    };

                    // Do not try to escape the markup if it's not a string
                    if (typeof markup !== 'string') {
                        return markup;
                    }

                    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
                        return replaceMap[match];
                    });
                };

                // Cache objects in Utils.__cache instead of $.data (see #4346)
                Utils.__cache = {};

                var id = 0;
                Utils.GetUniqueElementId = function (element) {
                    // Get a unique element Id. If element has no id,
                    // creates a new unique number, stores it in the id
                    // attribute and returns the new id with a prefix.
                    // If an id already exists, it simply returns it with a prefix.

                    var select2Id = element.getAttribute('data-select2-id');

                    if (select2Id != null) {
                        return select2Id;
                    }

                    // If element has id, use it.
                    if (element.id) {
                        select2Id = 'select2-data-' + element.id;
                    } else {
                        select2Id = 'select2-data-' + (++id).toString() +
                            '-' + Utils.generateChars(4);
                    }

                    element.setAttribute('data-select2-id', select2Id);

                    return select2Id;
                };

                Utils.StoreData = function (element, name, value) {
                    // Stores an item in the cache for a specified element.
                    // name is the cache key.
                    var id = Utils.GetUniqueElementId(element);
                    if (!Utils.__cache[id]) {
                        Utils.__cache[id] = {};
                    }

                    Utils.__cache[id][name] = value;
                };

                Utils.GetData = function (element, name) {
                    // Retrieves a value from the cache by its key (name)
                    // name is optional. If no name specified, return
                    // all cache items for the specified element.
                    // and for a specified element.
                    var id = Utils.GetUniqueElementId(element);
                    if (name) {
                        if (Utils.__cache[id]) {
                            if (Utils.__cache[id][name] != null) {
                                return Utils.__cache[id][name];
                            }
                            return $(element).data(name); // Fallback to HTML5 data attribs.
                        }
                        return $(element).data(name); // Fallback to HTML5 data attribs.
                    } else {
                        return Utils.__cache[id];
                    }
                };

                Utils.RemoveData = function (element) {
                    // Removes all cached items for a specified element.
                    var id = Utils.GetUniqueElementId(element);
                    if (Utils.__cache[id] != null) {
                        delete Utils.__cache[id];
                    }

                    element.removeAttribute('data-select2-id');
                };

                Utils.copyNonInternalCssClasses = function (dest, src) {
                    var classes;

                    var destinationClasses = dest.getAttribute('class').trim().split(/\s+/);

                    destinationClasses = destinationClasses.filter(function (clazz) {
                        // Save all Select2 classes
                        return clazz.indexOf('select2-') === 0;
                    });

                    var sourceClasses = src.getAttribute('class').trim().split(/\s+/);

                    sourceClasses = sourceClasses.filter(function (clazz) {
                        // Only copy non-Select2 classes
                        return clazz.indexOf('select2-') !== 0;
                    });

                    var replacements = destinationClasses.concat(sourceClasses);

                    dest.setAttribute('class', replacements.join(' '));
                };

                return Utils;
            });

            S2.define('select2/results', [
                'jquery',
                './utils'
            ], function ($, Utils) {
                function Results($element, options, dataAdapter) {
                    this.$element = $element;
                    this.data = dataAdapter;
                    this.options = options;

                    Results.__super__.constructor.call(this);
                }

                Utils.Extend(Results, Utils.Observable);

                Results.prototype.render = function () {
                    var $results = $(
                        '<ul class="select2-results__options" role="listbox"></ul>'
                    );

                    if (this.options.get('multiple')) {
                        $results.attr('aria-multiselectable', 'true');
                    }

                    this.$results = $results;

                    return $results;
                };

                Results.prototype.clear = function () {
                    this.$results.empty();
                };

                Results.prototype.displayMessage = function (params) {
                    var escapeMarkup = this.options.get('escapeMarkup');

                    this.clear();
                    this.hideLoading();

                    var $message = $(
                        '<li role="alert" aria-live="assertive"' +
                        ' class="select2-results__option"></li>'
                    );

                    var message = this.options.get('translations').get(params.message);

                    $message.append(
                        escapeMarkup(
                            message(params.args)
                        )
                    );

                    $message[0].className += ' select2-results__message';

                    this.$results.append($message);
                };

                Results.prototype.hideMessages = function () {
                    this.$results.find('.select2-results__message').remove();
                };

                Results.prototype.append = function (data) {
                    this.hideLoading();

                    var $options = [];

                    if (data.results == null || data.results.length === 0) {
                        if (this.$results.children().length === 0) {
                            this.trigger('results:message', {
                                message: 'noResults'
                            });
                        }

                        return;
                    }

                    data.results = this.sort(data.results);

                    for (var d = 0; d < data.results.length; d++) {
                        var item = data.results[d];

                        var $option = this.option(item);

                        $options.push($option);
                    }

                    this.$results.append($options);
                };

                Results.prototype.position = function ($results, $dropdown) {
                    var $resultsContainer = $dropdown.find('.select2-results');
                    $resultsContainer.append($results);
                };

                Results.prototype.sort = function (data) {
                    var sorter = this.options.get('sorter');

                    return sorter(data);
                };

                Results.prototype.highlightFirstItem = function () {
                    var $options = this.$results
                        .find('.select2-results__option--selectable');

                    var $selected = $options.filter('.select2-results__option--selected');

                    // Check if there are any selected options
                    if ($selected.length > 0) {
                        // If there are selected options, highlight the first
                        $selected.first().trigger('mouseenter');
                    } else {
                        // If there are no selected options, highlight the first option
                        // in the dropdown
                        $options.first().trigger('mouseenter');
                    }

                    this.ensureHighlightVisible();
                };

                Results.prototype.setClasses = function () {
                    var self = this;

                    this.data.current(function (selected) {
                        var selectedIds = selected.map(function (s) {
                            return s.id.toString();
                        });

                        var $options = self.$results
                            .find('.select2-results__option--selectable');

                        $options.each(function () {
                            var $option = $(this);

                            var item = Utils.GetData(this, 'data');

                            // id needs to be converted to a string when comparing
                            var id = '' + item.id;

                            if ((item.element != null && item.element.selected) ||
                                (item.element == null && selectedIds.indexOf(id) > -1)) {
                                this.classList.add('select2-results__option--selected');
                                $option.attr('aria-selected', 'true');
                            } else {
                                this.classList.remove('select2-results__option--selected');
                                $option.attr('aria-selected', 'false');
                            }
                        });

                    });
                };

                Results.prototype.showLoading = function (params) {
                    this.hideLoading();

                    var loadingMore = this.options.get('translations').get('searching');

                    var loading = {
                        disabled: true,
                        loading: true,
                        text: loadingMore(params)
                    };
                    var $loading = this.option(loading);
                    $loading.className += ' loading-results';

                    this.$results.prepend($loading);
                };

                Results.prototype.hideLoading = function () {
                    this.$results.find('.loading-results').remove();
                };

                Results.prototype.option = function (data) {
                    var option = document.createElement('li');
                    option.classList.add('select2-results__option');
                    option.classList.add('select2-results__option--selectable');

                    var attrs = {
                        'role': 'option'
                    };

                    var matches = window.Element.prototype.matches ||
                        window.Element.prototype.msMatchesSelector ||
                        window.Element.prototype.webkitMatchesSelector;

                    if ((data.element != null && matches.call(data.element, ':disabled')) ||
                        (data.element == null && data.disabled)) {
                        attrs['aria-disabled'] = 'true';

                        option.classList.remove('select2-results__option--selectable');
                        option.classList.add('select2-results__option--disabled');
                    }

                    if (data.id == null) {
                        option.classList.remove('select2-results__option--selectable');
                    }

                    if (data._resultId != null) {
                        option.id = data._resultId;
                    }

                    if (data.title) {
                        option.title = data.title;
                    }

                    if (data.children) {
                        attrs.role = 'group';
                        attrs['aria-label'] = data.text;

                        option.classList.remove('select2-results__option--selectable');
                        option.classList.add('select2-results__option--group');
                    }

                    for (var attr in attrs) {
                        var val = attrs[attr];

                        option.setAttribute(attr, val);
                    }

                    if (data.children) {
                        var $option = $(option);

                        var label = document.createElement('strong');
                        label.className = 'select2-results__group';

                        this.template(data, label);

                        var $children = [];

                        for (var c = 0; c < data.children.length; c++) {
                            var child = data.children[c];

                            var $child = this.option(child);

                            $children.push($child);
                        }

                        var $childrenContainer = $('<ul></ul>', {
                            'class': 'select2-results__options select2-results__options--nested',
                            'role': 'none'
                        });

                        $childrenContainer.append($children);

                        $option.append(label);
                        $option.append($childrenContainer);
                    } else {
                        this.template(data, option);
                    }

                    Utils.StoreData(option, 'data', data);

                    return option;
                };

                Results.prototype.bind = function (container, $container) {
                    var self = this;

                    var id = container.id + '-results';

                    this.$results.attr('id', id);

                    container.on('results:all', function (params) {
                        self.clear();
                        self.append(params.data);

                        if (container.isOpen()) {
                            self.setClasses();
                            self.highlightFirstItem();
                        }
                    });

                    container.on('results:append', function (params) {
                        self.append(params.data);

                        if (container.isOpen()) {
                            self.setClasses();
                        }
                    });

                    container.on('query', function (params) {
                        self.hideMessages();
                        self.showLoading(params);
                    });

                    container.on('select', function () {
                        if (!container.isOpen()) {
                            return;
                        }

                        self.setClasses();

                        if (self.options.get('scrollAfterSelect')) {
                            self.highlightFirstItem();
                        }
                    });

                    container.on('unselect', function () {
                        if (!container.isOpen()) {
                            return;
                        }

                        self.setClasses();

                        if (self.options.get('scrollAfterSelect')) {
                            self.highlightFirstItem();
                        }
                    });

                    container.on('open', function () {
                        // When the dropdown is open, aria-expended="true"
                        self.$results.attr('aria-expanded', 'true');
                        self.$results.attr('aria-hidden', 'false');

                        self.setClasses();
                        self.ensureHighlightVisible();
                    });

                    container.on('close', function () {
                        // When the dropdown is closed, aria-expended="false"
                        self.$results.attr('aria-expanded', 'false');
                        self.$results.attr('aria-hidden', 'true');
                        self.$results.removeAttr('aria-activedescendant');
                    });

                    container.on('results:toggle', function () {
                        var $highlighted = self.getHighlightedResults();

                        if ($highlighted.length === 0) {
                            return;
                        }

                        $highlighted.trigger('mouseup');
                    });

                    container.on('results:select', function () {
                        var $highlighted = self.getHighlightedResults();

                        if ($highlighted.length === 0) {
                            return;
                        }

                        var data = Utils.GetData($highlighted[0], 'data');

                        if ($highlighted.hasClass('select2-results__option--selected')) {
                            self.trigger('close', {});
                        } else {
                            self.trigger('select', {
                                data: data
                            });
                        }
                    });

                    container.on('results:previous', function () {
                        var $highlighted = self.getHighlightedResults();

                        var $options = self.$results.find('.select2-results__option--selectable');

                        var currentIndex = $options.index($highlighted);

                        // If we are already at the top, don't move further
                        // If no options, currentIndex will be -1
                        if (currentIndex <= 0) {
                            return;
                        }

                        var nextIndex = currentIndex - 1;

                        // If none are highlighted, highlight the first
                        if ($highlighted.length === 0) {
                            nextIndex = 0;
                        }

                        var $next = $options.eq(nextIndex);

                        $next.trigger('mouseenter');

                        var currentOffset = self.$results.offset().top;
                        var nextTop = $next.offset().top;
                        var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

                        if (nextIndex === 0) {
                            self.$results.scrollTop(0);
                        } else if (nextTop - currentOffset < 0) {
                            self.$results.scrollTop(nextOffset);
                        }
                    });

                    container.on('results:next', function () {
                        var $highlighted = self.getHighlightedResults();

                        var $options = self.$results.find('.select2-results__option--selectable');

                        var currentIndex = $options.index($highlighted);

                        var nextIndex = currentIndex + 1;

                        // If we are at the last option, stay there
                        if (nextIndex >= $options.length) {
                            return;
                        }

                        var $next = $options.eq(nextIndex);

                        $next.trigger('mouseenter');

                        var currentOffset = self.$results.offset().top +
                            self.$results.outerHeight(false);
                        var nextBottom = $next.offset().top + $next.outerHeight(false);
                        var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

                        if (nextIndex === 0) {
                            self.$results.scrollTop(0);
                        } else if (nextBottom > currentOffset) {
                            self.$results.scrollTop(nextOffset);
                        }
                    });

                    container.on('results:focus', function (params) {
                        params.element[0].classList.add('select2-results__option--highlighted');
                        params.element[0].setAttribute('aria-selected', 'true');
                    });

                    container.on('results:message', function (params) {
                        self.displayMessage(params);
                    });

                    if ($.fn.mousewheel) {
                        this.$results.on('mousewheel', function (e) {
                            var top = self.$results.scrollTop();

                            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

                            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
                            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

                            if (isAtTop) {
                                self.$results.scrollTop(0);

                                e.preventDefault();
                                e.stopPropagation();
                            } else if (isAtBottom) {
                                self.$results.scrollTop(
                                    self.$results.get(0).scrollHeight - self.$results.height()
                                );

                                e.preventDefault();
                                e.stopPropagation();
                            }
                        });
                    }

                    this.$results.on('mouseup', '.select2-results__option--selectable',
                        function (evt) {
                            var $this = $(this);

                            var data = Utils.GetData(this, 'data');

                            if ($this.hasClass('select2-results__option--selected')) {
                                if (self.options.get('multiple')) {
                                    self.trigger('unselect', {
                                        originalEvent: evt,
                                        data: data
                                    });
                                } else {
                                    self.trigger('close', {});
                                }

                                return;
                            }

                            self.trigger('select', {
                                originalEvent: evt,
                                data: data
                            });
                        });

                    this.$results.on('mouseenter', '.select2-results__option--selectable',
                        function (evt) {
                            var data = Utils.GetData(this, 'data');

                            self.getHighlightedResults()
                                .removeClass('select2-results__option--highlighted')
                                .attr('aria-selected', 'false');

                            self.trigger('results:focus', {
                                data: data,
                                element: $(this)
                            });
                        });
                };

                Results.prototype.getHighlightedResults = function () {
                    var $highlighted = this.$results
                        .find('.select2-results__option--highlighted');

                    return $highlighted;
                };

                Results.prototype.destroy = function () {
                    this.$results.remove();
                };

                Results.prototype.ensureHighlightVisible = function () {
                    var $highlighted = this.getHighlightedResults();

                    if ($highlighted.length === 0) {
                        return;
                    }

                    var $options = this.$results.find('.select2-results__option--selectable');

                    var currentIndex = $options.index($highlighted);

                    var currentOffset = this.$results.offset().top;
                    var nextTop = $highlighted.offset().top;
                    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

                    var offsetDelta = nextTop - currentOffset;
                    nextOffset -= $highlighted.outerHeight(false) * 2;

                    if (currentIndex <= 2) {
                        this.$results.scrollTop(0);
                    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
                        this.$results.scrollTop(nextOffset);
                    }
                };

                Results.prototype.template = function (result, container) {
                    var template = this.options.get('templateResult');
                    var escapeMarkup = this.options.get('escapeMarkup');

                    var content = template(result, container);

                    if (content == null) {
                        container.style.display = 'none';
                    } else if (typeof content === 'string') {
                        container.innerHTML = escapeMarkup(content);
                    } else {
                        $(container).append(content);
                    }
                };

                return Results;
            });

            S2.define('select2/keys', [

            ], function () {
                var KEYS = {
                    BACKSPACE: 8,
                    TAB: 9,
                    ENTER: 13,
                    SHIFT: 16,
                    CTRL: 17,
                    ALT: 18,
                    ESC: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT: 37,
                    UP: 38,
                    RIGHT: 39,
                    DOWN: 40,
                    DELETE: 46
                };

                return KEYS;
            });

            S2.define('select2/selection/base', [
                'jquery',
                '../utils',
                '../keys'
            ], function ($, Utils, KEYS) {
                function BaseSelection($element, options) {
                    this.$element = $element;
                    this.options = options;

                    BaseSelection.__super__.constructor.call(this);
                }

                Utils.Extend(BaseSelection, Utils.Observable);

                BaseSelection.prototype.render = function () {
                    var $selection = $(
                        '<span class="select2-selection" role="combobox" ' +
                        ' aria-haspopup="true" aria-expanded="false">' +
                        '</span>'
                    );

                    this._tabindex = 0;

                    if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
                        this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
                    } else if (this.$element.attr('tabindex') != null) {
                        this._tabindex = this.$element.attr('tabindex');
                    }

                    $selection.attr('title', this.$element.attr('title'));
                    $selection.attr('tabindex', this._tabindex);
                    $selection.attr('aria-disabled', 'false');

                    this.$selection = $selection;

                    return $selection;
                };

                BaseSelection.prototype.bind = function (container, $container) {
                    var self = this;

                    var resultsId = container.id + '-results';

                    this.container = container;

                    this.$selection.on('focus', function (evt) {
                        self.trigger('focus', evt);
                    });

                    this.$selection.on('blur', function (evt) {
                        self._handleBlur(evt);
                    });

                    this.$selection.on('keydown', function (evt) {
                        self.trigger('keypress', evt);

                        if (evt.which === KEYS.SPACE) {
                            evt.preventDefault();
                        }
                    });

                    container.on('results:focus', function (params) {
                        self.$selection.attr('aria-activedescendant', params.data._resultId);
                    });

                    container.on('selection:update', function (params) {
                        self.update(params.data);
                    });

                    container.on('open', function () {
                        // When the dropdown is open, aria-expanded="true"
                        self.$selection.attr('aria-expanded', 'true');
                        self.$selection.attr('aria-owns', resultsId);

                        self._attachCloseHandler(container);
                    });

                    container.on('close', function () {
                        // When the dropdown is closed, aria-expanded="false"
                        self.$selection.attr('aria-expanded', 'false');
                        self.$selection.removeAttr('aria-activedescendant');
                        self.$selection.removeAttr('aria-owns');

                        self.$selection.trigger('focus');

                        self._detachCloseHandler(container);
                    });

                    container.on('enable', function () {
                        self.$selection.attr('tabindex', self._tabindex);
                        self.$selection.attr('aria-disabled', 'false');
                    });

                    container.on('disable', function () {
                        self.$selection.attr('tabindex', '-1');
                        self.$selection.attr('aria-disabled', 'true');
                    });
                };

                BaseSelection.prototype._handleBlur = function (evt) {
                    var self = this;

                    // This needs to be delayed as the active element is the body when the tab
                    // key is pressed, possibly along with others.
                    window.setTimeout(function () {
                        // Don't trigger `blur` if the focus is still in the selection
                        if (
                            (document.activeElement == self.$selection[0]) ||
                            ($.contains(self.$selection[0], document.activeElement))
                        ) {
                            return;
                        }

                        self.trigger('blur', evt);
                    }, 1);
                };

                BaseSelection.prototype._attachCloseHandler = function (container) {

                    $(document.body).on('mousedown.select2.' + container.id, function (e) {
                        var $target = $(e.target);

                        var $select = $target.closest('.select2');

                        var $all = $('.select2.select2-container--open');

                        $all.each(function () {
                            if (this == $select[0]) {
                                return;
                            }

                            var $element = Utils.GetData(this, 'element');

                            $element.select2('close');
                        });
                    });
                };

                BaseSelection.prototype._detachCloseHandler = function (container) {
                    $(document.body).off('mousedown.select2.' + container.id);
                };

                BaseSelection.prototype.position = function ($selection, $container) {
                    var $selectionContainer = $container.find('.selection');
                    $selectionContainer.append($selection);
                };

                BaseSelection.prototype.destroy = function () {
                    this._detachCloseHandler(this.container);
                };

                BaseSelection.prototype.update = function (data) {
                    throw new Error('The `update` method must be defined in child classes.');
                };

                /**
                 * Helper method to abstract the "enabled" (not "disabled") state of this
                 * object.
                 *
                 * @return {true} if the instance is not disabled.
                 * @return {false} if the instance is disabled.
                 */
                BaseSelection.prototype.isEnabled = function () {
                    return !this.isDisabled();
                };

                /**
                 * Helper method to abstract the "disabled" state of this object.
                 *
                 * @return {true} if the disabled option is true.
                 * @return {false} if the disabled option is false.
                 */
                BaseSelection.prototype.isDisabled = function () {
                    return this.options.get('disabled');
                };

                return BaseSelection;
            });

            S2.define('select2/selection/single', [
                'jquery',
                './base',
                '../utils',
                '../keys'
            ], function ($, BaseSelection, Utils, KEYS) {
                function SingleSelection() {
                    SingleSelection.__super__.constructor.apply(this, arguments);
                }

                Utils.Extend(SingleSelection, BaseSelection);

                SingleSelection.prototype.render = function () {
                    var $selection = SingleSelection.__super__.render.call(this);

                    $selection[0].classList.add('select2-selection--single');

                    $selection.html(
                        '<span class="select2-selection__rendered"></span>' +
                        '<span class="select2-selection__arrow" role="presentation">' +
                        '<b role="presentation"></b>' +
                        '</span>'
                    );

                    return $selection;
                };

                SingleSelection.prototype.bind = function (container, $container) {
                    var self = this;

                    SingleSelection.__super__.bind.apply(this, arguments);

                    var id = container.id + '-container';

                    this.$selection.find('.select2-selection__rendered')
                        .attr('id', id)
                        .attr('role', 'textbox')
                        .attr('aria-readonly', 'true');
                    this.$selection.attr('aria-labelledby', id);
                    this.$selection.attr('aria-controls', id);

                    this.$selection.on('mousedown', function (evt) {
                        // Only respond to left clicks
                        if (evt.which !== 1) {
                            return;
                        }

                        self.trigger('toggle', {
                            originalEvent: evt
                        });
                    });

                    this.$selection.on('focus', function (evt) {
                        // User focuses on the container
                    });

                    this.$selection.on('blur', function (evt) {
                        // User exits the container
                    });

                    container.on('focus', function (evt) {
                        if (!container.isOpen()) {
                            self.$selection.trigger('focus');
                        }
                    });
                };

                SingleSelection.prototype.clear = function () {
                    var $rendered = this.$selection.find('.select2-selection__rendered');
                    $rendered.empty();
                    $rendered.removeAttr('title'); // clear tooltip on empty
                };

                SingleSelection.prototype.display = function (data, container) {
                    var template = this.options.get('templateSelection');
                    var escapeMarkup = this.options.get('escapeMarkup');

                    return escapeMarkup(template(data, container));
                };

                SingleSelection.prototype.selectionContainer = function () {
                    return $('<span></span>');
                };

                SingleSelection.prototype.update = function (data) {
                    if (data.length === 0) {
                        this.clear();
                        return;
                    }

                    var selection = data[0];

                    var $rendered = this.$selection.find('.select2-selection__rendered');
                    var formatted = this.display(selection, $rendered);

                    $rendered.empty().append(formatted);

                    var title = selection.title || selection.text;

                    if (title) {
                        $rendered.attr('title', title);
                    } else {
                        $rendered.removeAttr('title');
                    }
                };

                return SingleSelection;
            });

            S2.define('select2/selection/multiple', [
                'jquery',
                './base',
                '../utils'
            ], function ($, BaseSelection, Utils) {
                function MultipleSelection($element, options) {
                    MultipleSelection.__super__.constructor.apply(this, arguments);
                }

                Utils.Extend(MultipleSelection, BaseSelection);

                MultipleSelection.prototype.render = function () {
                    var $selection = MultipleSelection.__super__.render.call(this);

                    $selection[0].classList.add('select2-selection--multiple');

                    $selection.html(
                        '<ul class="select2-selection__rendered"></ul>'
                    );

                    return $selection;
                };

                MultipleSelection.prototype.bind = function (container, $container) {
                    var self = this;

                    MultipleSelection.__super__.bind.apply(this, arguments);

                    var id = container.id + '-container';
                    this.$selection.find('.select2-selection__rendered').attr('id', id);

                    this.$selection.on('click', function (evt) {
                        self.trigger('toggle', {
                            originalEvent: evt
                        });
                    });

                    this.$selection.on(
                        'click',
                        '.select2-selection__choice__remove',
                        function (evt) {
                            // Ignore the event if it is disabled
                            if (self.isDisabled()) {
                                return;
                            }

                            var $remove = $(this);
                            var $selection = $remove.parent();

                            var data = Utils.GetData($selection[0], 'data');

                            self.trigger('unselect', {
                                originalEvent: evt,
                                data: data
                            });
                        }
                    );

                    this.$selection.on(
                        'keydown',
                        '.select2-selection__choice__remove',
                        function (evt) {
                            // Ignore the event if it is disabled
                            if (self.isDisabled()) {
                                return;
                            }

                            evt.stopPropagation();
                        }
                    );
                };

                MultipleSelection.prototype.clear = function () {
                    var $rendered = this.$selection.find('.select2-selection__rendered');
                    $rendered.empty();
                    $rendered.removeAttr('title');
                };

                MultipleSelection.prototype.display = function (data, container) {
                    var template = this.options.get('templateSelection');
                    var escapeMarkup = this.options.get('escapeMarkup');

                    return escapeMarkup(template(data, container));
                };

                MultipleSelection.prototype.selectionContainer = function () {
                    var $container = $(
                        '<li class="select2-selection__choice">' +
                        '<button type="button" class="select2-selection__choice__remove" ' +
                        'tabindex="-1">' +
                        '<span aria-hidden="true">&times;</span>' +
                        '</button>' +
                        '<span class="select2-selection__choice__display"></span>' +
                        '</li>'
                    );

                    return $container;
                };

                MultipleSelection.prototype.update = function (data) {
                    this.clear();

                    if (data.length === 0) {
                        return;
                    }

                    var $selections = [];

                    var selectionIdPrefix = this.$selection.find('.select2-selection__rendered')
                        .attr('id') + '-choice-';

                    for (var d = 0; d < data.length; d++) {
                        var selection = data[d];

                        var $selection = this.selectionContainer();
                        var formatted = this.display(selection, $selection);

                        var selectionId = selectionIdPrefix + Utils.generateChars(4) + '-';

                        if (selection.id) {
                            selectionId += selection.id;
                        } else {
                            selectionId += Utils.generateChars(4);
                        }

                        $selection.find('.select2-selection__choice__display')
                            .append(formatted)
                            .attr('id', selectionId);

                        var title = selection.title || selection.text;

                        if (title) {
                            $selection.attr('title', title);
                        }

                        var removeItem = this.options.get('translations').get('removeItem');

                        var $remove = $selection.find('.select2-selection__choice__remove');

                        $remove.attr('title', removeItem());
                        $remove.attr('aria-label', removeItem());
                        $remove.attr('aria-describedby', selectionId);

                        Utils.StoreData($selection[0], 'data', selection);

                        $selections.push($selection);
                    }

                    var $rendered = this.$selection.find('.select2-selection__rendered');

                    $rendered.append($selections);
                };

                return MultipleSelection;
            });

            S2.define('select2/selection/placeholder', [

            ], function () {
                function Placeholder(decorated, $element, options) {
                    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

                    decorated.call(this, $element, options);
                }

                Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
                    if (typeof placeholder === 'string') {
                        placeholder = {
                            id: '',
                            text: placeholder
                        };
                    }

                    return placeholder;
                };

                Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
                    var $placeholder = this.selectionContainer();

                    $placeholder.html(this.display(placeholder));
                    $placeholder[0].classList.add('select2-selection__placeholder');
                    $placeholder[0].classList.remove('select2-selection__choice');

                    var placeholderTitle = placeholder.title ||
                        placeholder.text ||
                        $placeholder.text();

                    this.$selection.find('.select2-selection__rendered').attr(
                        'title',
                        placeholderTitle
                    );

                    return $placeholder;
                };

                Placeholder.prototype.update = function (decorated, data) {
                    var singlePlaceholder = (
                        data.length == 1 && data[0].id != this.placeholder.id
                    );
                    var multipleSelections = data.length > 1;

                    if (multipleSelections || singlePlaceholder) {
                        return decorated.call(this, data);
                    }

                    this.clear();

                    var $placeholder = this.createPlaceholder(this.placeholder);

                    this.$selection.find('.select2-selection__rendered').append($placeholder);
                };

                return Placeholder;
            });

            S2.define('select2/selection/allowClear', [
                'jquery',
                '../keys',
                '../utils'
            ], function ($, KEYS, Utils) {
                function AllowClear() { }

                AllowClear.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    decorated.call(this, container, $container);

                    if (this.placeholder == null) {
                        if (this.options.get('debug') && window.console && console.error) {
                            console.error(
                                'Select2: The `allowClear` option should be used in combination ' +
                                'with the `placeholder` option.'
                            );
                        }
                    }

                    this.$selection.on('mousedown', '.select2-selection__clear',
                        function (evt) {
                            self._handleClear(evt);
                        });

                    container.on('keypress', function (evt) {
                        self._handleKeyboardClear(evt, container);
                    });
                };

                AllowClear.prototype._handleClear = function (_, evt) {
                    // Ignore the event if it is disabled
                    if (this.isDisabled()) {
                        return;
                    }

                    var $clear = this.$selection.find('.select2-selection__clear');

                    // Ignore the event if nothing has been selected
                    if ($clear.length === 0) {
                        return;
                    }

                    evt.stopPropagation();

                    var data = Utils.GetData($clear[0], 'data');

                    var previousVal = this.$element.val();
                    this.$element.val(this.placeholder.id);

                    var unselectData = {
                        data: data
                    };
                    this.trigger('clear', unselectData);
                    if (unselectData.prevented) {
                        this.$element.val(previousVal);
                        return;
                    }

                    for (var d = 0; d < data.length; d++) {
                        unselectData = {
                            data: data[d]
                        };

                        // Trigger the `unselect` event, so people can prevent it from being
                        // cleared.
                        this.trigger('unselect', unselectData);

                        // If the event was prevented, don't clear it out.
                        if (unselectData.prevented) {
                            this.$element.val(previousVal);
                            return;
                        }
                    }

                    this.$element.trigger('input').trigger('change');

                    this.trigger('toggle', {});
                };

                AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
                    if (container.isOpen()) {
                        return;
                    }

                    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
                        this._handleClear(evt);
                    }
                };

                AllowClear.prototype.update = function (decorated, data) {
                    decorated.call(this, data);

                    this.$selection.find('.select2-selection__clear').remove();
                    this.$selection[0].classList.remove('select2-selection--clearable');

                    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
                        data.length === 0) {
                        return;
                    }

                    var selectionId = this.$selection.find('.select2-selection__rendered')
                        .attr('id');

                    var removeAll = this.options.get('translations').get('removeAllItems');

                    var $remove = $(
                        '<button type="button" class="select2-selection__clear" tabindex="-1">' +
                        '<span aria-hidden="true">&times;</span>' +
                        '</button>'
                    );
                    $remove.attr('title', removeAll());
                    $remove.attr('aria-label', removeAll());
                    $remove.attr('aria-describedby', selectionId);
                    Utils.StoreData($remove[0], 'data', data);

                    this.$selection.prepend($remove);
                    this.$selection[0].classList.add('select2-selection--clearable');
                };

                return AllowClear;
            });

            S2.define('select2/selection/search', [
                'jquery',
                '../utils',
                '../keys'
            ], function ($, Utils, KEYS) {
                function Search(decorated, $element, options) {
                    decorated.call(this, $element, options);
                }

                Search.prototype.render = function (decorated) {
                    var searchLabel = this.options.get('translations').get('search');
                    var $search = $(
                        '<span class="select2-search select2-search--inline">' +
                        '<textarea class="select2-search__field"' +
                        ' type="search" tabindex="-1"' +
                        ' autocorrect="off" autocapitalize="none"' +
                        ' spellcheck="false" role="searchbox" aria-autocomplete="list" >' +
                        '</textarea>' +
                        '</span>'
                    );

                    this.$searchContainer = $search;
                    this.$search = $search.find('textarea');

                    this.$search.prop('autocomplete', this.options.get('autocomplete'));
                    this.$search.attr('aria-label', searchLabel());

                    var $rendered = decorated.call(this);

                    this._transferTabIndex();
                    $rendered.append(this.$searchContainer);

                    return $rendered;
                };

                Search.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    var resultsId = container.id + '-results';
                    var selectionId = container.id + '-container';

                    decorated.call(this, container, $container);

                    self.$search.attr('aria-describedby', selectionId);

                    container.on('open', function () {
                        self.$search.attr('aria-controls', resultsId);
                        self.$search.trigger('focus');
                    });

                    container.on('close', function () {
                        self.$search.val('');
                        self.resizeSearch();
                        self.$search.removeAttr('aria-controls');
                        self.$search.removeAttr('aria-activedescendant');
                        self.$search.trigger('focus');
                    });

                    container.on('enable', function () {
                        self.$search.prop('disabled', false);

                        self._transferTabIndex();
                    });

                    container.on('disable', function () {
                        self.$search.prop('disabled', true);
                    });

                    container.on('focus', function (evt) {
                        self.$search.trigger('focus');
                    });

                    container.on('results:focus', function (params) {
                        if (params.data._resultId) {
                            self.$search.attr('aria-activedescendant', params.data._resultId);
                        } else {
                            self.$search.removeAttr('aria-activedescendant');
                        }
                    });

                    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
                        self.trigger('focus', evt);
                    });

                    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
                        self._handleBlur(evt);
                    });

                    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
                        evt.stopPropagation();

                        self.trigger('keypress', evt);

                        self._keyUpPrevented = evt.isDefaultPrevented();

                        var key = evt.which;

                        if (key === KEYS.BACKSPACE && self.$search.val() === '') {
                            var $previousChoice = self.$selection
                                .find('.select2-selection__choice').last();

                            if ($previousChoice.length > 0) {
                                var item = Utils.GetData($previousChoice[0], 'data');

                                self.searchRemoveChoice(item);

                                evt.preventDefault();
                            }
                        }
                    });

                    this.$selection.on('click', '.select2-search--inline', function (evt) {
                        if (self.$search.val()) {
                            evt.stopPropagation();
                        }
                    });

                    // Try to detect the IE version should the `documentMode` property that
                    // is stored on the document. This is only implemented in IE and is
                    // slightly cleaner than doing a user agent check.
                    // This property is not available in Edge, but Edge also doesn't have
                    // this bug.
                    var msie = document.documentMode;
                    var disableInputEvents = msie && msie <= 11;

                    // Workaround for browsers which do not support the `input` event
                    // This will prevent double-triggering of events for browsers which support
                    // both the `keyup` and `input` events.
                    this.$selection.on(
                        'input.searchcheck',
                        '.select2-search--inline',
                        function (evt) {
                            // IE will trigger the `input` event when a placeholder is used on a
                            // search box. To get around this issue, we are forced to ignore all
                            // `input` events in IE and keep using `keyup`.
                            if (disableInputEvents) {
                                self.$selection.off('input.search input.searchcheck');
                                return;
                            }

                            // Unbind the duplicated `keyup` event
                            self.$selection.off('keyup.search');
                        }
                    );

                    this.$selection.on(
                        'keyup.search input.search',
                        '.select2-search--inline',
                        function (evt) {
                            // IE will trigger the `input` event when a placeholder is used on a
                            // search box. To get around this issue, we are forced to ignore all
                            // `input` events in IE and keep using `keyup`.
                            if (disableInputEvents && evt.type === 'input') {
                                self.$selection.off('input.search input.searchcheck');
                                return;
                            }

                            var key = evt.which;

                            // We can freely ignore events from modifier keys
                            if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
                                return;
                            }

                            // Tabbing will be handled during the `keydown` phase
                            if (key == KEYS.TAB) {
                                return;
                            }

                            self.handleSearch(evt);
                        }
                    );
                };

                /**
                 * This method will transfer the tabindex attribute from the rendered
                 * selection to the search box. This allows for the search box to be used as
                 * the primary focus instead of the selection container.
                 *
                 * @private
                 */
                Search.prototype._transferTabIndex = function (decorated) {
                    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
                    this.$selection.attr('tabindex', '-1');
                };

                Search.prototype.createPlaceholder = function (decorated, placeholder) {
                    this.$search.attr('placeholder', placeholder.text);
                };

                Search.prototype.update = function (decorated, data) {
                    var searchHadFocus = this.$search[0] == document.activeElement;

                    this.$search.attr('placeholder', '');

                    decorated.call(this, data);

                    this.resizeSearch();
                    if (searchHadFocus) {
                        this.$search.trigger('focus');
                    }
                };

                Search.prototype.handleSearch = function () {
                    this.resizeSearch();

                    if (!this._keyUpPrevented) {
                        var input = this.$search.val();

                        this.trigger('query', {
                            term: input
                        });
                    }

                    this._keyUpPrevented = false;
                };

                Search.prototype.searchRemoveChoice = function (decorated, item) {
                    this.trigger('unselect', {
                        data: item
                    });

                    this.$search.val(item.text);
                    this.handleSearch();
                };

                Search.prototype.resizeSearch = function () {
                    this.$search.css('width', '25px');

                    var width = '100%';

                    if (this.$search.attr('placeholder') === '') {
                        var minimumWidth = this.$search.val().length + 1;

                        width = (minimumWidth * 0.75) + 'em';
                    }

                    this.$search.css('width', width);
                };

                return Search;
            });

            S2.define('select2/selection/selectionCss', [
                '../utils'
            ], function (Utils) {
                function SelectionCSS() { }

                SelectionCSS.prototype.render = function (decorated) {
                    var $selection = decorated.call(this);

                    var selectionCssClass = this.options.get('selectionCssClass') || '';

                    if (selectionCssClass.indexOf(':all:') !== -1) {
                        selectionCssClass = selectionCssClass.replace(':all:', '');

                        Utils.copyNonInternalCssClasses($selection[0], this.$element[0]);
                    }

                    $selection.addClass(selectionCssClass);

                    return $selection;
                };

                return SelectionCSS;
            });

            S2.define('select2/selection/eventRelay', [
                'jquery'
            ], function ($) {
                function EventRelay() { }

                EventRelay.prototype.bind = function (decorated, container, $container) {
                    var self = this;
                    var relayEvents = [
                        'open', 'opening',
                        'close', 'closing',
                        'select', 'selecting',
                        'unselect', 'unselecting',
                        'clear', 'clearing'
                    ];

                    var preventableEvents = [
                        'opening', 'closing', 'selecting', 'unselecting', 'clearing'
                    ];

                    decorated.call(this, container, $container);

                    container.on('*', function (name, params) {
                        // Ignore events that should not be relayed
                        if (relayEvents.indexOf(name) === -1) {
                            return;
                        }

                        // The parameters should always be an object
                        params = params || {};

                        // Generate the jQuery event for the Select2 event
                        var evt = $.Event('select2:' + name, {
                            params: params
                        });

                        self.$element.trigger(evt);

                        // Only handle preventable events if it was one
                        if (preventableEvents.indexOf(name) === -1) {
                            return;
                        }

                        params.prevented = evt.isDefaultPrevented();
                    });
                };

                return EventRelay;
            });

            S2.define('select2/translation', [
                'jquery',
                'require'
            ], function ($, require) {
                function Translation(dict) {
                    this.dict = dict || {};
                }

                Translation.prototype.all = function () {
                    return this.dict;
                };

                Translation.prototype.get = function (key) {
                    return this.dict[key];
                };

                Translation.prototype.extend = function (translation) {
                    this.dict = $.extend({}, translation.all(), this.dict);
                };

                // Static functions

                Translation._cache = {};

                Translation.loadPath = function (path) {
                    if (!(path in Translation._cache)) {
                        var translations = require(path);

                        Translation._cache[path] = translations;
                    }

                    return new Translation(Translation._cache[path]);
                };

                return Translation;
            });

            S2.define('select2/diacritics', [

            ], function () {
                var diacritics = {
                    '\u24B6': 'A',
                    '\uFF21': 'A',
                    '\u00C0': 'A',
                    '\u00C1': 'A',
                    '\u00C2': 'A',
                    '\u1EA6': 'A',
                    '\u1EA4': 'A',
                    '\u1EAA': 'A',
                    '\u1EA8': 'A',
                    '\u00C3': 'A',
                    '\u0100': 'A',
                    '\u0102': 'A',
                    '\u1EB0': 'A',
                    '\u1EAE': 'A',
                    '\u1EB4': 'A',
                    '\u1EB2': 'A',
                    '\u0226': 'A',
                    '\u01E0': 'A',
                    '\u00C4': 'A',
                    '\u01DE': 'A',
                    '\u1EA2': 'A',
                    '\u00C5': 'A',
                    '\u01FA': 'A',
                    '\u01CD': 'A',
                    '\u0200': 'A',
                    '\u0202': 'A',
                    '\u1EA0': 'A',
                    '\u1EAC': 'A',
                    '\u1EB6': 'A',
                    '\u1E00': 'A',
                    '\u0104': 'A',
                    '\u023A': 'A',
                    '\u2C6F': 'A',
                    '\uA732': 'AA',
                    '\u00C6': 'AE',
                    '\u01FC': 'AE',
                    '\u01E2': 'AE',
                    '\uA734': 'AO',
                    '\uA736': 'AU',
                    '\uA738': 'AV',
                    '\uA73A': 'AV',
                    '\uA73C': 'AY',
                    '\u24B7': 'B',
                    '\uFF22': 'B',
                    '\u1E02': 'B',
                    '\u1E04': 'B',
                    '\u1E06': 'B',
                    '\u0243': 'B',
                    '\u0182': 'B',
                    '\u0181': 'B',
                    '\u24B8': 'C',
                    '\uFF23': 'C',
                    '\u0106': 'C',
                    '\u0108': 'C',
                    '\u010A': 'C',
                    '\u010C': 'C',
                    '\u00C7': 'C',
                    '\u1E08': 'C',
                    '\u0187': 'C',
                    '\u023B': 'C',
                    '\uA73E': 'C',
                    '\u24B9': 'D',
                    '\uFF24': 'D',
                    '\u1E0A': 'D',
                    '\u010E': 'D',
                    '\u1E0C': 'D',
                    '\u1E10': 'D',
                    '\u1E12': 'D',
                    '\u1E0E': 'D',
                    '\u0110': 'D',
                    '\u018B': 'D',
                    '\u018A': 'D',
                    '\u0189': 'D',
                    '\uA779': 'D',
                    '\u01F1': 'DZ',
                    '\u01C4': 'DZ',
                    '\u01F2': 'Dz',
                    '\u01C5': 'Dz',
                    '\u24BA': 'E',
                    '\uFF25': 'E',
                    '\u00C8': 'E',
                    '\u00C9': 'E',
                    '\u00CA': 'E',
                    '\u1EC0': 'E',
                    '\u1EBE': 'E',
                    '\u1EC4': 'E',
                    '\u1EC2': 'E',
                    '\u1EBC': 'E',
                    '\u0112': 'E',
                    '\u1E14': 'E',
                    '\u1E16': 'E',
                    '\u0114': 'E',
                    '\u0116': 'E',
                    '\u00CB': 'E',
                    '\u1EBA': 'E',
                    '\u011A': 'E',
                    '\u0204': 'E',
                    '\u0206': 'E',
                    '\u1EB8': 'E',
                    '\u1EC6': 'E',
                    '\u0228': 'E',
                    '\u1E1C': 'E',
                    '\u0118': 'E',
                    '\u1E18': 'E',
                    '\u1E1A': 'E',
                    '\u0190': 'E',
                    '\u018E': 'E',
                    '\u24BB': 'F',
                    '\uFF26': 'F',
                    '\u1E1E': 'F',
                    '\u0191': 'F',
                    '\uA77B': 'F',
                    '\u24BC': 'G',
                    '\uFF27': 'G',
                    '\u01F4': 'G',
                    '\u011C': 'G',
                    '\u1E20': 'G',
                    '\u011E': 'G',
                    '\u0120': 'G',
                    '\u01E6': 'G',
                    '\u0122': 'G',
                    '\u01E4': 'G',
                    '\u0193': 'G',
                    '\uA7A0': 'G',
                    '\uA77D': 'G',
                    '\uA77E': 'G',
                    '\u24BD': 'H',
                    '\uFF28': 'H',
                    '\u0124': 'H',
                    '\u1E22': 'H',
                    '\u1E26': 'H',
                    '\u021E': 'H',
                    '\u1E24': 'H',
                    '\u1E28': 'H',
                    '\u1E2A': 'H',
                    '\u0126': 'H',
                    '\u2C67': 'H',
                    '\u2C75': 'H',
                    '\uA78D': 'H',
                    '\u24BE': 'I',
                    '\uFF29': 'I',
                    '\u00CC': 'I',
                    '\u00CD': 'I',
                    '\u00CE': 'I',
                    '\u0128': 'I',
                    '\u012A': 'I',
                    '\u012C': 'I',
                    '\u0130': 'I',
                    '\u00CF': 'I',
                    '\u1E2E': 'I',
                    '\u1EC8': 'I',
                    '\u01CF': 'I',
                    '\u0208': 'I',
                    '\u020A': 'I',
                    '\u1ECA': 'I',
                    '\u012E': 'I',
                    '\u1E2C': 'I',
                    '\u0197': 'I',
                    '\u24BF': 'J',
                    '\uFF2A': 'J',
                    '\u0134': 'J',
                    '\u0248': 'J',
                    '\u24C0': 'K',
                    '\uFF2B': 'K',
                    '\u1E30': 'K',
                    '\u01E8': 'K',
                    '\u1E32': 'K',
                    '\u0136': 'K',
                    '\u1E34': 'K',
                    '\u0198': 'K',
                    '\u2C69': 'K',
                    '\uA740': 'K',
                    '\uA742': 'K',
                    '\uA744': 'K',
                    '\uA7A2': 'K',
                    '\u24C1': 'L',
                    '\uFF2C': 'L',
                    '\u013F': 'L',
                    '\u0139': 'L',
                    '\u013D': 'L',
                    '\u1E36': 'L',
                    '\u1E38': 'L',
                    '\u013B': 'L',
                    '\u1E3C': 'L',
                    '\u1E3A': 'L',
                    '\u0141': 'L',
                    '\u023D': 'L',
                    '\u2C62': 'L',
                    '\u2C60': 'L',
                    '\uA748': 'L',
                    '\uA746': 'L',
                    '\uA780': 'L',
                    '\u01C7': 'LJ',
                    '\u01C8': 'Lj',
                    '\u24C2': 'M',
                    '\uFF2D': 'M',
                    '\u1E3E': 'M',
                    '\u1E40': 'M',
                    '\u1E42': 'M',
                    '\u2C6E': 'M',
                    '\u019C': 'M',
                    '\u24C3': 'N',
                    '\uFF2E': 'N',
                    '\u01F8': 'N',
                    '\u0143': 'N',
                    '\u00D1': 'N',
                    '\u1E44': 'N',
                    '\u0147': 'N',
                    '\u1E46': 'N',
                    '\u0145': 'N',
                    '\u1E4A': 'N',
                    '\u1E48': 'N',
                    '\u0220': 'N',
                    '\u019D': 'N',
                    '\uA790': 'N',
                    '\uA7A4': 'N',
                    '\u01CA': 'NJ',
                    '\u01CB': 'Nj',
                    '\u24C4': 'O',
                    '\uFF2F': 'O',
                    '\u00D2': 'O',
                    '\u00D3': 'O',
                    '\u00D4': 'O',
                    '\u1ED2': 'O',
                    '\u1ED0': 'O',
                    '\u1ED6': 'O',
                    '\u1ED4': 'O',
                    '\u00D5': 'O',
                    '\u1E4C': 'O',
                    '\u022C': 'O',
                    '\u1E4E': 'O',
                    '\u014C': 'O',
                    '\u1E50': 'O',
                    '\u1E52': 'O',
                    '\u014E': 'O',
                    '\u022E': 'O',
                    '\u0230': 'O',
                    '\u00D6': 'O',
                    '\u022A': 'O',
                    '\u1ECE': 'O',
                    '\u0150': 'O',
                    '\u01D1': 'O',
                    '\u020C': 'O',
                    '\u020E': 'O',
                    '\u01A0': 'O',
                    '\u1EDC': 'O',
                    '\u1EDA': 'O',
                    '\u1EE0': 'O',
                    '\u1EDE': 'O',
                    '\u1EE2': 'O',
                    '\u1ECC': 'O',
                    '\u1ED8': 'O',
                    '\u01EA': 'O',
                    '\u01EC': 'O',
                    '\u00D8': 'O',
                    '\u01FE': 'O',
                    '\u0186': 'O',
                    '\u019F': 'O',
                    '\uA74A': 'O',
                    '\uA74C': 'O',
                    '\u0152': 'OE',
                    '\u01A2': 'OI',
                    '\uA74E': 'OO',
                    '\u0222': 'OU',
                    '\u24C5': 'P',
                    '\uFF30': 'P',
                    '\u1E54': 'P',
                    '\u1E56': 'P',
                    '\u01A4': 'P',
                    '\u2C63': 'P',
                    '\uA750': 'P',
                    '\uA752': 'P',
                    '\uA754': 'P',
                    '\u24C6': 'Q',
                    '\uFF31': 'Q',
                    '\uA756': 'Q',
                    '\uA758': 'Q',
                    '\u024A': 'Q',
                    '\u24C7': 'R',
                    '\uFF32': 'R',
                    '\u0154': 'R',
                    '\u1E58': 'R',
                    '\u0158': 'R',
                    '\u0210': 'R',
                    '\u0212': 'R',
                    '\u1E5A': 'R',
                    '\u1E5C': 'R',
                    '\u0156': 'R',
                    '\u1E5E': 'R',
                    '\u024C': 'R',
                    '\u2C64': 'R',
                    '\uA75A': 'R',
                    '\uA7A6': 'R',
                    '\uA782': 'R',
                    '\u24C8': 'S',
                    '\uFF33': 'S',
                    '\u1E9E': 'S',
                    '\u015A': 'S',
                    '\u1E64': 'S',
                    '\u015C': 'S',
                    '\u1E60': 'S',
                    '\u0160': 'S',
                    '\u1E66': 'S',
                    '\u1E62': 'S',
                    '\u1E68': 'S',
                    '\u0218': 'S',
                    '\u015E': 'S',
                    '\u2C7E': 'S',
                    '\uA7A8': 'S',
                    '\uA784': 'S',
                    '\u24C9': 'T',
                    '\uFF34': 'T',
                    '\u1E6A': 'T',
                    '\u0164': 'T',
                    '\u1E6C': 'T',
                    '\u021A': 'T',
                    '\u0162': 'T',
                    '\u1E70': 'T',
                    '\u1E6E': 'T',
                    '\u0166': 'T',
                    '\u01AC': 'T',
                    '\u01AE': 'T',
                    '\u023E': 'T',
                    '\uA786': 'T',
                    '\uA728': 'TZ',
                    '\u24CA': 'U',
                    '\uFF35': 'U',
                    '\u00D9': 'U',
                    '\u00DA': 'U',
                    '\u00DB': 'U',
                    '\u0168': 'U',
                    '\u1E78': 'U',
                    '\u016A': 'U',
                    '\u1E7A': 'U',
                    '\u016C': 'U',
                    '\u00DC': 'U',
                    '\u01DB': 'U',
                    '\u01D7': 'U',
                    '\u01D5': 'U',
                    '\u01D9': 'U',
                    '\u1EE6': 'U',
                    '\u016E': 'U',
                    '\u0170': 'U',
                    '\u01D3': 'U',
                    '\u0214': 'U',
                    '\u0216': 'U',
                    '\u01AF': 'U',
                    '\u1EEA': 'U',
                    '\u1EE8': 'U',
                    '\u1EEE': 'U',
                    '\u1EEC': 'U',
                    '\u1EF0': 'U',
                    '\u1EE4': 'U',
                    '\u1E72': 'U',
                    '\u0172': 'U',
                    '\u1E76': 'U',
                    '\u1E74': 'U',
                    '\u0244': 'U',
                    '\u24CB': 'V',
                    '\uFF36': 'V',
                    '\u1E7C': 'V',
                    '\u1E7E': 'V',
                    '\u01B2': 'V',
                    '\uA75E': 'V',
                    '\u0245': 'V',
                    '\uA760': 'VY',
                    '\u24CC': 'W',
                    '\uFF37': 'W',
                    '\u1E80': 'W',
                    '\u1E82': 'W',
                    '\u0174': 'W',
                    '\u1E86': 'W',
                    '\u1E84': 'W',
                    '\u1E88': 'W',
                    '\u2C72': 'W',
                    '\u24CD': 'X',
                    '\uFF38': 'X',
                    '\u1E8A': 'X',
                    '\u1E8C': 'X',
                    '\u24CE': 'Y',
                    '\uFF39': 'Y',
                    '\u1EF2': 'Y',
                    '\u00DD': 'Y',
                    '\u0176': 'Y',
                    '\u1EF8': 'Y',
                    '\u0232': 'Y',
                    '\u1E8E': 'Y',
                    '\u0178': 'Y',
                    '\u1EF6': 'Y',
                    '\u1EF4': 'Y',
                    '\u01B3': 'Y',
                    '\u024E': 'Y',
                    '\u1EFE': 'Y',
                    '\u24CF': 'Z',
                    '\uFF3A': 'Z',
                    '\u0179': 'Z',
                    '\u1E90': 'Z',
                    '\u017B': 'Z',
                    '\u017D': 'Z',
                    '\u1E92': 'Z',
                    '\u1E94': 'Z',
                    '\u01B5': 'Z',
                    '\u0224': 'Z',
                    '\u2C7F': 'Z',
                    '\u2C6B': 'Z',
                    '\uA762': 'Z',
                    '\u24D0': 'a',
                    '\uFF41': 'a',
                    '\u1E9A': 'a',
                    '\u00E0': 'a',
                    '\u00E1': 'a',
                    '\u00E2': 'a',
                    '\u1EA7': 'a',
                    '\u1EA5': 'a',
                    '\u1EAB': 'a',
                    '\u1EA9': 'a',
                    '\u00E3': 'a',
                    '\u0101': 'a',
                    '\u0103': 'a',
                    '\u1EB1': 'a',
                    '\u1EAF': 'a',
                    '\u1EB5': 'a',
                    '\u1EB3': 'a',
                    '\u0227': 'a',
                    '\u01E1': 'a',
                    '\u00E4': 'a',
                    '\u01DF': 'a',
                    '\u1EA3': 'a',
                    '\u00E5': 'a',
                    '\u01FB': 'a',
                    '\u01CE': 'a',
                    '\u0201': 'a',
                    '\u0203': 'a',
                    '\u1EA1': 'a',
                    '\u1EAD': 'a',
                    '\u1EB7': 'a',
                    '\u1E01': 'a',
                    '\u0105': 'a',
                    '\u2C65': 'a',
                    '\u0250': 'a',
                    '\uA733': 'aa',
                    '\u00E6': 'ae',
                    '\u01FD': 'ae',
                    '\u01E3': 'ae',
                    '\uA735': 'ao',
                    '\uA737': 'au',
                    '\uA739': 'av',
                    '\uA73B': 'av',
                    '\uA73D': 'ay',
                    '\u24D1': 'b',
                    '\uFF42': 'b',
                    '\u1E03': 'b',
                    '\u1E05': 'b',
                    '\u1E07': 'b',
                    '\u0180': 'b',
                    '\u0183': 'b',
                    '\u0253': 'b',
                    '\u24D2': 'c',
                    '\uFF43': 'c',
                    '\u0107': 'c',
                    '\u0109': 'c',
                    '\u010B': 'c',
                    '\u010D': 'c',
                    '\u00E7': 'c',
                    '\u1E09': 'c',
                    '\u0188': 'c',
                    '\u023C': 'c',
                    '\uA73F': 'c',
                    '\u2184': 'c',
                    '\u24D3': 'd',
                    '\uFF44': 'd',
                    '\u1E0B': 'd',
                    '\u010F': 'd',
                    '\u1E0D': 'd',
                    '\u1E11': 'd',
                    '\u1E13': 'd',
                    '\u1E0F': 'd',
                    '\u0111': 'd',
                    '\u018C': 'd',
                    '\u0256': 'd',
                    '\u0257': 'd',
                    '\uA77A': 'd',
                    '\u01F3': 'dz',
                    '\u01C6': 'dz',
                    '\u24D4': 'e',
                    '\uFF45': 'e',
                    '\u00E8': 'e',
                    '\u00E9': 'e',
                    '\u00EA': 'e',
                    '\u1EC1': 'e',
                    '\u1EBF': 'e',
                    '\u1EC5': 'e',
                    '\u1EC3': 'e',
                    '\u1EBD': 'e',
                    '\u0113': 'e',
                    '\u1E15': 'e',
                    '\u1E17': 'e',
                    '\u0115': 'e',
                    '\u0117': 'e',
                    '\u00EB': 'e',
                    '\u1EBB': 'e',
                    '\u011B': 'e',
                    '\u0205': 'e',
                    '\u0207': 'e',
                    '\u1EB9': 'e',
                    '\u1EC7': 'e',
                    '\u0229': 'e',
                    '\u1E1D': 'e',
                    '\u0119': 'e',
                    '\u1E19': 'e',
                    '\u1E1B': 'e',
                    '\u0247': 'e',
                    '\u025B': 'e',
                    '\u01DD': 'e',
                    '\u24D5': 'f',
                    '\uFF46': 'f',
                    '\u1E1F': 'f',
                    '\u0192': 'f',
                    '\uA77C': 'f',
                    '\u24D6': 'g',
                    '\uFF47': 'g',
                    '\u01F5': 'g',
                    '\u011D': 'g',
                    '\u1E21': 'g',
                    '\u011F': 'g',
                    '\u0121': 'g',
                    '\u01E7': 'g',
                    '\u0123': 'g',
                    '\u01E5': 'g',
                    '\u0260': 'g',
                    '\uA7A1': 'g',
                    '\u1D79': 'g',
                    '\uA77F': 'g',
                    '\u24D7': 'h',
                    '\uFF48': 'h',
                    '\u0125': 'h',
                    '\u1E23': 'h',
                    '\u1E27': 'h',
                    '\u021F': 'h',
                    '\u1E25': 'h',
                    '\u1E29': 'h',
                    '\u1E2B': 'h',
                    '\u1E96': 'h',
                    '\u0127': 'h',
                    '\u2C68': 'h',
                    '\u2C76': 'h',
                    '\u0265': 'h',
                    '\u0195': 'hv',
                    '\u24D8': 'i',
                    '\uFF49': 'i',
                    '\u00EC': 'i',
                    '\u00ED': 'i',
                    '\u00EE': 'i',
                    '\u0129': 'i',
                    '\u012B': 'i',
                    '\u012D': 'i',
                    '\u00EF': 'i',
                    '\u1E2F': 'i',
                    '\u1EC9': 'i',
                    '\u01D0': 'i',
                    '\u0209': 'i',
                    '\u020B': 'i',
                    '\u1ECB': 'i',
                    '\u012F': 'i',
                    '\u1E2D': 'i',
                    '\u0268': 'i',
                    '\u0131': 'i',
                    '\u24D9': 'j',
                    '\uFF4A': 'j',
                    '\u0135': 'j',
                    '\u01F0': 'j',
                    '\u0249': 'j',
                    '\u24DA': 'k',
                    '\uFF4B': 'k',
                    '\u1E31': 'k',
                    '\u01E9': 'k',
                    '\u1E33': 'k',
                    '\u0137': 'k',
                    '\u1E35': 'k',
                    '\u0199': 'k',
                    '\u2C6A': 'k',
                    '\uA741': 'k',
                    '\uA743': 'k',
                    '\uA745': 'k',
                    '\uA7A3': 'k',
                    '\u24DB': 'l',
                    '\uFF4C': 'l',
                    '\u0140': 'l',
                    '\u013A': 'l',
                    '\u013E': 'l',
                    '\u1E37': 'l',
                    '\u1E39': 'l',
                    '\u013C': 'l',
                    '\u1E3D': 'l',
                    '\u1E3B': 'l',
                    '\u017F': 'l',
                    '\u0142': 'l',
                    '\u019A': 'l',
                    '\u026B': 'l',
                    '\u2C61': 'l',
                    '\uA749': 'l',
                    '\uA781': 'l',
                    '\uA747': 'l',
                    '\u01C9': 'lj',
                    '\u24DC': 'm',
                    '\uFF4D': 'm',
                    '\u1E3F': 'm',
                    '\u1E41': 'm',
                    '\u1E43': 'm',
                    '\u0271': 'm',
                    '\u026F': 'm',
                    '\u24DD': 'n',
                    '\uFF4E': 'n',
                    '\u01F9': 'n',
                    '\u0144': 'n',
                    '\u00F1': 'n',
                    '\u1E45': 'n',
                    '\u0148': 'n',
                    '\u1E47': 'n',
                    '\u0146': 'n',
                    '\u1E4B': 'n',
                    '\u1E49': 'n',
                    '\u019E': 'n',
                    '\u0272': 'n',
                    '\u0149': 'n',
                    '\uA791': 'n',
                    '\uA7A5': 'n',
                    '\u01CC': 'nj',
                    '\u24DE': 'o',
                    '\uFF4F': 'o',
                    '\u00F2': 'o',
                    '\u00F3': 'o',
                    '\u00F4': 'o',
                    '\u1ED3': 'o',
                    '\u1ED1': 'o',
                    '\u1ED7': 'o',
                    '\u1ED5': 'o',
                    '\u00F5': 'o',
                    '\u1E4D': 'o',
                    '\u022D': 'o',
                    '\u1E4F': 'o',
                    '\u014D': 'o',
                    '\u1E51': 'o',
                    '\u1E53': 'o',
                    '\u014F': 'o',
                    '\u022F': 'o',
                    '\u0231': 'o',
                    '\u00F6': 'o',
                    '\u022B': 'o',
                    '\u1ECF': 'o',
                    '\u0151': 'o',
                    '\u01D2': 'o',
                    '\u020D': 'o',
                    '\u020F': 'o',
                    '\u01A1': 'o',
                    '\u1EDD': 'o',
                    '\u1EDB': 'o',
                    '\u1EE1': 'o',
                    '\u1EDF': 'o',
                    '\u1EE3': 'o',
                    '\u1ECD': 'o',
                    '\u1ED9': 'o',
                    '\u01EB': 'o',
                    '\u01ED': 'o',
                    '\u00F8': 'o',
                    '\u01FF': 'o',
                    '\u0254': 'o',
                    '\uA74B': 'o',
                    '\uA74D': 'o',
                    '\u0275': 'o',
                    '\u0153': 'oe',
                    '\u01A3': 'oi',
                    '\u0223': 'ou',
                    '\uA74F': 'oo',
                    '\u24DF': 'p',
                    '\uFF50': 'p',
                    '\u1E55': 'p',
                    '\u1E57': 'p',
                    '\u01A5': 'p',
                    '\u1D7D': 'p',
                    '\uA751': 'p',
                    '\uA753': 'p',
                    '\uA755': 'p',
                    '\u24E0': 'q',
                    '\uFF51': 'q',
                    '\u024B': 'q',
                    '\uA757': 'q',
                    '\uA759': 'q',
                    '\u24E1': 'r',
                    '\uFF52': 'r',
                    '\u0155': 'r',
                    '\u1E59': 'r',
                    '\u0159': 'r',
                    '\u0211': 'r',
                    '\u0213': 'r',
                    '\u1E5B': 'r',
                    '\u1E5D': 'r',
                    '\u0157': 'r',
                    '\u1E5F': 'r',
                    '\u024D': 'r',
                    '\u027D': 'r',
                    '\uA75B': 'r',
                    '\uA7A7': 'r',
                    '\uA783': 'r',
                    '\u24E2': 's',
                    '\uFF53': 's',
                    '\u00DF': 's',
                    '\u015B': 's',
                    '\u1E65': 's',
                    '\u015D': 's',
                    '\u1E61': 's',
                    '\u0161': 's',
                    '\u1E67': 's',
                    '\u1E63': 's',
                    '\u1E69': 's',
                    '\u0219': 's',
                    '\u015F': 's',
                    '\u023F': 's',
                    '\uA7A9': 's',
                    '\uA785': 's',
                    '\u1E9B': 's',
                    '\u24E3': 't',
                    '\uFF54': 't',
                    '\u1E6B': 't',
                    '\u1E97': 't',
                    '\u0165': 't',
                    '\u1E6D': 't',
                    '\u021B': 't',
                    '\u0163': 't',
                    '\u1E71': 't',
                    '\u1E6F': 't',
                    '\u0167': 't',
                    '\u01AD': 't',
                    '\u0288': 't',
                    '\u2C66': 't',
                    '\uA787': 't',
                    '\uA729': 'tz',
                    '\u24E4': 'u',
                    '\uFF55': 'u',
                    '\u00F9': 'u',
                    '\u00FA': 'u',
                    '\u00FB': 'u',
                    '\u0169': 'u',
                    '\u1E79': 'u',
                    '\u016B': 'u',
                    '\u1E7B': 'u',
                    '\u016D': 'u',
                    '\u00FC': 'u',
                    '\u01DC': 'u',
                    '\u01D8': 'u',
                    '\u01D6': 'u',
                    '\u01DA': 'u',
                    '\u1EE7': 'u',
                    '\u016F': 'u',
                    '\u0171': 'u',
                    '\u01D4': 'u',
                    '\u0215': 'u',
                    '\u0217': 'u',
                    '\u01B0': 'u',
                    '\u1EEB': 'u',
                    '\u1EE9': 'u',
                    '\u1EEF': 'u',
                    '\u1EED': 'u',
                    '\u1EF1': 'u',
                    '\u1EE5': 'u',
                    '\u1E73': 'u',
                    '\u0173': 'u',
                    '\u1E77': 'u',
                    '\u1E75': 'u',
                    '\u0289': 'u',
                    '\u24E5': 'v',
                    '\uFF56': 'v',
                    '\u1E7D': 'v',
                    '\u1E7F': 'v',
                    '\u028B': 'v',
                    '\uA75F': 'v',
                    '\u028C': 'v',
                    '\uA761': 'vy',
                    '\u24E6': 'w',
                    '\uFF57': 'w',
                    '\u1E81': 'w',
                    '\u1E83': 'w',
                    '\u0175': 'w',
                    '\u1E87': 'w',
                    '\u1E85': 'w',
                    '\u1E98': 'w',
                    '\u1E89': 'w',
                    '\u2C73': 'w',
                    '\u24E7': 'x',
                    '\uFF58': 'x',
                    '\u1E8B': 'x',
                    '\u1E8D': 'x',
                    '\u24E8': 'y',
                    '\uFF59': 'y',
                    '\u1EF3': 'y',
                    '\u00FD': 'y',
                    '\u0177': 'y',
                    '\u1EF9': 'y',
                    '\u0233': 'y',
                    '\u1E8F': 'y',
                    '\u00FF': 'y',
                    '\u1EF7': 'y',
                    '\u1E99': 'y',
                    '\u1EF5': 'y',
                    '\u01B4': 'y',
                    '\u024F': 'y',
                    '\u1EFF': 'y',
                    '\u24E9': 'z',
                    '\uFF5A': 'z',
                    '\u017A': 'z',
                    '\u1E91': 'z',
                    '\u017C': 'z',
                    '\u017E': 'z',
                    '\u1E93': 'z',
                    '\u1E95': 'z',
                    '\u01B6': 'z',
                    '\u0225': 'z',
                    '\u0240': 'z',
                    '\u2C6C': 'z',
                    '\uA763': 'z',
                    '\u0386': '\u0391',
                    '\u0388': '\u0395',
                    '\u0389': '\u0397',
                    '\u038A': '\u0399',
                    '\u03AA': '\u0399',
                    '\u038C': '\u039F',
                    '\u038E': '\u03A5',
                    '\u03AB': '\u03A5',
                    '\u038F': '\u03A9',
                    '\u03AC': '\u03B1',
                    '\u03AD': '\u03B5',
                    '\u03AE': '\u03B7',
                    '\u03AF': '\u03B9',
                    '\u03CA': '\u03B9',
                    '\u0390': '\u03B9',
                    '\u03CC': '\u03BF',
                    '\u03CD': '\u03C5',
                    '\u03CB': '\u03C5',
                    '\u03B0': '\u03C5',
                    '\u03CE': '\u03C9',
                    '\u03C2': '\u03C3',
                    '\u2019': '\''
                };

                return diacritics;
            });

            S2.define('select2/data/base', [
                '../utils'
            ], function (Utils) {
                function BaseAdapter($element, options) {
                    BaseAdapter.__super__.constructor.call(this);
                }

                Utils.Extend(BaseAdapter, Utils.Observable);

                BaseAdapter.prototype.current = function (callback) {
                    throw new Error('The `current` method must be defined in child classes.');
                };

                BaseAdapter.prototype.query = function (params, callback) {
                    throw new Error('The `query` method must be defined in child classes.');
                };

                BaseAdapter.prototype.bind = function (container, $container) {
                    // Can be implemented in subclasses
                };

                BaseAdapter.prototype.destroy = function () {
                    // Can be implemented in subclasses
                };

                BaseAdapter.prototype.generateResultId = function (container, data) {
                    var id = container.id + '-result-';

                    id += Utils.generateChars(4);

                    if (data.id != null) {
                        id += '-' + data.id.toString();
                    } else {
                        id += '-' + Utils.generateChars(4);
                    }
                    return id;
                };

                return BaseAdapter;
            });

            S2.define('select2/data/select', [
                './base',
                '../utils',
                'jquery'
            ], function (BaseAdapter, Utils, $) {
                function SelectAdapter($element, options) {
                    this.$element = $element;
                    this.options = options;

                    SelectAdapter.__super__.constructor.call(this);
                }

                Utils.Extend(SelectAdapter, BaseAdapter);

                SelectAdapter.prototype.current = function (callback) {
                    var self = this;

                    var data = Array.prototype.map.call(
                        this.$element[0].querySelectorAll(':checked'),
                        function (selectedElement) {
                            return self.item($(selectedElement));
                        }
                    );

                    callback(data);
                };

                SelectAdapter.prototype.select = function (data) {
                    var self = this;

                    data.selected = true;

                    // If data.element is a DOM node, use it instead
                    if (
                        data.element != null && data.element.tagName.toLowerCase() === 'option'
                    ) {
                        data.element.selected = true;

                        this.$element.trigger('input').trigger('change');

                        return;
                    }

                    if (this.$element.prop('multiple')) {
                        this.current(function (currentData) {
                            var val = [];

                            data = [data];
                            data.push.apply(data, currentData);

                            for (var d = 0; d < data.length; d++) {
                                var id = data[d].id;

                                if (val.indexOf(id) === -1) {
                                    val.push(id);
                                }
                            }

                            self.$element.val(val);
                            self.$element.trigger('input').trigger('change');
                        });
                    } else {
                        var val = data.id;

                        this.$element.val(val);
                        this.$element.trigger('input').trigger('change');
                    }
                };

                SelectAdapter.prototype.unselect = function (data) {
                    var self = this;

                    if (!this.$element.prop('multiple')) {
                        return;
                    }

                    data.selected = false;

                    if (
                        data.element != null &&
                        data.element.tagName.toLowerCase() === 'option'
                    ) {
                        data.element.selected = false;

                        this.$element.trigger('input').trigger('change');

                        return;
                    }

                    this.current(function (currentData) {
                        var val = [];

                        for (var d = 0; d < currentData.length; d++) {
                            var id = currentData[d].id;

                            if (id !== data.id && val.indexOf(id) === -1) {
                                val.push(id);
                            }
                        }

                        self.$element.val(val);

                        self.$element.trigger('input').trigger('change');
                    });
                };

                SelectAdapter.prototype.bind = function (container, $container) {
                    var self = this;

                    this.container = container;

                    container.on('select', function (params) {
                        self.select(params.data);
                    });

                    container.on('unselect', function (params) {
                        self.unselect(params.data);
                    });
                };

                SelectAdapter.prototype.destroy = function () {
                    // Remove anything added to child elements
                    this.$element.find('*').each(function () {
                        // Remove any custom data set by Select2
                        Utils.RemoveData(this);
                    });
                };

                SelectAdapter.prototype.query = function (params, callback) {
                    var data = [];
                    var self = this;

                    var $options = this.$element.children();

                    $options.each(function () {
                        if (
                            this.tagName.toLowerCase() !== 'option' &&
                            this.tagName.toLowerCase() !== 'optgroup'
                        ) {
                            return;
                        }

                        var $option = $(this);

                        var option = self.item($option);

                        var matches = self.matches(params, option);

                        if (matches !== null) {
                            data.push(matches);
                        }
                    });

                    callback({
                        results: data
                    });
                };

                SelectAdapter.prototype.addOptions = function ($options) {
                    this.$element.append($options);
                };

                SelectAdapter.prototype.option = function (data) {
                    var option;

                    if (data.children) {
                        option = document.createElement('optgroup');
                        option.label = data.text;
                    } else {
                        option = document.createElement('option');

                        if (option.textContent !== undefined) {
                            option.textContent = data.text;
                        } else {
                            option.innerText = data.text;
                        }
                    }

                    if (data.id !== undefined) {
                        option.value = data.id;
                    }

                    if (data.disabled) {
                        option.disabled = true;
                    }

                    if (data.selected) {
                        option.selected = true;
                    }

                    if (data.title) {
                        option.title = data.title;
                    }

                    var normalizedData = this._normalizeItem(data);
                    normalizedData.element = option;

                    // Override the option's data with the combined data
                    Utils.StoreData(option, 'data', normalizedData);

                    return $(option);
                };

                SelectAdapter.prototype.item = function ($option) {
                    var data = {};

                    data = Utils.GetData($option[0], 'data');

                    if (data != null) {
                        return data;
                    }

                    var option = $option[0];

                    if (option.tagName.toLowerCase() === 'option') {
                        data = {
                            id: $option.val(),
                            text: $option.text(),
                            disabled: $option.prop('disabled'),
                            selected: $option.prop('selected'),
                            title: $option.prop('title')
                        };
                    } else if (option.tagName.toLowerCase() === 'optgroup') {
                        data = {
                            text: $option.prop('label'),
                            children: [],
                            title: $option.prop('title')
                        };

                        var $children = $option.children('option');
                        var children = [];

                        for (var c = 0; c < $children.length; c++) {
                            var $child = $($children[c]);

                            var child = this.item($child);

                            children.push(child);
                        }

                        data.children = children;
                    }

                    data = this._normalizeItem(data);
                    data.element = $option[0];

                    Utils.StoreData($option[0], 'data', data);

                    return data;
                };

                SelectAdapter.prototype._normalizeItem = function (item) {
                    if (item !== Object(item)) {
                        item = {
                            id: item,
                            text: item
                        };
                    }

                    item = $.extend({}, {
                        text: ''
                    }, item);

                    var defaults = {
                        selected: false,
                        disabled: false
                    };

                    if (item.id != null) {
                        item.id = item.id.toString();
                    }

                    if (item.text != null) {
                        item.text = item.text.toString();
                    }

                    if (item._resultId == null && item.id && this.container != null) {
                        item._resultId = this.generateResultId(this.container, item);
                    }

                    return $.extend({}, defaults, item);
                };

                SelectAdapter.prototype.matches = function (params, data) {
                    var matcher = this.options.get('matcher');

                    return matcher(params, data);
                };

                return SelectAdapter;
            });

            S2.define('select2/data/array', [
                './select',
                '../utils',
                'jquery'
            ], function (SelectAdapter, Utils, $) {
                function ArrayAdapter($element, options) {
                    this._dataToConvert = options.get('data') || [];

                    ArrayAdapter.__super__.constructor.call(this, $element, options);
                }

                Utils.Extend(ArrayAdapter, SelectAdapter);

                ArrayAdapter.prototype.bind = function (container, $container) {
                    ArrayAdapter.__super__.bind.call(this, container, $container);

                    this.addOptions(this.convertToOptions(this._dataToConvert));
                };

                ArrayAdapter.prototype.select = function (data) {
                    var $option = this.$element.find('option').filter(function (i, elm) {
                        return elm.value == data.id.toString();
                    });

                    if ($option.length === 0) {
                        $option = this.option(data);

                        this.addOptions($option);
                    }

                    ArrayAdapter.__super__.select.call(this, data);
                };

                ArrayAdapter.prototype.convertToOptions = function (data) {
                    var self = this;

                    var $existing = this.$element.find('option');
                    var existingIds = $existing.map(function () {
                        return self.item($(this)).id;
                    }).get();

                    var $options = [];

                    // Filter out all items except for the one passed in the argument
                    function onlyItem(item) {
                        return function () {
                            return $(this).val() == item.id;
                        };
                    }

                    for (var d = 0; d < data.length; d++) {
                        var item = this._normalizeItem(data[d]);

                        // Skip items which were pre-loaded, only merge the data
                        if (existingIds.indexOf(item.id) >= 0) {
                            var $existingOption = $existing.filter(onlyItem(item));

                            var existingData = this.item($existingOption);
                            var newData = $.extend(true, {}, item, existingData);

                            var $newOption = this.option(newData);

                            $existingOption.replaceWith($newOption);

                            continue;
                        }

                        var $option = this.option(item);

                        if (item.children) {
                            var $children = this.convertToOptions(item.children);

                            $option.append($children);
                        }

                        $options.push($option);
                    }

                    return $options;
                };

                return ArrayAdapter;
            });

            S2.define('select2/data/ajax', [
                './array',
                '../utils',
                'jquery'
            ], function (ArrayAdapter, Utils, $) {
                function AjaxAdapter($element, options) {
                    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

                    if (this.ajaxOptions.processResults != null) {
                        this.processResults = this.ajaxOptions.processResults;
                    }

                    AjaxAdapter.__super__.constructor.call(this, $element, options);
                }

                Utils.Extend(AjaxAdapter, ArrayAdapter);

                AjaxAdapter.prototype._applyDefaults = function (options) {
                    var defaults = {
                        data: function (params) {
                            return $.extend({}, params, {
                                q: params.term
                            });
                        },
                        transport: function (params, success, failure) {
                            var $request = $.ajax(params);

                            $request.then(success);
                            $request.fail(failure);

                            return $request;
                        }
                    };

                    return $.extend({}, defaults, options, true);
                };

                AjaxAdapter.prototype.processResults = function (results) {
                    return results;
                };

                AjaxAdapter.prototype.query = function (params, callback) {
                    var matches = [];
                    var self = this;

                    if (this._request != null) {
                        // JSONP requests cannot always be aborted
                        if (typeof this._request.abort === 'function') {
                            this._request.abort();
                        }

                        this._request = null;
                    }

                    var options = $.extend({
                        type: 'GET'
                    }, this.ajaxOptions);

                    if (typeof options.url === 'function') {
                        options.url = options.url.call(this.$element, params);
                    }

                    if (typeof options.data === 'function') {
                        options.data = options.data.call(this.$element, params);
                    }

                    function request() {
                        var $request = options.transport(options, function (data) {
                            var results = self.processResults(data, params);

                            if (self.options.get('debug') && window.console && console.error) {
                                // Check to make sure that the response included a `results` key.
                                if (!results || !results.results || !Array.isArray(results.results)) {
                                    console.error(
                                        'Select2: The AJAX results did not return an array in the ' +
                                        '`results` key of the response.'
                                    );
                                }
                            }

                            callback(results);
                        }, function () {
                            // Attempt to detect if a request was aborted
                            // Only works if the transport exposes a status property
                            if ('status' in $request &&
                                ($request.status === 0 || $request.status === '0')) {
                                return;
                            }

                            self.trigger('results:message', {
                                message: 'errorLoading'
                            });
                        });

                        self._request = $request;
                    }

                    if (this.ajaxOptions.delay && params.term != null) {
                        if (this._queryTimeout) {
                            window.clearTimeout(this._queryTimeout);
                        }

                        this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
                    } else {
                        request();
                    }
                };

                return AjaxAdapter;
            });

            S2.define('select2/data/tags', [
                'jquery'
            ], function ($) {
                function Tags(decorated, $element, options) {
                    var tags = options.get('tags');

                    var createTag = options.get('createTag');

                    if (createTag !== undefined) {
                        this.createTag = createTag;
                    }

                    var insertTag = options.get('insertTag');

                    if (insertTag !== undefined) {
                        this.insertTag = insertTag;
                    }

                    decorated.call(this, $element, options);

                    if (Array.isArray(tags)) {
                        for (var t = 0; t < tags.length; t++) {
                            var tag = tags[t];
                            var item = this._normalizeItem(tag);

                            var $option = this.option(item);

                            this.$element.append($option);
                        }
                    }
                }

                Tags.prototype.query = function (decorated, params, callback) {
                    var self = this;

                    this._removeOldTags();

                    if (params.term == null || params.page != null) {
                        decorated.call(this, params, callback);
                        return;
                    }

                    function wrapper(obj, child) {
                        var data = obj.results;

                        for (var i = 0; i < data.length; i++) {
                            var option = data[i];

                            var checkChildren = (
                                option.children != null &&
                                !wrapper({
                                    results: option.children
                                }, true)
                            );

                            var optionText = (option.text || '').toUpperCase();
                            var paramsTerm = (params.term || '').toUpperCase();

                            var checkText = optionText === paramsTerm;

                            if (checkText || checkChildren) {
                                if (child) {
                                    return false;
                                }

                                obj.data = data;
                                callback(obj);

                                return;
                            }
                        }

                        if (child) {
                            return true;
                        }

                        var tag = self.createTag(params);

                        if (tag != null) {
                            var $option = self.option(tag);
                            $option.attr('data-select2-tag', 'true');

                            self.addOptions([$option]);

                            self.insertTag(data, tag);
                        }

                        obj.results = data;

                        callback(obj);
                    }

                    decorated.call(this, params, wrapper);
                };

                Tags.prototype.createTag = function (decorated, params) {
                    if (params.term == null) {
                        return null;
                    }

                    var term = params.term.trim();

                    if (term === '') {
                        return null;
                    }

                    return {
                        id: term,
                        text: term
                    };
                };

                Tags.prototype.insertTag = function (_, data, tag) {
                    data.unshift(tag);
                };

                Tags.prototype._removeOldTags = function (_) {
                    var $options = this.$element.find('option[data-select2-tag]');

                    $options.each(function () {
                        if (this.selected) {
                            return;
                        }

                        $(this).remove();
                    });
                };

                return Tags;
            });

            S2.define('select2/data/tokenizer', [
                'jquery'
            ], function ($) {
                function Tokenizer(decorated, $element, options) {
                    var tokenizer = options.get('tokenizer');

                    if (tokenizer !== undefined) {
                        this.tokenizer = tokenizer;
                    }

                    decorated.call(this, $element, options);
                }

                Tokenizer.prototype.bind = function (decorated, container, $container) {
                    decorated.call(this, container, $container);

                    this.$search = container.dropdown.$search || container.selection.$search ||
                        $container.find('.select2-search__field');
                };

                Tokenizer.prototype.query = function (decorated, params, callback) {
                    var self = this;

                    function createAndSelect(data) {
                        // Normalize the data object so we can use it for checks
                        var item = self._normalizeItem(data);

                        // Check if the data object already exists as a tag
                        // Select it if it doesn't
                        var $existingOptions = self.$element.find('option').filter(function () {
                            return $(this).val() === item.id;
                        });

                        // If an existing option wasn't found for it, create the option
                        if (!$existingOptions.length) {
                            var $option = self.option(item);
                            $option.attr('data-select2-tag', true);

                            self._removeOldTags();
                            self.addOptions([$option]);
                        }

                        // Select the item, now that we know there is an option for it
                        select(item);
                    }

                    function select(data) {
                        self.trigger('select', {
                            data: data
                        });
                    }

                    params.term = params.term || '';

                    var tokenData = this.tokenizer(params, this.options, createAndSelect);

                    if (tokenData.term !== params.term) {
                        // Replace the search term if we have the search box
                        if (this.$search.length) {
                            this.$search.val(tokenData.term);
                            this.$search.trigger('focus');
                        }

                        params.term = tokenData.term;
                    }

                    decorated.call(this, params, callback);
                };

                Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
                    var separators = options.get('tokenSeparators') || [];
                    var term = params.term;
                    var i = 0;

                    var createTag = this.createTag || function (params) {
                        return {
                            id: params.term,
                            text: params.term
                        };
                    };

                    while (i < term.length) {
                        var termChar = term[i];

                        if (separators.indexOf(termChar) === -1) {
                            i++;

                            continue;
                        }

                        var part = term.substr(0, i);
                        var partParams = $.extend({}, params, {
                            term: part
                        });

                        var data = createTag(partParams);

                        if (data == null) {
                            i++;
                            continue;
                        }

                        callback(data);

                        // Reset the term to not include the tokenized portion
                        term = term.substr(i + 1) || '';
                        i = 0;
                    }

                    return {
                        term: term
                    };
                };

                return Tokenizer;
            });

            S2.define('select2/data/minimumInputLength', [

            ], function () {
                function MinimumInputLength(decorated, $e, options) {
                    this.minimumInputLength = options.get('minimumInputLength');

                    decorated.call(this, $e, options);
                }

                MinimumInputLength.prototype.query = function (decorated, params, callback) {
                    params.term = params.term || '';

                    if (params.term.length < this.minimumInputLength) {
                        this.trigger('results:message', {
                            message: 'inputTooShort',
                            args: {
                                minimum: this.minimumInputLength,
                                input: params.term,
                                params: params
                            }
                        });

                        return;
                    }

                    decorated.call(this, params, callback);
                };

                return MinimumInputLength;
            });

            S2.define('select2/data/maximumInputLength', [

            ], function () {
                function MaximumInputLength(decorated, $e, options) {
                    this.maximumInputLength = options.get('maximumInputLength');

                    decorated.call(this, $e, options);
                }

                MaximumInputLength.prototype.query = function (decorated, params, callback) {
                    params.term = params.term || '';

                    if (this.maximumInputLength > 0 &&
                        params.term.length > this.maximumInputLength) {
                        this.trigger('results:message', {
                            message: 'inputTooLong',
                            args: {
                                maximum: this.maximumInputLength,
                                input: params.term,
                                params: params
                            }
                        });

                        return;
                    }

                    decorated.call(this, params, callback);
                };

                return MaximumInputLength;
            });

            S2.define('select2/data/maximumSelectionLength', [

            ], function () {
                function MaximumSelectionLength(decorated, $e, options) {
                    this.maximumSelectionLength = options.get('maximumSelectionLength');

                    decorated.call(this, $e, options);
                }

                MaximumSelectionLength.prototype.bind =
                    function (decorated, container, $container) {
                        var self = this;

                        decorated.call(this, container, $container);

                        container.on('select', function () {
                            self._checkIfMaximumSelected();
                        });
                    };

                MaximumSelectionLength.prototype.query =
                    function (decorated, params, callback) {
                        var self = this;

                        this._checkIfMaximumSelected(function () {
                            decorated.call(self, params, callback);
                        });
                    };

                MaximumSelectionLength.prototype._checkIfMaximumSelected =
                    function (_, successCallback) {
                        var self = this;

                        this.current(function (currentData) {
                            var count = currentData != null ? currentData.length : 0;
                            if (self.maximumSelectionLength > 0 &&
                                count >= self.maximumSelectionLength) {
                                self.trigger('results:message', {
                                    message: 'maximumSelected',
                                    args: {
                                        maximum: self.maximumSelectionLength
                                    }
                                });
                                return;
                            }

                            if (successCallback) {
                                successCallback();
                            }
                        });
                    };

                return MaximumSelectionLength;
            });

            S2.define('select2/dropdown', [
                'jquery',
                './utils'
            ], function ($, Utils) {
                function Dropdown($element, options) {
                    this.$element = $element;
                    this.options = options;

                    Dropdown.__super__.constructor.call(this);
                }

                Utils.Extend(Dropdown, Utils.Observable);

                Dropdown.prototype.render = function () {
                    var $dropdown = $(
                        '<span class="select2-dropdown">' +
                        '<span class="select2-results"></span>' +
                        '</span>'
                    );

                    $dropdown.attr('dir', this.options.get('dir'));

                    this.$dropdown = $dropdown;

                    return $dropdown;
                };

                Dropdown.prototype.bind = function () {
                    // Should be implemented in subclasses
                };

                Dropdown.prototype.position = function ($dropdown, $container) {
                    // Should be implemented in subclasses
                };

                Dropdown.prototype.destroy = function () {
                    // Remove the dropdown from the DOM
                    this.$dropdown.remove();
                };

                return Dropdown;
            });

            S2.define('select2/dropdown/search', [
                'jquery'
            ], function ($) {
                function Search() { }

                Search.prototype.render = function (decorated) {
                    var $rendered = decorated.call(this);
                    var searchLabel = this.options.get('translations').get('search');

                    var $search = $(
                        '<span class="select2-search select2-search--dropdown">' +
                        '<input class="select2-search__field" type="search" tabindex="-1"' +
                        ' autocorrect="off" autocapitalize="none"' +
                        ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
                        '</span>'
                    );

                    this.$searchContainer = $search;
                    this.$search = $search.find('input');

                    this.$search.prop('autocomplete', this.options.get('autocomplete'));
                    this.$search.attr('aria-label', searchLabel());

                    $rendered.prepend($search);

                    return $rendered;
                };

                Search.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    var resultsId = container.id + '-results';

                    decorated.call(this, container, $container);

                    this.$search.on('keydown', function (evt) {
                        self.trigger('keypress', evt);

                        self._keyUpPrevented = evt.isDefaultPrevented();
                    });

                    // Workaround for browsers which do not support the `input` event
                    // This will prevent double-triggering of events for browsers which support
                    // both the `keyup` and `input` events.
                    this.$search.on('input', function (evt) {
                        // Unbind the duplicated `keyup` event
                        $(this).off('keyup');
                    });

                    this.$search.on('keyup input', function (evt) {
                        self.handleSearch(evt);
                    });

                    container.on('open', function () {
                        self.$search.attr('tabindex', 0);
                        self.$search.attr('aria-controls', resultsId);

                        self.$search.trigger('focus');

                        window.setTimeout(function () {
                            self.$search.trigger('focus');
                        }, 0);
                    });

                    container.on('close', function () {
                        self.$search.attr('tabindex', -1);
                        self.$search.removeAttr('aria-controls');
                        self.$search.removeAttr('aria-activedescendant');

                        self.$search.val('');
                        self.$search.trigger('blur');
                    });

                    container.on('focus', function () {
                        if (!container.isOpen()) {
                            self.$search.trigger('focus');
                        }
                    });

                    container.on('results:all', function (params) {
                        if (params.query.term == null || params.query.term === '') {
                            var showSearch = self.showSearch(params);

                            if (showSearch) {
                                self.$searchContainer[0].classList.remove('select2-search--hide');
                            } else {
                                self.$searchContainer[0].classList.add('select2-search--hide');
                            }
                        }
                    });

                    container.on('results:focus', function (params) {
                        if (params.data._resultId) {
                            self.$search.attr('aria-activedescendant', params.data._resultId);
                        } else {
                            self.$search.removeAttr('aria-activedescendant');
                        }
                    });
                };

                Search.prototype.handleSearch = function (evt) {
                    if (!this._keyUpPrevented) {
                        var input = this.$search.val();

                        this.trigger('query', {
                            term: input
                        });
                    }

                    this._keyUpPrevented = false;
                };

                Search.prototype.showSearch = function (_, params) {
                    return true;
                };

                return Search;
            });

            S2.define('select2/dropdown/hidePlaceholder', [

            ], function () {
                function HidePlaceholder(decorated, $element, options, dataAdapter) {
                    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

                    decorated.call(this, $element, options, dataAdapter);
                }

                HidePlaceholder.prototype.append = function (decorated, data) {
                    data.results = this.removePlaceholder(data.results);

                    decorated.call(this, data);
                };

                HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
                    if (typeof placeholder === 'string') {
                        placeholder = {
                            id: '',
                            text: placeholder
                        };
                    }

                    return placeholder;
                };

                HidePlaceholder.prototype.removePlaceholder = function (_, data) {
                    var modifiedData = data.slice(0);

                    for (var d = data.length - 1; d >= 0; d--) {
                        var item = data[d];

                        if (this.placeholder.id === item.id) {
                            modifiedData.splice(d, 1);
                        }
                    }

                    return modifiedData;
                };

                return HidePlaceholder;
            });

            S2.define('select2/dropdown/infiniteScroll', [
                'jquery'
            ], function ($) {
                function InfiniteScroll(decorated, $element, options, dataAdapter) {
                    this.lastParams = {};

                    decorated.call(this, $element, options, dataAdapter);

                    this.$loadingMore = this.createLoadingMore();
                    this.loading = false;
                }

                InfiniteScroll.prototype.append = function (decorated, data) {
                    this.$loadingMore.remove();
                    this.loading = false;

                    decorated.call(this, data);

                    if (this.showLoadingMore(data)) {
                        this.$results.append(this.$loadingMore);
                        this.loadMoreIfNeeded();
                    }
                };

                InfiniteScroll.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    decorated.call(this, container, $container);

                    container.on('query', function (params) {
                        self.lastParams = params;
                        self.loading = true;
                    });

                    container.on('query:append', function (params) {
                        self.lastParams = params;
                        self.loading = true;
                    });

                    this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));
                };

                InfiniteScroll.prototype.loadMoreIfNeeded = function () {
                    var isLoadMoreVisible = $.contains(
                        document.documentElement,
                        this.$loadingMore[0]
                    );

                    if (this.loading || !isLoadMoreVisible) {
                        return;
                    }

                    var currentOffset = this.$results.offset().top +
                        this.$results.outerHeight(false);
                    var loadingMoreOffset = this.$loadingMore.offset().top +
                        this.$loadingMore.outerHeight(false);

                    if (currentOffset + 50 >= loadingMoreOffset) {
                        this.loadMore();
                    }
                };

                InfiniteScroll.prototype.loadMore = function () {
                    this.loading = true;

                    var params = $.extend({}, { page: 1 }, this.lastParams);

                    params.page++;

                    this.trigger('query:append', params);
                };

                InfiniteScroll.prototype.showLoadingMore = function (_, data) {
                    return data.pagination && data.pagination.more;
                };

                InfiniteScroll.prototype.createLoadingMore = function () {
                    var $option = $(
                        '<li ' +
                        'class="select2-results__option select2-results__option--load-more"' +
                        'role="option" aria-disabled="true"></li>'
                    );

                    var message = this.options.get('translations').get('loadingMore');

                    $option.html(message(this.lastParams));

                    return $option;
                };

                return InfiniteScroll;
            });

            S2.define('select2/dropdown/attachBody', [
                'jquery',
                '../utils'
            ], function ($, Utils) {
                function AttachBody(decorated, $element, options) {
                    this.$dropdownParent = $(options.get('dropdownParent') || document.body);

                    decorated.call(this, $element, options);
                }

                AttachBody.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    decorated.call(this, container, $container);

                    container.on('open', function () {
                        self._showDropdown();
                        self._attachPositioningHandler(container);

                        // Must bind after the results handlers to ensure correct sizing
                        self._bindContainerResultHandlers(container);
                    });

                    container.on('close', function () {
                        self._hideDropdown();
                        self._detachPositioningHandler(container);
                    });

                    this.$dropdownContainer.on('mousedown', function (evt) {
                        evt.stopPropagation();
                    });
                };

                AttachBody.prototype.destroy = function (decorated) {
                    decorated.call(this);

                    this.$dropdownContainer.remove();
                };

                AttachBody.prototype.position = function (decorated, $dropdown, $container) {
                    // Clone all of the container classes
                    $dropdown.attr('class', $container.attr('class'));

                    $dropdown[0].classList.remove('select2');
                    $dropdown[0].classList.add('select2-container--open');

                    $dropdown.css({
                        position: 'absolute',
                        top: -999999
                    });

                    this.$container = $container;
                };

                AttachBody.prototype.render = function (decorated) {
                    var $container = $('<span></span>');

                    var $dropdown = decorated.call(this);
                    $container.append($dropdown);

                    this.$dropdownContainer = $container;

                    return $container;
                };

                AttachBody.prototype._hideDropdown = function (decorated) {
                    this.$dropdownContainer.detach();
                };

                AttachBody.prototype._bindContainerResultHandlers =
                    function (decorated, container) {

                        // These should only be bound once
                        if (this._containerResultsHandlersBound) {
                            return;
                        }

                        var self = this;

                        container.on('results:all', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        container.on('results:append', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        container.on('results:message', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        container.on('select', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        container.on('unselect', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        this._containerResultsHandlersBound = true;
                    };

                AttachBody.prototype._attachPositioningHandler =
                    function (decorated, container) {
                        var self = this;

                        var scrollEvent = 'scroll.select2.' + container.id;
                        var resizeEvent = 'resize.select2.' + container.id;
                        var orientationEvent = 'orientationchange.select2.' + container.id;

                        var $watchers = this.$container.parents().filter(Utils.hasScroll);
                        $watchers.each(function () {
                            Utils.StoreData(this, 'select2-scroll-position', {
                                x: $(this).scrollLeft(),
                                y: $(this).scrollTop()
                            });
                        });

                        $watchers.on(scrollEvent, function (ev) {
                            var position = Utils.GetData(this, 'select2-scroll-position');
                            $(this).scrollTop(position.y);
                        });

                        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
                            function (e) {
                                self._positionDropdown();
                                self._resizeDropdown();
                            });
                    };

                AttachBody.prototype._detachPositioningHandler =
                    function (decorated, container) {
                        var scrollEvent = 'scroll.select2.' + container.id;
                        var resizeEvent = 'resize.select2.' + container.id;
                        var orientationEvent = 'orientationchange.select2.' + container.id;

                        var $watchers = this.$container.parents().filter(Utils.hasScroll);
                        $watchers.off(scrollEvent);

                        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
                    };

                AttachBody.prototype._positionDropdown = function () {
                    var $window = $(window);

                    var isCurrentlyAbove = this.$dropdown[0].classList
                        .contains('select2-dropdown--above');
                    var isCurrentlyBelow = this.$dropdown[0].classList
                        .contains('select2-dropdown--below');

                    var newDirection = null;

                    var offset = this.$container.offset();

                    offset.bottom = offset.top + this.$container.outerHeight(false);

                    var container = {
                        height: this.$container.outerHeight(false)
                    };

                    container.top = offset.top;
                    container.bottom = offset.top + container.height;

                    var dropdown = {
                        height: this.$dropdown.outerHeight(false)
                    };

                    var viewport = {
                        top: $window.scrollTop(),
                        bottom: $window.scrollTop() + $window.height()
                    };

                    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
                    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

                    var css = {
                        left: offset.left,
                        top: container.bottom
                    };

                    // Determine what the parent element is to use for calculating the offset
                    var $offsetParent = this.$dropdownParent;

                    // For statically positioned elements, we need to get the element
                    // that is determining the offset
                    if ($offsetParent.css('position') === 'static') {
                        $offsetParent = $offsetParent.offsetParent();
                    }

                    var parentOffset = {
                        top: 0,
                        left: 0
                    };

                    if (
                        $.contains(document.body, $offsetParent[0]) ||
                        $offsetParent[0].isConnected
                    ) {
                        parentOffset = $offsetParent.offset();
                    }

                    css.top -= parentOffset.top;
                    css.left -= parentOffset.left;

                    if (!isCurrentlyAbove && !isCurrentlyBelow) {
                        newDirection = 'below';
                    }

                    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
                        newDirection = 'above';
                    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
                        newDirection = 'below';
                    }

                    if (newDirection == 'above' ||
                        (isCurrentlyAbove && newDirection !== 'below')) {
                        css.top = container.top - parentOffset.top - dropdown.height;
                    }

                    if (newDirection != null) {
                        this.$dropdown[0].classList.remove('select2-dropdown--below');
                        this.$dropdown[0].classList.remove('select2-dropdown--above');
                        this.$dropdown[0].classList.add('select2-dropdown--' + newDirection);

                        this.$container[0].classList.remove('select2-container--below');
                        this.$container[0].classList.remove('select2-container--above');
                        this.$container[0].classList.add('select2-container--' + newDirection);
                    }

                    this.$dropdownContainer.css(css);
                };

                AttachBody.prototype._resizeDropdown = function () {
                    var css = {
                        width: this.$container.outerWidth(false) + 'px'
                    };

                    if (this.options.get('dropdownAutoWidth')) {
                        css.minWidth = css.width;
                        css.position = 'relative';
                        css.width = 'auto';
                    }

                    this.$dropdown.css(css);
                };

                AttachBody.prototype._showDropdown = function (decorated) {
                    this.$dropdownContainer.appendTo(this.$dropdownParent);

                    this._positionDropdown();
                    this._resizeDropdown();
                };

                return AttachBody;
            });

            S2.define('select2/dropdown/minimumResultsForSearch', [

            ], function () {
                function countResults(data) {
                    var count = 0;

                    for (var d = 0; d < data.length; d++) {
                        var item = data[d];

                        if (item.children) {
                            count += countResults(item.children);
                        } else {
                            count++;
                        }
                    }

                    return count;
                }

                function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
                    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

                    if (this.minimumResultsForSearch < 0) {
                        this.minimumResultsForSearch = Infinity;
                    }

                    decorated.call(this, $element, options, dataAdapter);
                }

                MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
                    if (countResults(params.data.results) < this.minimumResultsForSearch) {
                        return false;
                    }

                    return decorated.call(this, params);
                };

                return MinimumResultsForSearch;
            });

            S2.define('select2/dropdown/selectOnClose', [
                '../utils'
            ], function (Utils) {
                function SelectOnClose() { }

                SelectOnClose.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    decorated.call(this, container, $container);

                    container.on('close', function (params) {
                        self._handleSelectOnClose(params);
                    });
                };

                SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
                    if (params && params.originalSelect2Event != null) {
                        var event = params.originalSelect2Event;

                        // Don't select an item if the close event was triggered from a select or
                        // unselect event
                        if (event._type === 'select' || event._type === 'unselect') {
                            return;
                        }
                    }

                    var $highlightedResults = this.getHighlightedResults();

                    // Only select highlighted results
                    if ($highlightedResults.length < 1) {
                        return;
                    }

                    var data = Utils.GetData($highlightedResults[0], 'data');

                    // Don't re-select already selected resulte
                    if (
                        (data.element != null && data.element.selected) ||
                        (data.element == null && data.selected)
                    ) {
                        return;
                    }

                    this.trigger('select', {
                        data: data
                    });
                };

                return SelectOnClose;
            });

            S2.define('select2/dropdown/closeOnSelect', [

            ], function () {
                function CloseOnSelect() { }

                CloseOnSelect.prototype.bind = function (decorated, container, $container) {
                    var self = this;

                    decorated.call(this, container, $container);

                    container.on('select', function (evt) {
                        self._selectTriggered(evt);
                    });

                    container.on('unselect', function (evt) {
                        self._selectTriggered(evt);
                    });
                };

                CloseOnSelect.prototype._selectTriggered = function (_, evt) {
                    var originalEvent = evt.originalEvent;

                    // Don't close if the control key is being held
                    if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {
                        return;
                    }

                    this.trigger('close', {
                        originalEvent: originalEvent,
                        originalSelect2Event: evt
                    });
                };

                return CloseOnSelect;
            });

            S2.define('select2/dropdown/dropdownCss', [
                '../utils'
            ], function (Utils) {
                function DropdownCSS() { }

                DropdownCSS.prototype.render = function (decorated) {
                    var $dropdown = decorated.call(this);

                    var dropdownCssClass = this.options.get('dropdownCssClass') || '';

                    if (dropdownCssClass.indexOf(':all:') !== -1) {
                        dropdownCssClass = dropdownCssClass.replace(':all:', '');

                        Utils.copyNonInternalCssClasses($dropdown[0], this.$element[0]);
                    }

                    $dropdown.addClass(dropdownCssClass);

                    return $dropdown;
                };

                return DropdownCSS;
            });

            S2.define('select2/dropdown/tagsSearchHighlight', [
                '../utils'
            ], function (Utils) {
                function TagsSearchHighlight() { }

                TagsSearchHighlight.prototype.highlightFirstItem = function (decorated) {
                    var $options = this.$results
                        .find(
                            '.select2-results__option--selectable' +
                            ':not(.select2-results__option--selected)'
                        );

                    if ($options.length > 0) {
                        var $firstOption = $options.first();
                        var data = Utils.GetData($firstOption[0], 'data');
                        var firstElement = data.element;

                        if (firstElement && firstElement.getAttribute) {
                            if (firstElement.getAttribute('data-select2-tag') === 'true') {
                                $firstOption.trigger('mouseenter');

                                return;
                            }
                        }
                    }

                    decorated.call(this);
                };

                return TagsSearchHighlight;
            });

            S2.define('select2/i18n/en', [], function () {
                // English
                return {
                    errorLoading: function () {
                        return 'The results could not be loaded.';
                    },
                    inputTooLong: function (args) {
                        var overChars = args.input.length - args.maximum;

                        var message = 'Please delete ' + overChars + ' character';

                        if (overChars != 1) {
                            message += 's';
                        }

                        return message;
                    },
                    inputTooShort: function (args) {
                        var remainingChars = args.minimum - args.input.length;

                        var message = 'Please enter ' + remainingChars + ' or more characters';

                        return message;
                    },
                    loadingMore: function () {
                        return 'Loading more results…';
                    },
                    maximumSelected: function (args) {
                        var message = 'You can only select ' + args.maximum + ' item';

                        if (args.maximum != 1) {
                            message += 's';
                        }

                        return message;
                    },
                    noResults: function () {
                        return 'No results found';
                    },
                    searching: function () {
                        return 'Searching…';
                    },
                    removeAllItems: function () {
                        return 'Remove all items';
                    },
                    removeItem: function () {
                        return 'Remove item';
                    },
                    search: function () {
                        return 'Search';
                    }
                };
            });

            S2.define('select2/defaults', [
                'jquery',

                './results',

                './selection/single',
                './selection/multiple',
                './selection/placeholder',
                './selection/allowClear',
                './selection/search',
                './selection/selectionCss',
                './selection/eventRelay',

                './utils',
                './translation',
                './diacritics',

                './data/select',
                './data/array',
                './data/ajax',
                './data/tags',
                './data/tokenizer',
                './data/minimumInputLength',
                './data/maximumInputLength',
                './data/maximumSelectionLength',

                './dropdown',
                './dropdown/search',
                './dropdown/hidePlaceholder',
                './dropdown/infiniteScroll',
                './dropdown/attachBody',
                './dropdown/minimumResultsForSearch',
                './dropdown/selectOnClose',
                './dropdown/closeOnSelect',
                './dropdown/dropdownCss',
                './dropdown/tagsSearchHighlight',

                './i18n/en'
            ], function ($,

                ResultsList,

                SingleSelection, MultipleSelection, Placeholder, AllowClear,
                SelectionSearch, SelectionCSS, EventRelay,

                Utils, Translation, DIACRITICS,

                SelectData, ArrayData, AjaxData, Tags, Tokenizer,
                MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

                Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
                AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,
                DropdownCSS, TagsSearchHighlight,

                EnglishTranslation) {
                function Defaults() {
                    this.reset();
                }

                Defaults.prototype.apply = function (options) {
                    options = $.extend(true, {}, this.defaults, options);

                    if (options.dataAdapter == null) {
                        if (options.ajax != null) {
                            options.dataAdapter = AjaxData;
                        } else if (options.data != null) {
                            options.dataAdapter = ArrayData;
                        } else {
                            options.dataAdapter = SelectData;
                        }

                        if (options.minimumInputLength > 0) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                MinimumInputLength
                            );
                        }

                        if (options.maximumInputLength > 0) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                MaximumInputLength
                            );
                        }

                        if (options.maximumSelectionLength > 0) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                MaximumSelectionLength
                            );
                        }

                        if (options.tags) {
                            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
                        }

                        if (options.tokenSeparators != null || options.tokenizer != null) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                Tokenizer
                            );
                        }
                    }

                    if (options.resultsAdapter == null) {
                        options.resultsAdapter = ResultsList;

                        if (options.ajax != null) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                InfiniteScroll
                            );
                        }

                        if (options.placeholder != null) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                HidePlaceholder
                            );
                        }

                        if (options.selectOnClose) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                SelectOnClose
                            );
                        }

                        if (options.tags) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                TagsSearchHighlight
                            );
                        }
                    }

                    if (options.dropdownAdapter == null) {
                        if (options.multiple) {
                            options.dropdownAdapter = Dropdown;
                        } else {
                            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

                            options.dropdownAdapter = SearchableDropdown;
                        }

                        if (options.minimumResultsForSearch !== 0) {
                            options.dropdownAdapter = Utils.Decorate(
                                options.dropdownAdapter,
                                MinimumResultsForSearch
                            );
                        }

                        if (options.closeOnSelect) {
                            options.dropdownAdapter = Utils.Decorate(
                                options.dropdownAdapter,
                                CloseOnSelect
                            );
                        }

                        if (options.dropdownCssClass != null) {
                            options.dropdownAdapter = Utils.Decorate(
                                options.dropdownAdapter,
                                DropdownCSS
                            );
                        }

                        options.dropdownAdapter = Utils.Decorate(
                            options.dropdownAdapter,
                            AttachBody
                        );
                    }

                    if (options.selectionAdapter == null) {
                        if (options.multiple) {
                            options.selectionAdapter = MultipleSelection;
                        } else {
                            options.selectionAdapter = SingleSelection;
                        }

                        // Add the placeholder mixin if a placeholder was specified
                        if (options.placeholder != null) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                Placeholder
                            );
                        }

                        if (options.allowClear) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                AllowClear
                            );
                        }

                        if (options.multiple) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                SelectionSearch
                            );
                        }

                        if (options.selectionCssClass != null) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                SelectionCSS
                            );
                        }

                        options.selectionAdapter = Utils.Decorate(
                            options.selectionAdapter,
                            EventRelay
                        );
                    }

                    // If the defaults were not previously applied from an element, it is
                    // possible for the language option to have not been resolved
                    options.language = this._resolveLanguage(options.language);

                    // Always fall back to English since it will always be complete
                    options.language.push('en');

                    var uniqueLanguages = [];

                    for (var l = 0; l < options.language.length; l++) {
                        var language = options.language[l];

                        if (uniqueLanguages.indexOf(language) === -1) {
                            uniqueLanguages.push(language);
                        }
                    }

                    options.language = uniqueLanguages;

                    options.translations = this._processTranslations(
                        options.language,
                        options.debug
                    );

                    return options;
                };

                Defaults.prototype.reset = function () {
                    function stripDiacritics(text) {
                        // Used 'uni range + named function' from http://jsperf.com/diacritics/18
                        function match(a) {
                            return DIACRITICS[a] || a;
                        }

                        return text.replace(/[^\u0000-\u007E]/g, match);
                    }

                    function matcher(params, data) {
                        // Always return the object if there is nothing to compare
                        if (params.term == null || params.term.trim() === '') {
                            return data;
                        }

                        // Do a recursive check for options with children
                        if (data.children && data.children.length > 0) {
                            // Clone the data object if there are children
                            // This is required as we modify the object to remove any non-matches
                            var match = $.extend(true, {}, data);

                            // Check each child of the option
                            for (var c = data.children.length - 1; c >= 0; c--) {
                                var child = data.children[c];

                                var matches = matcher(params, child);

                                // If there wasn't a match, remove the object in the array
                                if (matches == null) {
                                    match.children.splice(c, 1);
                                }
                            }

                            // If any children matched, return the new object
                            if (match.children.length > 0) {
                                return match;
                            }

                            // If there were no matching children, check just the plain object
                            return matcher(params, match);
                        }

                        var original = stripDiacritics(data.text).toUpperCase();
                        var term = stripDiacritics(params.term).toUpperCase();

                        // Check if the text contains the term
                        if (original.indexOf(term) > -1) {
                            return data;
                        }

                        // If it doesn't contain the term, don't return anything
                        return null;
                    }

                    this.defaults = {
                        amdLanguageBase: './i18n/',
                        autocomplete: 'off',
                        closeOnSelect: true,
                        debug: false,
                        dropdownAutoWidth: false,
                        escapeMarkup: Utils.escapeMarkup,
                        language: {},
                        matcher: matcher,
                        minimumInputLength: 0,
                        maximumInputLength: 0,
                        maximumSelectionLength: 0,
                        minimumResultsForSearch: 0,
                        selectOnClose: false,
                        scrollAfterSelect: false,
                        sorter: function (data) {
                            return data;
                        },
                        templateResult: function (result) {
                            return result.text;
                        },
                        templateSelection: function (selection) {
                            return selection.text;
                        },
                        theme: 'default',
                        width: 'resolve'
                    };
                };

                Defaults.prototype.applyFromElement = function (options, $element) {
                    var optionLanguage = options.language;
                    var defaultLanguage = this.defaults.language;
                    var elementLanguage = $element.prop('lang');
                    var parentLanguage = $element.closest('[lang]').prop('lang');

                    var languages = Array.prototype.concat.call(
                        this._resolveLanguage(elementLanguage),
                        this._resolveLanguage(optionLanguage),
                        this._resolveLanguage(defaultLanguage),
                        this._resolveLanguage(parentLanguage)
                    );

                    options.language = languages;

                    return options;
                };

                Defaults.prototype._resolveLanguage = function (language) {
                    if (!language) {
                        return [];
                    }

                    if ($.isEmptyObject(language)) {
                        return [];
                    }

                    if ($.isPlainObject(language)) {
                        return [language];
                    }

                    var languages;

                    if (!Array.isArray(language)) {
                        languages = [language];
                    } else {
                        languages = language;
                    }

                    var resolvedLanguages = [];

                    for (var l = 0; l < languages.length; l++) {
                        resolvedLanguages.push(languages[l]);

                        if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {
                            // Extract the region information if it is included
                            var languageParts = languages[l].split('-');
                            var baseLanguage = languageParts[0];

                            resolvedLanguages.push(baseLanguage);
                        }
                    }

                    return resolvedLanguages;
                };

                Defaults.prototype._processTranslations = function (languages, debug) {
                    var translations = new Translation();

                    for (var l = 0; l < languages.length; l++) {
                        var languageData = new Translation();

                        var language = languages[l];

                        if (typeof language === 'string') {
                            try {
                                // Try to load it with the original name
                                languageData = Translation.loadPath(language);
                            } catch (e) {
                                try {
                                    // If we couldn't load it, check if it wasn't the full path
                                    language = this.defaults.amdLanguageBase + language;
                                    languageData = Translation.loadPath(language);
                                } catch (ex) {
                                    // The translation could not be loaded at all. Sometimes this is
                                    // because of a configuration problem, other times this can be
                                    // because of how Select2 helps load all possible translation files
                                    if (debug && window.console && console.warn) {
                                        console.warn(
                                            'Select2: The language file for "' + language + '" could ' +
                                            'not be automatically loaded. A fallback will be used instead.'
                                        );
                                    }
                                }
                            }
                        } else if ($.isPlainObject(language)) {
                            languageData = new Translation(language);
                        } else {
                            languageData = language;
                        }

                        translations.extend(languageData);
                    }

                    return translations;
                };

                Defaults.prototype.set = function (key, value) {
                    var camelKey = $.camelCase(key);

                    var data = {};
                    data[camelKey] = value;

                    var convertedData = Utils._convertData(data);

                    $.extend(true, this.defaults, convertedData);
                };

                var defaults = new Defaults();

                return defaults;
            });

            S2.define('select2/options', [
                'jquery',
                './defaults',
                './utils'
            ], function ($, Defaults, Utils) {
                function Options(options, $element) {
                    this.options = options;

                    if ($element != null) {
                        this.fromElement($element);
                    }

                    if ($element != null) {
                        this.options = Defaults.applyFromElement(this.options, $element);
                    }

                    this.options = Defaults.apply(this.options);
                }

                Options.prototype.fromElement = function ($e) {
                    var excludedData = ['select2'];

                    if (this.options.multiple == null) {
                        this.options.multiple = $e.prop('multiple');
                    }

                    if (this.options.disabled == null) {
                        this.options.disabled = $e.prop('disabled');
                    }

                    if (this.options.autocomplete == null && $e.prop('autocomplete')) {
                        this.options.autocomplete = $e.prop('autocomplete');
                    }

                    if (this.options.dir == null) {
                        if ($e.prop('dir')) {
                            this.options.dir = $e.prop('dir');
                        } else if ($e.closest('[dir]').prop('dir')) {
                            this.options.dir = $e.closest('[dir]').prop('dir');
                        } else {
                            this.options.dir = 'ltr';
                        }
                    }

                    $e.prop('disabled', this.options.disabled);
                    $e.prop('multiple', this.options.multiple);

                    if (Utils.GetData($e[0], 'select2Tags')) {
                        if (this.options.debug && window.console && console.warn) {
                            console.warn(
                                'Select2: The `data-select2-tags` attribute has been changed to ' +
                                'use the `data-data` and `data-tags="true"` attributes and will be ' +
                                'removed in future versions of Select2.'
                            );
                        }

                        Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
                        Utils.StoreData($e[0], 'tags', true);
                    }

                    if (Utils.GetData($e[0], 'ajaxUrl')) {
                        if (this.options.debug && window.console && console.warn) {
                            console.warn(
                                'Select2: The `data-ajax-url` attribute has been changed to ' +
                                '`data-ajax--url` and support for the old attribute will be removed' +
                                ' in future versions of Select2.'
                            );
                        }

                        $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
                        Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
                    }

                    var dataset = {};

                    function upperCaseLetter(_, letter) {
                        return letter.toUpperCase();
                    }

                    // Pre-load all of the attributes which are prefixed with `data-`
                    for (var attr = 0; attr < $e[0].attributes.length; attr++) {
                        var attributeName = $e[0].attributes[attr].name;
                        var prefix = 'data-';

                        if (attributeName.substr(0, prefix.length) == prefix) {
                            // Get the contents of the attribute after `data-`
                            var dataName = attributeName.substring(prefix.length);

                            // Get the data contents from the consistent source
                            // This is more than likely the jQuery data helper
                            var dataValue = Utils.GetData($e[0], dataName);

                            // camelCase the attribute name to match the spec
                            var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);

                            // Store the data attribute contents into the dataset since
                            dataset[camelDataName] = dataValue;
                        }
                    }

                    // Prefer the element's `dataset` attribute if it exists
                    // jQuery 1.x does not correctly handle data attributes with multiple dashes
                    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
                        dataset = $.extend(true, {}, $e[0].dataset, dataset);
                    }

                    // Prefer our internal data cache if it exists
                    var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);

                    data = Utils._convertData(data);

                    for (var key in data) {
                        if (excludedData.indexOf(key) > -1) {
                            continue;
                        }

                        if ($.isPlainObject(this.options[key])) {
                            $.extend(this.options[key], data[key]);
                        } else {
                            this.options[key] = data[key];
                        }
                    }

                    return this;
                };

                Options.prototype.get = function (key) {
                    return this.options[key];
                };

                Options.prototype.set = function (key, val) {
                    this.options[key] = val;
                };

                return Options;
            });

            S2.define('select2/core', [
                'jquery',
                './options',
                './utils',
                './keys'
            ], function ($, Options, Utils, KEYS) {
                var Select2 = function ($element, options) {
                    if (Utils.GetData($element[0], 'select2') != null) {
                        Utils.GetData($element[0], 'select2').destroy();
                    }

                    this.$element = $element;

                    this.id = this._generateId($element);

                    options = options || {};

                    this.options = new Options(options, $element);

                    Select2.__super__.constructor.call(this);

                    // Set up the tabindex

                    var tabindex = $element.attr('tabindex') || 0;
                    Utils.StoreData($element[0], 'old-tabindex', tabindex);
                    $element.attr('tabindex', '-1');

                    // Set up containers and adapters

                    var DataAdapter = this.options.get('dataAdapter');
                    this.dataAdapter = new DataAdapter($element, this.options);

                    var $container = this.render();

                    this._placeContainer($container);

                    var SelectionAdapter = this.options.get('selectionAdapter');
                    this.selection = new SelectionAdapter($element, this.options);
                    this.$selection = this.selection.render();

                    this.selection.position(this.$selection, $container);

                    var DropdownAdapter = this.options.get('dropdownAdapter');
                    this.dropdown = new DropdownAdapter($element, this.options);
                    this.$dropdown = this.dropdown.render();

                    this.dropdown.position(this.$dropdown, $container);

                    var ResultsAdapter = this.options.get('resultsAdapter');
                    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
                    this.$results = this.results.render();

                    this.results.position(this.$results, this.$dropdown);

                    // Bind events

                    var self = this;

                    // Bind the container to all of the adapters
                    this._bindAdapters();

                    // Register any DOM event handlers
                    this._registerDomEvents();

                    // Register any internal event handlers
                    this._registerDataEvents();
                    this._registerSelectionEvents();
                    this._registerDropdownEvents();
                    this._registerResultsEvents();
                    this._registerEvents();

                    // Set the initial state
                    this.dataAdapter.current(function (initialData) {
                        self.trigger('selection:update', {
                            data: initialData
                        });
                    });

                    // Hide the original select
                    $element[0].classList.add('select2-hidden-accessible');
                    $element.attr('aria-hidden', 'true');

                    // Synchronize any monitored attributes
                    this._syncAttributes();

                    Utils.StoreData($element[0], 'select2', this);

                    // Ensure backwards compatibility with $element.data('select2').
                    $element.data('select2', this);
                };

                Utils.Extend(Select2, Utils.Observable);

                Select2.prototype._generateId = function ($element) {
                    var id = '';

                    if ($element.attr('id') != null) {
                        id = $element.attr('id');
                    } else if ($element.attr('name') != null) {
                        id = $element.attr('name') + '-' + Utils.generateChars(2);
                    } else {
                        id = Utils.generateChars(4);
                    }

                    id = id.replace(/(:|\.|\[|\]|,)/g, '');
                    id = 'select2-' + id;

                    return id;
                };

                Select2.prototype._placeContainer = function ($container) {
                    $container.insertAfter(this.$element);

                    var width = this._resolveWidth(this.$element, this.options.get('width'));

                    if (width != null) {
                        $container.css('width', width);
                    }
                };

                Select2.prototype._resolveWidth = function ($element, method) {
                    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

                    if (method == 'resolve') {
                        var styleWidth = this._resolveWidth($element, 'style');

                        if (styleWidth != null) {
                            return styleWidth;
                        }

                        return this._resolveWidth($element, 'element');
                    }

                    if (method == 'element') {
                        var elementWidth = $element.outerWidth(false);

                        if (elementWidth <= 0) {
                            return 'auto';
                        }

                        return elementWidth + 'px';
                    }

                    if (method == 'style') {
                        var style = $element.attr('style');

                        if (typeof (style) !== 'string') {
                            return null;
                        }

                        var attrs = style.split(';');

                        for (var i = 0, l = attrs.length; i < l; i = i + 1) {
                            var attr = attrs[i].replace(/\s/g, '');
                            var matches = attr.match(WIDTH);

                            if (matches !== null && matches.length >= 1) {
                                return matches[1];
                            }
                        }

                        return null;
                    }

                    if (method == 'computedstyle') {
                        var computedStyle = window.getComputedStyle($element[0]);

                        return computedStyle.width;
                    }

                    return method;
                };

                Select2.prototype._bindAdapters = function () {
                    this.dataAdapter.bind(this, this.$container);
                    this.selection.bind(this, this.$container);

                    this.dropdown.bind(this, this.$container);
                    this.results.bind(this, this.$container);
                };

                Select2.prototype._registerDomEvents = function () {
                    var self = this;

                    this.$element.on('change.select2', function () {
                        self.dataAdapter.current(function (data) {
                            self.trigger('selection:update', {
                                data: data
                            });
                        });
                    });

                    this.$element.on('focus.select2', function (evt) {
                        self.trigger('focus', evt);
                    });

                    this._syncA = Utils.bind(this._syncAttributes, this);
                    this._syncS = Utils.bind(this._syncSubtree, this);

                    this._observer = new window.MutationObserver(function (mutations) {
                        self._syncA();
                        self._syncS(mutations);
                    });
                    this._observer.observe(this.$element[0], {
                        attributes: true,
                        childList: true,
                        subtree: false
                    });
                };

                Select2.prototype._registerDataEvents = function () {
                    var self = this;

                    this.dataAdapter.on('*', function (name, params) {
                        self.trigger(name, params);
                    });
                };

                Select2.prototype._registerSelectionEvents = function () {
                    var self = this;
                    var nonRelayEvents = ['toggle', 'focus'];

                    this.selection.on('toggle', function () {
                        self.toggleDropdown();
                    });

                    this.selection.on('focus', function (params) {
                        self.focus(params);
                    });

                    this.selection.on('*', function (name, params) {
                        if (nonRelayEvents.indexOf(name) !== -1) {
                            return;
                        }

                        self.trigger(name, params);
                    });
                };

                Select2.prototype._registerDropdownEvents = function () {
                    var self = this;

                    this.dropdown.on('*', function (name, params) {
                        self.trigger(name, params);
                    });
                };

                Select2.prototype._registerResultsEvents = function () {
                    var self = this;

                    this.results.on('*', function (name, params) {
                        self.trigger(name, params);
                    });
                };

                Select2.prototype._registerEvents = function () {
                    var self = this;

                    this.on('open', function () {
                        self.$container[0].classList.add('select2-container--open');
                    });

                    this.on('close', function () {
                        self.$container[0].classList.remove('select2-container--open');
                    });

                    this.on('enable', function () {
                        self.$container[0].classList.remove('select2-container--disabled');
                    });

                    this.on('disable', function () {
                        self.$container[0].classList.add('select2-container--disabled');
                    });

                    this.on('blur', function () {
                        self.$container[0].classList.remove('select2-container--focus');
                    });

                    this.on('query', function (params) {
                        if (!self.isOpen()) {
                            self.trigger('open', {});
                        }

                        this.dataAdapter.query(params, function (data) {
                            self.trigger('results:all', {
                                data: data,
                                query: params
                            });
                        });
                    });

                    this.on('query:append', function (params) {
                        this.dataAdapter.query(params, function (data) {
                            self.trigger('results:append', {
                                data: data,
                                query: params
                            });
                        });
                    });

                    this.on('keypress', function (evt) {
                        var key = evt.which;

                        if (self.isOpen()) {
                            if (key === KEYS.ESC || (key === KEYS.UP && evt.altKey)) {
                                self.close(evt);

                                evt.preventDefault();
                            } else if (key === KEYS.ENTER || key === KEYS.TAB) {
                                self.trigger('results:select', {});

                                evt.preventDefault();
                            } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
                                self.trigger('results:toggle', {});

                                evt.preventDefault();
                            } else if (key === KEYS.UP) {
                                self.trigger('results:previous', {});

                                evt.preventDefault();
                            } else if (key === KEYS.DOWN) {
                                self.trigger('results:next', {});

                                evt.preventDefault();
                            }
                        } else {
                            if (key === KEYS.ENTER || key === KEYS.SPACE ||
                                (key === KEYS.DOWN && evt.altKey)) {
                                self.open();

                                evt.preventDefault();
                            }
                        }
                    });
                };

                Select2.prototype._syncAttributes = function () {
                    this.options.set('disabled', this.$element.prop('disabled'));

                    if (this.isDisabled()) {
                        if (this.isOpen()) {
                            this.close();
                        }

                        this.trigger('disable', {});
                    } else {
                        this.trigger('enable', {});
                    }
                };

                Select2.prototype._isChangeMutation = function (mutations) {
                    var self = this;

                    if (mutations.addedNodes && mutations.addedNodes.length > 0) {
                        for (var n = 0; n < mutations.addedNodes.length; n++) {
                            var node = mutations.addedNodes[n];

                            if (node.selected) {
                                return true;
                            }
                        }
                    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
                        return true;
                    } else if (Array.isArray(mutations)) {
                        return mutations.some(function (mutation) {
                            return self._isChangeMutation(mutation);
                        });
                    }

                    return false;
                };

                Select2.prototype._syncSubtree = function (mutations) {
                    var changed = this._isChangeMutation(mutations);
                    var self = this;

                    // Only re-pull the data if we think there is a change
                    if (changed) {
                        this.dataAdapter.current(function (currentData) {
                            self.trigger('selection:update', {
                                data: currentData
                            });
                        });
                    }
                };

                /**
                 * Override the trigger method to automatically trigger pre-events when
                 * there are events that can be prevented.
                 */
                Select2.prototype.trigger = function (name, args) {
                    var actualTrigger = Select2.__super__.trigger;
                    var preTriggerMap = {
                        'open': 'opening',
                        'close': 'closing',
                        'select': 'selecting',
                        'unselect': 'unselecting',
                        'clear': 'clearing'
                    };

                    if (args === undefined) {
                        args = {};
                    }

                    if (name in preTriggerMap) {
                        var preTriggerName = preTriggerMap[name];
                        var preTriggerArgs = {
                            prevented: false,
                            name: name,
                            args: args
                        };

                        actualTrigger.call(this, preTriggerName, preTriggerArgs);

                        if (preTriggerArgs.prevented) {
                            args.prevented = true;

                            return;
                        }
                    }

                    actualTrigger.call(this, name, args);
                };

                Select2.prototype.toggleDropdown = function () {
                    if (this.isDisabled()) {
                        return;
                    }

                    if (this.isOpen()) {
                        this.close();
                    } else {
                        this.open();
                    }
                };

                Select2.prototype.open = function () {
                    if (this.isOpen()) {
                        return;
                    }

                    if (this.isDisabled()) {
                        return;
                    }

                    this.trigger('query', {});
                };

                Select2.prototype.close = function (evt) {
                    if (!this.isOpen()) {
                        return;
                    }

                    this.trigger('close', { originalEvent: evt });
                };

                /**
                 * Helper method to abstract the "enabled" (not "disabled") state of this
                 * object.
                 *
                 * @return {true} if the instance is not disabled.
                 * @return {false} if the instance is disabled.
                 */
                Select2.prototype.isEnabled = function () {
                    return !this.isDisabled();
                };

                /**
                 * Helper method to abstract the "disabled" state of this object.
                 *
                 * @return {true} if the disabled option is true.
                 * @return {false} if the disabled option is false.
                 */
                Select2.prototype.isDisabled = function () {
                    return this.options.get('disabled');
                };

                Select2.prototype.isOpen = function () {
                    return this.$container[0].classList.contains('select2-container--open');
                };

                Select2.prototype.hasFocus = function () {
                    return this.$container[0].classList.contains('select2-container--focus');
                };

                Select2.prototype.focus = function (data) {
                    // No need to re-trigger focus events if we are already focused
                    if (this.hasFocus()) {
                        return;
                    }

                    this.$container[0].classList.add('select2-container--focus');
                    this.trigger('focus', {});
                };

                Select2.prototype.enable = function (args) {
                    if (this.options.get('debug') && window.console && console.warn) {
                        console.warn(
                            'Select2: The `select2("enable")` method has been deprecated and will' +
                            ' be removed in later Select2 versions. Use $element.prop("disabled")' +
                            ' instead.'
                        );
                    }

                    if (args == null || args.length === 0) {
                        args = [true];
                    }

                    var disabled = !args[0];

                    this.$element.prop('disabled', disabled);
                };

                Select2.prototype.data = function () {
                    if (this.options.get('debug') &&
                        arguments.length > 0 && window.console && console.warn) {
                        console.warn(
                            'Select2: Data can no longer be set using `select2("data")`. You ' +
                            'should consider setting the value instead using `$element.val()`.'
                        );
                    }

                    var data = [];

                    this.dataAdapter.current(function (currentData) {
                        data = currentData;
                    });

                    return data;
                };

                Select2.prototype.val = function (args) {
                    if (this.options.get('debug') && window.console && console.warn) {
                        console.warn(
                            'Select2: The `select2("val")` method has been deprecated and will be' +
                            ' removed in later Select2 versions. Use $element.val() instead.'
                        );
                    }

                    if (args == null || args.length === 0) {
                        return this.$element.val();
                    }

                    var newVal = args[0];

                    if (Array.isArray(newVal)) {
                        newVal = newVal.map(function (obj) {
                            return obj.toString();
                        });
                    }

                    this.$element.val(newVal).trigger('input').trigger('change');
                };

                Select2.prototype.destroy = function () {
                    Utils.RemoveData(this.$container[0]);
                    this.$container.remove();

                    this._observer.disconnect();
                    this._observer = null;

                    this._syncA = null;
                    this._syncS = null;

                    this.$element.off('.select2');
                    this.$element.attr('tabindex',
                        Utils.GetData(this.$element[0], 'old-tabindex'));

                    this.$element[0].classList.remove('select2-hidden-accessible');
                    this.$element.attr('aria-hidden', 'false');
                    Utils.RemoveData(this.$element[0]);
                    this.$element.removeData('select2');

                    this.dataAdapter.destroy();
                    this.selection.destroy();
                    this.dropdown.destroy();
                    this.results.destroy();

                    this.dataAdapter = null;
                    this.selection = null;
                    this.dropdown = null;
                    this.results = null;
                };

                Select2.prototype.render = function () {
                    var $container = $(
                        '<span class="select2 select2-container">' +
                        '<span class="selection"></span>' +
                        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
                        '</span>'
                    );

                    $container.attr('dir', this.options.get('dir'));

                    this.$container = $container;

                    this.$container[0].classList
                        .add('select2-container--' + this.options.get('theme'));

                    Utils.StoreData($container[0], 'element', this.$element);

                    return $container;
                };

                return Select2;
            });

            S2.define('jquery-mousewheel', [
                'jquery'
            ], function ($) {
                // Used to shim jQuery.mousewheel for non-full builds.
                return $;
            });

            S2.define('jquery.select2', [
                'jquery',
                'jquery-mousewheel',

                './select2/core',
                './select2/defaults',
                './select2/utils'
            ], function ($, _, Select2, Defaults, Utils) {
                if ($.fn.select2 == null) {
                    // All methods that should return the element
                    var thisMethods = ['open', 'close', 'destroy'];

                    $.fn.select2 = function (options) {
                        options = options || {};

                        if (typeof options === 'object') {
                            this.each(function () {
                                var instanceOptions = $.extend(true, {}, options);

                                var instance = new Select2($(this), instanceOptions);
                            });

                            return this;
                        } else if (typeof options === 'string') {
                            var ret;
                            var args = Array.prototype.slice.call(arguments, 1);

                            this.each(function () {
                                var instance = Utils.GetData(this, 'select2');

                                if (instance == null && window.console && console.error) {
                                    console.error(
                                        'The select2(\'' + options + '\') method was called on an ' +
                                        'element that is not using Select2.'
                                    );
                                }

                                ret = instance[options].apply(instance, args);
                            });

                            // Check if we should be returning `this`
                            if (thisMethods.indexOf(options) > -1) {
                                return this;
                            }

                            return ret;
                        } else {
                            throw new Error('Invalid arguments for Select2: ' + options);
                        }
                    };
                }

                if ($.fn.select2.defaults == null) {
                    $.fn.select2.defaults = Defaults;
                }

                return Select2;
            });

            // Return the AMD loader configuration so it can be used outside of this file
            return {
                define: S2.define,
                require: S2.require
            };
        }());

        // Autoload the jQuery bindings
        // We know that all of the modules exist above this, so we're safe
        var select2 = S2.require('jquery.select2');

        // Hold the AMD module references on the jQuery function that was just loaded
        // This allows Select2 to use the internal loader outside of this file, such
        // as in the language files.
        jQuery.fn.select2.amd = S2;

        // Return the Select2 instance for anyone who is importing it.
        return select2;
    }));

$.fn.disableSelection = function () {
    return this
        .attr('unselectable', 'on')
        .css('user-select', 'none')
        .on('selectstart', false);
};

$(document).ready(function () {


    $('a.mobile-menu-toggle').on('click', function () {
        $('div.nav-box').slideToggle(300);
    });

    var closeContainer = function (container, master) {
        $(".shown-container").addClass("animating");

        $(".shown-container").slideUp(function () {
            $(".act").removeClass("act");
            $(".hero.homepage-header").removeClass("expanded");
            $(this).removeClass("shown-container");
            $(this).removeClass("animating");

            if (typeof (container) !== "undefined" && typeof (master) !== "undefined") {
                openContainer(container, master);
            }
        });
    };

    var openContainer = function (container, master) {
        $(container).addClass("animating");
        $(".hero.homepage-header").addClass("expanded");

        $(container).slideDown(function () {
            $(master).addClass("act");
            $(container).addClass("shown-container");
            $(container).removeClass("animating");
        });
    };

    $(".top-page-options").on("click", "span.top-page-options-close", function (elem) {
        if ($(".shown-container").length == 0 || $(".animating").length > 0) {
            return false;
        } else {
            closeContainer();
        }
    });

    $(".top-page-options").on("click", "a.top-page-swchitcher", function (elem) {
        var $this = $(this);

        elem.preventDefault();

        if ($(".animating").length > 0) {
            return false;
        } else {
            if ($this.hasClass("country-btn")) {
                var $container = $(".top-page-options").find("div.country-list"),
                    containerName = "country-list";
            } else if ($this.hasClass("langs-btn")) {
                var $container = $(".top-page-options").find("div.langs-list"),
                    containerName = "langs-list";
            }

            if ($(".shown-container").length > 0) {
                if ($(".shown-container").hasClass(containerName)) {
                    closeContainer();
                } else {
                    closeContainer($container, $this);
                }
            } else {
                openContainer($container, $this);
            }
        }
    });

    $(".no-action").mousedown(function (event) {
        event.preventDefault();
        return false;
    });

    var sort_select_box = function (elem) {
        // Get options from select box
        var my_options = $(elem).find('option');
        // sort alphabetically
        my_options.sort(function (a, b) {
            if (a.text < b.text) return 1;
            else if (a.text > b.text) return -1;
            else return 0
        })
        //replace with sorted my_options;
        $(elem).empty().append(my_options);

        // clearing any selections
        //$(elem).find('option').attr('selected', false);
        //$(elem).find('option').get(0).attr('selected', true);
    }

    if ($(".download-file").length > 0) {
        $.each($(".download-file"), function (i, obj) {
            sort_select_box(obj);
        });
    }

    $(".download-new").on("click", function (e) {
        e.preventDefault();

        var $this = $(this),
            $select = $this.prev("select.download-file"),
            $selectedIndex = $select.prop("selectedIndex"),
            $selectedValue = $select.find(":selected").attr("data-url");

        if ($('#_popup').length) {
            $('#_popupOverlay').show();
            $('#_popup').find('input._redir').first().val($selectedValue);
            $('#_popup').show();
        } else {
            window.location = $selectedValue;
        }
    });
    $("._download").on("click", function (e) {
        e.preventDefault();

        var $this = $(this),
            $select = $this.prev(".custom-select").find("select.download-file"),
            $selectedIndex = $select.prop("selectedIndex"),
            $selectedValue = $select.find(":selected").attr("data-url");

        if ($('#_popup').length) {
            $('#_popupOverlay').show();
            $('#_popup').find('input._redir').first().val($selectedValue);
            $('#_popup').show();
        } else {
            window.location = $selectedValue;
        }
    });

    $(".menu-item").on("click", function (e) {
        e.preventDefault();

        var targetElementId = $(this).attr("rel"),
            elpos = $(targetElementId).offset();

        $("body,html").animate({
            scrollTop: elpos.top - 60
        }, 1000);
    });

    var SlideShow = function (container) {
        var timing = $(container).attr("data-slide-timing") * 1,
            slides = $(container).find(".slide"),
            active_slide = 0;


        if (isNaN(timing)) {
            // default slide show timing is 10s [10000ms]
            timing = 5000;
        } else {
            timing = timing * 1000;
        }

        slides.eq(active_slide).addClass("slide-fade-in");

        if (slides.length > 1) {
            active_slide++;

            setInterval(function () {
                slides.removeClass("slide-fade-in");
                slides.eq(active_slide).addClass("slide-fade-in");

                if (active_slide === slides.length - 1) {
                    active_slide = 0;
                } else {
                    active_slide++;
                }
            }, timing);
        }
    };

    if ($(".slide-show").length > 0) {
        var slide_show = $(".slide-show");

        $.each(slide_show, function (i, elem) {
            SlideShow(elem);
        });
    }

    $('.scrollmenu .minor a').each(function () {
        if ($(this).attr('href').indexOf("#") < 0) {
            $(this).attr('href', $(this).attr('href') + '#scrolltop');
        }
    });

    $('#footer-country-select').on('change', function () {
        refreshFooterFlag();
        window.location = $(this).val();
    });

    refreshFooterFlag();

    $('[data-techTab]').on('click', function () {
        var tab = $(this).attr('data-techTab');
        $('.tabs').hide();
        $('.flag').removeClass('active');

        $('#' + tab).fadeIn(600);
        $(this).addClass('active');
    });

    /* UpgradeDcGen2 radio input collapse */
    $('#accordion-wizard').on('click', function (e) {
        e.preventDefault();

        $('#accordion-wizard-content').toggle('low');

        $('#accordion-wizard-content').promise().done(function () {
            if ($('#accordion-wizard-content').is(':visible')) {
                $('.chevron-arrow').css('transform', 'rotate(180deg)');
            } else {
                $('.chevron-arrow').css('transform', 'rotate(0deg)');
            }
        });
    })
    /* END UpgradeDcGen2 radio input collapse */

    /* UpgradeDcGen2 radio input changing */

    $('input[type="radio"].licensing-radio-input').on('change', function () {
        $('input[type="radio"].licensing-radio-input').each(function () {
            if ($(this).prop('checked')) {
                $(this).closest('.label-box').addClass("active");
            } else {
                $(this).closest('.label-box').removeClass("active");
            }
        });

        if ($('#gen2dynamicText').length > 0) {
            let active = $('input[type="radio"].licensing-radio-input:checked').val();
            let text = $('#gen2dynamicText').data(`${active}`);
            $('#gen2dynamicText').text(text);
        }
    });

    /* Convert string to float with regex (remove whitepsace and replace , char with . char) */
    function stringToFloat(string) {
        string = string.replace(/\s+/g, '');
        string = string.replace(/,+/g, '.');

        return parseFloat(string);
    }
    /* Convert string to float with regex (remove whitepsace and replace , char with . char) */

    /* UpgradeDcGen2 order failed, open intercom on contact us button */
    $('#order-failed-support').on('click', function () {
        if ($('.intercom-lightweight-app-launcher.intercom-launcher').length > 0) {
            $('.intercom-lightweight-app-launcher.intercom-launcher').trigger('click');
        }
    })
    /* END UpgradeDcGen2 order failed, open intercom on contact us button */

    /* UpgradeDcGen2 preventing user to leave page */

    if (document.getElementById('preventLicensingLeave')) {
        window.addEventListener('beforeunload', preventUnloadPage);
    }

    let elements = document.getElementsByClassName("beforeunloadUnbind");
    Array.from(elements).forEach(function (element) {
        element.addEventListener('click', function () {
            window.removeEventListener('beforeunload', preventUnloadPage);
        });
    });
    /* END UpgradeDcGen2 preventing user to leave page */

    /* New 2020 form focus handling */

    function addFocusedClassToInput(input) {
        if (input.val()) {
            input.siblings('.dc-form-name').addClass('focused');
        } else {
            input.siblings('.dc-form-name').removeClass('focused');
        }
    }

    $('.dc-form-input').on('focus', function () {
        $(this).closest('.dc-form-label').addClass('focused');
    });

    $('.dc-form-input').on('focusout', function () {
        $(this).closest('.dc-form-label').removeClass('focused');
        addFocusedClassToInput($(this));
    });

    /* END New 2020 form focus handling */

    /* Edit order ID in licensing wizard */
    $('#edit-order-id').on('click', function () {
        let orderIdParam = new URLSearchParams(window.location.search);
        let param = 'EUR00000000-000000-00000-A';

        if (orderIdParam.has('order-id')) {
            param = orderIdParam.get('order-id');
        }

        $('#order-id').remove();
        $('#edit-order-id').remove();
        $('#order-id-input').remove();
        $('#order-id-container').append(`<input class="order-id-input" name="order_id" value="${param}" />`);
    })
    /* END Edit order ID in licensing wizard */

    /* Add dropdown if USA is selected in form and add VAT ID input if country can have VAT ID */
    $(".gen2-select #country").change(function () {
        const vatIdContries = ['BE', 'BG', 'CZ', 'DK', 'DE', 'EE', 'IE', 'EL', 'ES', 'FR', 'HR', 'IT', 'CY', 'LV', 'LT', 'LU', 'HU', 'MT', 'NL', 'AT', 'PL', 'PT', 'RO', 'SI', 'SK', 'FI', 'SE', 'GB']

        if ($('.country-selector-state').length) {
            if ($(this).val() === "US") {
                document.querySelector('.country-selector-state .o-dropdown').classList.remove('o-dropdown--disabled');
                document.querySelector('.country-selector-state').classList.remove('hidden');
            } else {
                document.querySelector('.country-selector-state .o-dropdown').classList.add('o-dropdown--disabled');
                document.querySelector('.country-selector-state').classList.add('hidden');
            }
        }

        if ($('.vatId-input').length) {
            let value = $(this).val();

            if (($.inArray(value, vatIdContries)) > -1) {
                $('.vatId-input').removeClass('d-none');
            } else {
                $('.vatId-input').addClass('d-none');
            }
        }
    });

    $('#country').trigger('change');
    /* END Add dropdown if USA is selected in form and add VAT ID input if country can have VAT ID */

    /* Reload page with order ID from input in licensing wizard */
    $('#gen2-id-submit').on('click', function (e) {
        e.preventDefault();
        const origin = window.location.origin;
        const gen2link = $('#gen2-id-submit').data('gen2reload');
        const orderIdString = '?order-id=';
        let param = $('#order-id-input').val();

        window.location.href = `${origin}${gen2link}${orderIdString}${param}`;
    })
    /* END Reload page with order ID from input in licensing wizard */

    /* On focus out validate vat id in licensing wizard */
    $('#vat').on('focusout', function (e) {
        let url = '';

        if ($(this).data('apilink') !== undefined) {
            url = $(this).data('apilink');
        } else {
            return;
        }

        let value = $(this).val();
        if (value == '') {
            $('#submitForm').prop('disabled', false);
            $('#vat-err-msg').addClass('d-none');
            $('#vat').removeClass('gen2-error-input');
            $('.valid').hide();

            return;
        }

        let data = {
            vat: value
        };

        $('.refresh').show();
        $('.valid').hide();
        $('#submitForm').prop('disabled', true);

        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: 'json',
            success: function (data) {
                let valid = data.result.payload.valid;
                $('.refresh').hide();

                if (valid) {
                    $('#submitForm').prop('disabled', false);
                    $('#vat-err-msg').addClass('d-none');
                    $('#vat').removeClass('gen2-error-input');
                    $('.valid').show();
                } else {
                    if ($('#vat-err-msg').hasClass('d-none') && !$('#vat').hasClass('gen2-error-input')) {
                        $('#vat-err-msg').removeClass('d-none');
                        $('#vat').addClass('gen2-error-input');
                        $('.valid').hide();
                    }
                }
            },
            error: function (data) {
                console.log(data);
                console.log('error');
            }
        });
        e.preventDefault();
    });
    /* END On focus out validate vat id in licensing wizard */

    /*  in licensing wizard */
    $('#sendGen2Pdf').on('click', function (e) {
        let url = '';
        let pdfType = '';

        if ($(this).data('apilink') !== undefined) {
            url = $(this).data('apilink');
        } else {
            return;
        }

        if ($(this).data('type') !== undefined) {
            pdfType = $(this).data('type');
        } else {
            return;
        }

        let data = {
            type: pdfType
        };

        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: 'json',
            success: function (data) {
                console.log(data);
                console.log('ok');
            },
            error: function (data) {
                console.log(data);
                console.log('error');
            }
        });
        e.preventDefault();
    });
    /* END  in licensing wizard */

    /* Product page */
    if ($('.mail-slider').length > 0) {
        let direction = 'ltr';
        if ($('body').hasClass('rtl')) {
            direction = 'rtl';
            $('.mail-slider').slick({
                infinite: true,
                dots: true,
                arrows: false,
                speed: 650,
                centerMode: true,
                rtl: true,
                slidesToShow: 4,
                slidesToScroll: 1,
                adaptiveHeight: false,
                centerPadding: '0',
                autoplay: true,
                autoplaySpeed: 10000,
                pauseOnHover: true,
                pauseOnDotsHover: true,
                responsive: [
                    {
                        breakpoint: 1280,
                        settings: {
                            arrows: false,
                        }
                    },
                    {
                        breakpoint: 1024,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    },
                    {
                        breakpoint: 501,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }
                ]
            });
        } else {
            var productMailSlider = tns({
                container: '.mail-slider',
                controlsContainer: '#customize-controls',
                navContainer: '#customize-nav',
                navPosition: 'bottom',
                autoplayButtonOutput: false,
                items: 4,
                textDirection: direction,
                loop: true,
                autoplay: true,
                swipeAngle: false,
                autoplayTimeout: 8000,
                speed: 800,
                responsive: {
                    0: {
                        items: 1,
                        controls: false,
                        nav: true,
                    },
                    576: {
                        items: 2
                    },
                    992: {
                        items: 4,
                        controls: true,
                        nav: false,
                    }
                },
            });
        }
    }

    function documentsImageChange(documentType) {
        let service = documentType.data('documents');

        $('.documents-image').removeClass('visible');
        $(`#${service}`).addClass('visible');

        $('.documents-banner-left').attr('class', 'documents-banner-left');
        $('.documents-banner-left').addClass(service);

        $('.nav-icon').removeClass('active');
        documentType.addClass('active');
    }

    function documentsImageChangeWithInterval() {
        if ($('[data-documentsorder].active').length > 0) {
            let order = $('[data-documentsorder].active').data('documentsorder');
            let numItems = $('[data-documentsorder]').length

            order = order + 1;
            if (order > numItems) {
                order = 1;
            }

            let desiredElement = $('.nav-icons').find(`[data-documentsorder='${order}']`)
            documentsImageChange(desiredElement);
        }
    }

    $('[data-documents]').on('click', function () {
        clearInterval(productDocumemtSlideInterval);
        productDocumemtSlideInterval = setInterval(documentsImageChangeWithInterval, 6000);
        documentsImageChange($(this));
    });

    var productDocumemtSlideInterval = setInterval(documentsImageChangeWithInterval, 6000);

    window.addEventListener("load", animateProductIcons('.icon-animate'));
    window.addEventListener("load", animateProductIcons('.icon-animate2'));
    window.addEventListener("load", animateProductIcons('.icon-animate3'));
    function animateProductIcons(icons) {
        if ($(icons).length > 0) {
            $(icons).each(function (index) {
                $(this).delay(300 * index).queue(function () {
                    $(this).animate({
                        opacity: 1
                    }, 200).addClass('scale').dequeue();
                });
            });
        }
    }
    /* End of Product page */

    window.addEventListener("load", animateHeroSideImages('.hero-animation'));
    function animateHeroSideImages(icons) {
        if ($(icons).length > 0) {
            $(icons).each(function (index) {
                $(this).queue(function () {
                    $(this).animate({
                        opacity: 1
                    }, 400).addClass('transition').dequeue();
                });
            });
        }
    }

    /* Footer language select */
    $('#change-language').on('click', function () {
        $('#change-language-box').toggle();
    })
    $('#change-language-close').on('click', function () {
        $('#change-language-box').toggle();
    })
    /* End of Footer language select */

    /* Webinars radio button and link handling */

    $('.webinar__radiobutton').on('click', function () {
        let continueButton = $(this).closest('.webinar-event').find('.webinar__link');

        continueButton.addClass('webinar__link--active');
        continueButton.attr('href', $(this).val());
    });

    /* END Webinars radio button and link handling */

    /* Migration landing */
    $('[data-solutionstab]').on('click', function () {
        let content = $(this).attr('data-solutionstab');
        let text = $(this).attr('data-text');

        $('.solutions-dropdown .o-dropdown__title').html(text);

        toggleMigrationSolutions(this, content);
    });

    $('.solutions-dropdown .o-dropdown__option').on('click', function () {
        const dropdownId = $(this).attr('data-value');
        const tab = $(`[data-dropdownid="${dropdownId}"]`);
        const content = tab.attr('data-solutionstab');

        toggleMigrationSolutions(tab, content);
    });

    function toggleMigrationSolutions(tab, content) {
        $('.tabs').hide();
        $('.tab-icon').removeClass('active');

        $('#' + content).fadeIn(600);
        $(tab).addClass('active');
    }
    /* END Migration landing */

    $('#go-back').on('click', function () {
        history.back();
    })

    $('.viki-select2').each(function () {
        let selectOptions = {
            theme: 'viki',
            width: '100%',
            minimumResultsForSearch: Infinity,
            placeholder: $(this).data('placeholder'),
            dropdownCssClass: 'single'
        };

        // check if select data comes from variable (needed for html in options)
        if ($(this).data().hasOwnProperty('options')) {
            selectOptions.data = window[$(this).data('options')];

            if ($(this).data('template') === 'sides') {
                selectOptions.templateResult = function (d) {
                    return $(`<div class="d-flex"><span class="left">${d.textLeft}</span><span class="right ml-auto">${d.textRight}</span></div>`);
                };
                selectOptions.templateSelection = function (d) {
                    return $(`<div class="d-flex"><span class="left">${d.textLeft}</span><span class="right ml-auto">${d.textRight}</span></div>`);
                };
            }
        }

        $(this).select2(selectOptions);

        if ($(this).data().hasOwnProperty('value')) {
            $(this).val($(this).data('value')).trigger('change');
        }
    })

    $('.iw-select2').each(function () {
        let selectOptions = {
            theme: 'iw',
            width: '100%',
            minimumResultsForSearch: Infinity,
            placeholder: $(this).data('placeholder'),
            dropdownCssClass: 'single'
        };

        $(this).select2(selectOptions);
    })

    $('.iw-select2-multi').each(function () {
        let selectOptions = {
            theme: 'iw',
            width: '100%',
            minimumResultsForSearch: Infinity,
            closeOnSelect: false,
            allowClear: true,
            placeholder: $(this).data('placeholder'),
            dropdownCssClass: 'multi'
        };

        $(this).select2(selectOptions).on('select2:unselecting', function () {
            $(this).data('unselecting', true);
        }).on('select2:opening', function (e) {
            if ($(this).data('unselecting')) {
                $(this).removeData('unselecting');
                e.preventDefault();
            }
        });
    })

    $(document).ready(function () {
        $('#country').on('change', function () {
            if ($('#country_prefix').length) {
                changePrefix($(this).val(), $('#country_prefix'));
            }
        });

        $('.country-selector-contact-form').on('change', function () {
            if ($('#frmsalesForceContactForm-country_prefix').length) {
                changePrefixSalesForce($(this).val(), $('#frmsalesForceContactForm-country_prefix'));
            }

            if ($('#frmdownloadContactForm-country_prefix').length) {
                changePrefixSalesForce($(this).val(), $('#frmdownloadContactForm-country_prefix'));
            }

            if ($('#frmquoteContactForm-country_prefix').length) {
                changePrefixSalesForce($(this).val(), $('#frmquoteContactForm-country_prefix'));
            }
        });
    });


    function changePrefixSalesForce(selectedCountry, countryPrefix) {
        countryPrefix.val(selectedCountry);
    }
    function changePrefix(selectedCountry, countryPrefix) {
        const prefix = window.countryPrefixes[selectedCountry];
        countryPrefix.val(prefix);
    }
});

function refreshFooterFlag() {
    var flag = $('#footer-country-select').find(":selected").data('flag');
    $('.footer-dropdown').css('background-image', 'url("/img/about/' + flag + '_flag.png")');
}

function trackEvent(action, label, value) {
    if (typeof ga !== 'undefined') {
        ga('send', 'event', action, label, value);
    }
    if (typeof _gaq !== 'undefined') {
        _gaq.push(['_trackEvent', action, label, value]);
    }
    if (typeof dataLayer !== 'undefined') {
        dataLayer.push({
            'event': 'gaTriggerEvent',
            'gaEventCategory': action,
            'gaEventAction': label,
            'gaEventLabel': value
        });
    }
}
var spinnerKey = "ajax-spinner-spin";
var spinnerEl = "#ajax-spinner-spin";
function ajaxSpinnerShow(el) {
    $('<div id="' + spinnerKey + '"></div>').insertAfter(el).ajaxComplete(function () {
        $(spinnerKey).hide().css({
            position: "fixed",
            left: "50%",
            top: "50%"
        });
    }).ajaxError(function () {
        $(spinnerEl).hide().css({
            position: "fixed",
            left: "50%",
            top: "50%"
        });
    }).hide();
    $(spinnerEl).show().css({
        position: "fixed",
        left: "50%",
        top: "43%"
    });
    $(el).css({
        opacity: 0.3
    });

}
function ajaxSpinnerHide(el) {
    $(spinnerEl).hide().css({
        position: "fixed",
        left: "50%",
        top: "50%"
    });
    $(el).css({
        opacity: 1
    });
    $(spinnerEl).remove();

}

// {{{ urlencode
function urlencode(str) {
    // URL-encodes string
    //
    // +    discuss at: http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_urlencode/
    // +       version: 809.522
    // +   original by: Philip Peterson
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: AJ
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // %          note: info on what encoding functions to use from: http://xkr.us/articles/javascript/encode-compare/
    // *     example 1: urlencode('Kevin van Zonneveld!');
    // *     returns 1: 'Kevin+van+Zonneveld%21'
    // *     example 2: urlencode('http://kevin.vanzonneveld.net/');
    // *     returns 2: 'http%3A%2F%2Fkevin.vanzonneveld.net%2F'
    // *     example 3: urlencode('http://www.google.nl/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a');
    // *     returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a'

    var histogram = {}, histogram_r = {}, code = 0, tmp_arr = [];
    var ret = str.toString();

    // The histogram is identical to the one in urldecode.
    histogram['!'] = '%21';
    histogram['%20'] = '+';

    // Begin with encodeURIComponent, which most resembles PHP's encoding functions
    ret = encodeURIComponent(ret);

    for (search in histogram) {
        replace = histogram[search];
        tmp_arr = ret.split(search); // Custom replace
        ret = tmp_arr.join(replace);
    }

    // Uppercase for full PHP compatibility
    return ret.replace(/(\%([a-z0-9]{2}))/g, function (full, m1, m2) {
        return "%" + m2.toUpperCase();
    });

    return ret;
}// }}}


/**
 *
 * @param {jqXHR} jqXHR
 * @param {string} textStatus
 * @param {string} errorThrown
 * @param {string} errMesg
 * @returns
 */
function ajaxErrorHandler(jqXHR, textStatus, errorThrown, errMesg) {
    errMesg = errMesg ? errMesg : 'Something bad happened. Please contact support';
    if (jqXHR.statusText === 'abort') {
        return;
    }
    if ((jqXHR.status === 0) && (jqXHR.statusText === 'timeout')) {
        alert('Something bad happened. Please check your Internet connection and contact support (http-status=0-timeout)');
    } else if (jqXHR.status === 0) {
        alert('Something bad happened. Please check your Internet connection and contact support (http-status=0)');
    } else if (jqXHR.responseJSON && jqXHR.responseJSON.redirect) {
        window.location.replace(jqXHR.responseJSON.redirect.replace(/restore\=[a-z0-9_-]*&/, ''));
    } else if ((jqXHR.status !== 200) || !jqXHR.responseJSON || (jqXHR.responseJSON.status !== true)) {
        alert(errMesg + ' (http-status=' + jqXHR.status + ' , response=' + jqXHR.responseText + ')');
    }

    if (jqXHR.status !== 200) {
        console.log('ajaxErrorHandler', jqXHR, textStatus, errorThrown, errMesg);
    }
}

function changeElementHeight(imageHeight, elementResize, shadow) {
    let height = $(imageHeight).height();
    height = height - shadow; // -shadow because image may have shadow
    $(elementResize).css('min-height', height);
}

// left: 37, up: 38, right: 39, down: 40,
// spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
const keys = { 37: 1, 38: 1, 39: 1, 40: 1 };

function preventDefault(e) {
    e.preventDefault();
}

function preventDefaultForScrollKeys(e) {
    if (keys[e.keyCode]) {
        preventDefault(e);
        return false;
    }
}

// modern Chrome requires { passive: false } when adding event
let supportsPassive = false;
try {
    window.addEventListener("test", null, Object.defineProperty({}, 'passive', {
        get: function () { supportsPassive = true; }
    }));
} catch (e) { }

let wheelOpt = supportsPassive ? { passive: false } : false;
let wheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : 'mousewheel';

// call this to Disable scroll
function disableScroll() {
    window.addEventListener('DOMMouseScroll', preventDefault, false); // older FF
    window.addEventListener(wheelEvent, preventDefault, wheelOpt); // modern desktop
    window.addEventListener('touchmove', preventDefault, wheelOpt); // mobile
    window.addEventListener('keydown', preventDefaultForScrollKeys, false);
}

// call this to Enable scroll
function enableScroll() {
    window.removeEventListener('DOMMouseScroll', preventDefault, false);
    window.removeEventListener(wheelEvent, preventDefault, wheelOpt);
    window.removeEventListener('touchmove', preventDefault, wheelOpt);
    window.removeEventListener('keydown', preventDefaultForScrollKeys, false);
}

function getDeviceType() {
    const ua = navigator.userAgent;
    let isIPadPro = /Macintosh/.test(navigator.userAgent) && 'ontouchend' in document;
    if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {
        return "tablet";
    }
    if (isIPadPro) {
        return "tablet";
    }
    if (
        /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(
            ua
        )
    ) {
        return "mobile";
    }
    return "desktop";
}

function throttle(func, wait, options) {
    let context, args, result;
    let timeout = null;
    let previous = 0;
    if (!options) options = {};
    let later = function () {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
    };
    return function () {
        let now = Date.now();
        if (!previous && options.leading === false) previous = now;
        let remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
        }
        return result;
    };
};

function debounce(func, wait, immediate) {
    let timeout;
    return function () {
        let context = this, args = arguments;
        let later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        let callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};

function preventUnloadPage(e) {
    e.preventDefault();
    e.returnValue = '';
}

$(window).on("load", function () {
    if ($(window).width() > 992) {
        changeElementHeight('#tamchat-height', '.teamchat-banner-right', 48);
        changeElementHeight('#document', '.documents-banner-left', 0);
    }
});

$(window).on('resize', function () {
    if ($(this).height() >= 992) {
        changeElementHeight('#tamchat-height', '.teamchat-banner-right', 48);
        changeElementHeight('#document', '.documents-banner-left', 0);
    }
});

function storiesScroll() {
    let element = $('.pricing-story-subtitle');

    element.each(function () {
        if ($(this).prop('scrollHeight') > $(this).height()) {
            $(this).closest(".pricing-story-wrapper").addClass("subtitle-scroll");
        } else {
            $(this).closest(".pricing-story-wrapper").removeClass("subtitle-scroll");
        }
    })
}
/**
 * @author      Milan Kolcak <kolcakmilan@gmail.com>
 * @link        https://www.facebook.com/MilanKolcak
 * @link        https://plus.google.com/u/0/115293588588082222794
 * @created on	05.09.
 * @copyright   2013
 * @version     1.0.0
 */

var hello = {};

hello.identifiers =
{
    namespace: 'hello',

    document_disable_select: false,
    document_disable_ignor: '.__selectable', //@todo: momentalne nefunkcne len priprava

    init_data: 'init',
    init_args_separator: '~',
    init_value_separator: '::',

    ns_separator: '|',
    ns_joiner: '_',

    plugin_separator: ';;',
    plugin_identifier: '_',
    plugin_constructor: '__construct',

    trigger_reset_form: 'hello_reset_form',
    trigger_actived_content: 'hello_actived_content',
    trigger_ajax_before: 'hello_ajax_before',
    trigger_ajax_success: 'hello_ajax_success',
    trigger_ajax_error_app: 'hello_ajax_error_app',
    trigger_ajax_error_server: 'hello_ajax_error_server',
    trigger_ajax_complete: 'hello_ajax_complete',
    trigger_update: 'hello_call_update',
    trigger_show: 'hello_show',
    trigger_hidden: 'hello_hidden',
    trigger_change: 'hello_change',
    trigger_hover: 'hello_hover',
    trigger_click: 'hello_click',
    trigger_data_change: 'hello_data_change'
};

/**
 * @author      Milan Kolcak <kolcakmilan@gmail.com>
 * @link        https://www.facebook.com/MilanKolcak
 * @link        https://plus.google.com/u/0/115293588588082222794
 * @created on	05.09.
 * @copyright   2013
 * @version     1.0.0
 */

/**
 * @param {type} $str
 * @returns {boolean}
 */
function isStringEmpty($str) {
    return (((!$str || /^\s*$/.test($str)) || (!$str || 0 === $str.length)) ? true : false);
}

function isArrayEmpty($array) {
    return ($array.length === 0 ? true : false);
}

function isArray($var) {
    return (Object.prototype.toString.call($var) === '[object Array]' ? true : false);
}

if (!String.prototype.format) {
    String.prototype.format = function () {
        var formatted = this;
        for (arg in arguments) {
            formatted = formatted.replace("{" + arg + "}", arguments[arg]);
        }
        return formatted;
    };
}

/**
 *
 * @param {mixed} $args
 * @returns {undefined}
 */
function h_log($args) {
    if (window.consolestop === undefined) {
        if (!$('body').hasClass('__debug')) {
            if (!window.console) {
                window.console = {};
            }

            var methods = ["log", "debug", "warn", "info"];
            for (var i = 0; i < methods.length; i++) {
                window.console[methods[i]] = function () { };
            }
            window.consolestop = true;
        }
        else {
            window.consolestop = false;
        }
    }

    console.log(arguments);
}

nette_parseJSON = function (s) {
    s = s || '[]';
    if (s.substr(0, 3) === '{op') {
        return eval('[' + s + ']'); // backward compatibility
    }
    return window.JSON && window.JSON.parse ? JSON.parse(s) : eval(s);
};

function str_replace(search, replace, subject, count) {
    // http://kevin.vanzonneveld.net
    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Gabriel Paderni
    // +   improved by: Philip Peterson
    // +   improved by: Simon Willison (http://simonwillison.net)
    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +   bugfixed by: Anton Ongson
    // +      input by: Onno Marsman
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +    tweaked by: Onno Marsman
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   input by: Oleg Eremeev
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Oleg Eremeev
    // %          note 1: The count parameter must be passed as a string in order
    // %          note 1:  to find a global variable in which the result will be given
    // *     example 1: str_replace(' ', '.', 'Kevin van Zonneveld');
    // *     returns 1: 'Kevin.van.Zonneveld'
    // *     example 2: str_replace(['{name}', 'l'], ['hello', 'm'], '{name}, lars');
    // *     returns 2: 'hemmo, mars'
    var i = 0,
        j = 0,
        temp = '',
        repl = '',
        sl = 0,
        fl = 0,
        f = [].concat(search),
        r = [].concat(replace),
        s = subject,
        ra = Object.prototype.toString.call(r) === '[object Array]',
        sa = Object.prototype.toString.call(s) === '[object Array]';
    s = [].concat(s);
    if (count) {
        this.window[count] = 0;
    }

    for (i = 0, sl = s.length; i < sl; i++) {
        if (s[i] === '') {
            continue;
        }
        for (j = 0, fl = f.length; j < fl; j++) {
            temp = s[i] + '';
            repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];
            s[i] = (temp).split(f[j]).join(repl);
            if (count && s[i] !== temp) {
                this.window[count] += (temp.length - s[i].length) / f[j].length;
            }
        }
    }
    return sa ? s : s[0];
}

/**
 *
 * @param {string} $string
 * @returns {array<mixed>}
 */
function getArgsFromString($string) {
    var $return = [];

    if (!isStringEmpty($string)) {
        try {
            $return = [JSON.parse($string)];
        }
        catch (err) {
            $return = $string.split(hello.identifiers.init_value_separator);
        }
    }

    return $return;
}

String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, '');
};

String.prototype.ltrim = function () {
    return this.replace(/^\s+/, '');
};

String.prototype.rtrim = function () {
    return this.replace(/\s+$/, '');
};

String.prototype.fulltrim = function () {
    return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g, '').replace(/\s+/g, ' ');
};

Number.prototype.formatMoney = function (c, d, t) {
    var n = this,
        c = isNaN(c = Math.abs(c)) ? 2 : c,
        d = d === undefined ? "." : d,
        t = t === undefined ? "," : t,
        s = n < 0 ? "-" : "",
        i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
        j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};

function in_array($needle, $haystack) {
    var $key = '';

    for ($key in $haystack) {
        if ($haystack[$key] === $needle) {
            return true;
        }
    }

    return false;
}

function storage_supported() {
    try {
        return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
        return false;
    }
}


(function ($, hello, win, doc) {
    "use strict";

    $.fn.equals = function ($p_compareTo) {
        if (!$p_compareTo || this.length !== $p_compareTo.length) {
            return false;
        }

        for (var i = 0; i < this.length; ++i) {
            if (this[i] !== $p_compareTo[i]) {
                return false;
            }
        }

        return true;
    };

    $.fn.isOnScreen = function () {
        var jwin = $(win);

        var viewport =
        {
            top: jwin.scrollTop(),
            left: jwin.scrollLeft()
        };
        viewport.right = viewport.left + jwin.width();
        viewport.bottom = viewport.top + jwin.height();

        var bounds = this.offset();
        bounds.right = bounds.left + this.outerWidth();
        bounds.bottom = bounds.top + this.outerHeight();

        return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));

    };

    hello.scrollEvent = function ($p_enable) {
        var $keys = [37, 38, 39, 40];

        var preventDefault = function (e) {
            e = e || win.event;
            if (e.preventDefault) {
                e.preventDefault();
            }

            e.returnValue = false;
        };

        var keydown = function (e) {
            for (var i = $keys.length; i--;) {
                if (e.keyCode === $keys[i]) {
                    preventDefault(e);
                    return;
                }
            }
        };

        var wheel = function (e) {
            preventDefault(e);
        };

        var disable_scroll = function () {
            if (win.addEventListener) {
                win.addEventListener('DOMMouseScroll', wheel, false);
            }

            win.onmousewheel = doc.onmousewheel = wheel;
            doc.onkeydown = keydown;
        };

        var enable_scroll = function () {
            if (win.removeEventListener) {
                win.removeEventListener('DOMMouseScroll', wheel, false);
            }
            win.onmousewheel = doc.onmousewheel = doc.onkeydown = null;
        };

        if ($p_enable !== undefined && $p_enable === false) {
            disable_scroll();
        }
        else {
            enable_scroll();
        }
    };
})(jQuery, hello, window, document);
/**
 * @author      Milan Kolcak <kolcakmilan@gmail.com>
 * @link        https://www.facebook.com/MilanKolcak
 * @link        https://plus.google.com/u/0/115293588588082222794
 * @created on	08.09.
 * @copyright   2013
 * @version     1.2.1
 */

/**
 * @description Iniciator Hello Core
 *
 * @param {jQuery} $
 * @param {document} doc
 * @param {window} win
 * @returns {Hello_Core}
 */
; (function ($, doc, win, hello) {
    "use strict";

    /**
     * @description Namespace pluginu
     * @type String
     */
    var $a_ns = hello.identifiers.namespace;

    /**
     * @description Meno pluginu
     * @type String
     */
    var $a_plugin = 'core';

    /**
     * @description ID pluginu pre opatovne volanie
     * @type String
     */
    var $a_id_plugin = $a_ns + hello.identifiers.ns_joiner + $a_plugin;

    /**
     *
     * @param {jQuery/HTML} $p_el
     * @param {mixed} $p_opts
     * @returns {Hello_Core}
     */
    function Hello_Core($p_el, $p_opts) {
        var $private_defaults = {};
        this.dom = ($p_el instanceof jQuery ? $p_el : $($p_el));
        this.opts = $.extend($private_defaults, $p_opts, this.dom.data($a_id_plugin + '-opts'));

        var $this = this;

        win.hello_engine = {};

        /****************************************************************\
        |************************ Public Methods ************************|
        \****************************************************************/
        $.extend(this,
            {
                /**
                 * @description Plugin construktor
                 * @returns {this}
                 */
                __construct: function () {
                    h_log('Init: %s', $a_id_plugin);
                    this.autoLoad(this.dom);

                    return this;
                },

                /**
                 * @description Plugin destructor
                 */
                __destruct: function () {
                    this.dom.off('.' + $a_id_plugin);
                    this.dom.find('*').off('.' + $a_id_plugin);
                    this.dom.removeData($a_id_plugin);
                    this.dom = null;
                },

                /**
                 * @description Vyhladanie a inicializacia pluginov nad objektom
                 * @param {html/jQeury} $p_dom
                 */
                autoLoad: function ($p_dom) {
                    var $for_init = [];

                    if ($p_dom instanceof jQuery) {
                        $p_dom = $($p_dom);
                    }

                    $p_dom.find('[data-' + hello.identifiers.init_data + ']').addBack('[data-' + hello.identifiers.init_data + ']').each(function () {
                        var $action = $(this).data(hello.identifiers.init_data);

                        if (!isStringEmpty($action)) {
                            var $init = $(this);

                            $.each($action.split(hello.identifiers.plugin_separator), function (index, $value) {
                                if (!isStringEmpty($value)) {
                                    var $method = $value.split(hello.identifiers.init_args_separator);
                                    var $exelist = $method[0].split(hello.identifiers.ns_separator);
                                    var $function = ($exelist.length > 1 ? ($exelist[0] + hello.identifiers.ns_joiner + $exelist[1]) : $exelist[0]);
                                    var $status = load($init, $function, getArgsFromString($method[1]));

                                    if ($status === true) {
                                        $for_init.push([$function, $init]);
                                    }
                                }
                            });
                        }
                    });

                    var $total = $for_init.length;
                    $.each($for_init, function ($index, $inited) {
                        callConstrunctor($inited);

                        if ($index === $total - 1) {
                            anchorEvent();
                        }
                    });
                }
            });

        /****************************************************************\
        |************************ Private Methods ***********************|
        \****************************************************************/

        /**
         * @description Zavola constructor u pluginu
         * @param {jQuery} $p_dom
         * @param {string} $p_function
         * @param {mixed} $p_args
         * @returns {boolean}
         */
        var callConstrunctor = function ($p_plugin) {
            if ($.isFunction($p_plugin[1].data($p_plugin[0])[hello.identifiers.plugin_constructor])) {
                $p_plugin[1].data($p_plugin[0])[hello.identifiers.plugin_constructor]();

                return true;
            }
            return false;
        };

        /**
         * @description Zavola funkciu nad objektom ak existuje
         * @param {jQuery} $p_dom
         * @param {string} $p_function
         * @param {mixed} $p_args
         * @returns {boolean}
         */
        var call = function ($p_dom, $p_function, $p_args) {
            if ($.isFunction($p_dom[$p_function])) {
                $p_dom[$p_function].apply($p_dom, $p_args);

                return true;
            }
            return false;
        };

        /**
         * @description Vola potrebne pluginy a odfiltruje neexistujuce
         * @param {jQuery} $p_dom
         * @param {string} $p_function
         * @param {mixed} $p_args
         * @return {boolean}
         */
        var load = function ($p_dom, $p_function, $p_args) {
            var $status;

            $.each([$p_dom, win], function ($index, $obj) {
                $status = call($obj, $p_function, $p_args);

                if ($status === true) {
                    h_log('Loading: %s', $p_function);
                    return false;
                }
            });

            if ($status === false) {
                h_log('Constructor cant load: %s', $p_function);
                return false;
            }

            return true;
        };

        var anchorEvent = function () {
            var $anchor = win.location.hash.substring(1);
            if (!isStringEmpty($anchor)) {
                var $def = $anchor.split(':');
                var $trigger = ($def[1] !== undefined ? hello.identifiers['trigger_' + $def[1]] : 'click');
                setTimeout(function () {
                    $this.dom.find('#' + $def[0].replace('t_', '')).trigger($trigger);
                }, 500);
            }
        };

        /****************************************************************\
        |************************* Events Methods ***********************|
        \****************************************************************/
        $this.dom.on(hello.identifiers.trigger_actived_content, function ($p_event, $p_data) {
            $this.autoLoad($(this));
        });
    }

    /**
     * @description Zavolanie instancie nad objektom
     * @param {mixed} $p_opts
     * @returns {jQuery}
     */
    $.fn.hello_core = function ($p_opts) {
        return this.each(function () {
            if (!$(this).data($a_id_plugin)) {
                $(this).data($a_id_plugin, new Hello_Core(this, $p_opts).__construct());
            }
        });
    };

    $.fn.disableSelection = function () {
        /**
         * :not(' + hello.identifiers.document_disable_ignor  + ')'
         */
        return this
            .attr('unselectable', 'on')
            .css('user-select', 'none')
            .on('selectstart', false);
    };

    /**
     * @description Autoinicializacia Hello Core
     */
    $(doc).ready(function () {
        $(this).hello_core();
        if (hello.identifiers.document_disable_select === true) {
            $(this).disableSelection();
        }
    });
})(jQuery, document, window, hello);


/**
 * @author      Milan Kolcak <kolcakmilan@gmail.com>
 * @link        https://www.facebook.com/MilanKolcak
 * @link        https://plus.google.com/u/0/115293588588082222794
 * @created on	06.09.
 * @copyright   2013
 * @version     1.0.0
 */

/**
 * @description Plugin Collapsed
 *
 * @param {jQuery} $
 * @param {hello} hello
 * @returns {Hello_Collapsed}
 */
; (function ($, hello) {
    "use strict";

    /**
     * @description Namespace pluginu
     * @type String
     */
    var $a_ns = hello.identifiers.namespace;

    /**
     * @description Meno pluginu
     * @type String
     */
    var $a_plugin = 'collapsed';

    /**
     * @description ID pluginu pre opatovne volanie
     * @type String
     */
    var $a_id_plugin = $a_ns + hello.identifiers.ns_joiner + $a_plugin;

    /**
     *
     * @param {jQuery/HTML} $p_el
     * @param {mixed} $p_opts
     * @returns {Hello_Collapsed}
     */
    function Hello_Collapsed($p_el, $p_opts) {
        var $private_defaults =
        {
            collapsed: true,
            speed: 500,
            block: '> div:first',
            handler_change: '.collapsed',
            handler_show: null,
            handler_hide: null,
            handler_flag: 'expand',
            move: 'default'
        };

        var $opts = {
            offsetTop: 0
        };

        this.dom = ($p_el instanceof jQuery ? $p_el : $($p_el));
        this.opts = $.extend($private_defaults, $p_opts, this.dom.data($a_id_plugin + '-opts'));

        var $this = this;

        /****************************************************************\
        |************************ Public Methods ************************|
        \****************************************************************/
        $.extend(this,
            {
                /**
                 * @description Plugin construktor
                 * @returns {this}
                 */
                __construct: function () {
                    if (this.opts.move !== "default") {
                        var $dom = (this.opts.block !== false ? this.dom.find(this.opts.block) : this.dom);
                        $opts.offsetTop = $dom.show().offset().top;
                        $dom.hide();
                    }

                    if (this.opts.collapsed) {
                        this.show({}, true);
                    }
                    else {
                        this.hide({}, true);
                    }

                    return this;
                },

                /**
                 * @description Plugin destructor
                 */
                __destruct: function () {
                    this.dom.off('.' + $a_id_plugin);
                    this.dom.find('*').off('.' + $a_id_plugin);
                    this.dom.removeData($a_id_plugin);
                    this.dom = null;
                },

                /**
                 * @description Zobrazi objekt
                 * @param {event} $p_e
                 * @param {boolean} $p_fast
                 * @param {mix} $p_data
                 * @param {string} $p_block
                 * @returns {this}
                 */
                show: function ($p_e, $p_fast, $p_data, $p_block) {
                    var $v_opts = $.extend(this.opts, $p_data);
                    var $dom = null;

                    if ($p_block !== undefined) {
                        $dom = $this.dom.find($p_block);

                        if (!$dom.is(':visible')) {
                            fswitch($v_opts, $dom, $p_fast, true);
                            return;
                        }
                    }

                    fswitch($v_opts, ($dom === null ? ($v_opts.block !== false ? this.dom.find($v_opts.block) : this.dom) : $dom), $p_fast);

                    return this;
                },

                /**
                 * @description Skryje objekt
                 * @param @param {event} $p_e
                 * @param {boolean} $p_fast
                 * @param {mix} $p_data
                 * @returns {this}
                 */
                hide: function ($p_e, $p_fast, $p_data, $p_callback) {
                    var $v_opts = $.extend(this.opts, $p_data);

                    hide($p_fast, ($v_opts.block !== false ? this.dom.find($v_opts.block).filter(':visible') : this.dom), $v_opts, function () {
                        if ($p_callback && typeof ($p_callback) === 'function') {
                            $p_callback();
                        }
                    });

                    return this;
                }
            });

        /****************************************************************\
        |************************ Private Methods ***********************|
        \****************************************************************/

        var fswitch = function ($v_opts, $p_dom, $p_fast, $p_hide) {
            var $speed = ($p_fast !== undefined && $p_fast === true ? 0 : $v_opts.speed);

            var $default = function ($p_dom) {
                if ($p_hide === true) {
                    $this.hide({}, $p_fast, $v_opts, function () {
                        show($p_fast, $p_dom, $v_opts);
                    });

                    return;
                }

                if (!$p_dom.is(':visible')) {
                    show($p_fast, $p_dom, $v_opts);
                }
            };

            var $animated = function ($p_goto, $p_dom) {
                $("html, body").animate({ scrollTop: $p_goto }, $speed, $default($p_dom));
            };

            switch ($v_opts.move) {
                case "this":
                    $animated($opts.offsetTop, $p_dom); return;
                    break;

                case "top":
                    $animated(0, $p_dom); return;
                    break;

                case "default":
                    $default($p_dom); return;
                    break;
            }

            $animated($v_opts.move, $p_dom);
        }

        /**
         * @description Skrytie definovaneho blocku
         * @param {boolean} $p_fast
         * @param {jQuery} $p_dom
         * @param {mix} $p_opts
         * @returns {$this}
         */
        var hide = function ($p_fast, $p_dom, $p_opts, $p_callback) {
            if ($p_dom.is(':visible')) {
                if ($p_fast !== undefined && $p_fast === true) {
                    $this.dom.find($p_opts.handler_change).removeClass($p_opts.handler_flag);
                    $p_dom.hide().done(function () {
                        if ($p_callback && typeof ($p_callback) === 'function') {
                            $p_callback();
                        }
                    });
                }
                else {
                    $p_dom.slideUp($p_opts.speed, function () {
                        $this.dom.find($p_opts.handler_change).removeClass($p_opts.handler_flag);
                        if ($p_callback && typeof ($p_callback) === 'function') {
                            $p_callback();
                        }
                    });
                }
            }
            else {
                if ($p_callback && typeof ($p_callback) === 'function') {
                    $p_callback();
                }
            }

            return $this;
        };

        /**
         * @description Zobrazenie definovaneho blocku
         * @param {boolean} $p_fast
         * @param {jQuery} $p_dom
         * @param {mix} $p_opts
         * @returns {$this}
         */
        var show = function ($p_fast, $p_dom, $p_opts) {
            if ($p_fast !== undefined && $p_fast === true) {
                $this.dom.find($p_opts.handler_change).addClass($p_opts.handler_flag);
                $p_dom.show();
            }
            else {
                $p_dom.slideDown($p_opts.speed, function () {
                    $this.dom.find($p_opts.handler_change).addClass($p_opts.handler_flag);
                });
            }

            return $this;
        };

        /****************************************************************\
        |************************* Events Methods ***********************|
        \****************************************************************/

        /**
         * @description Po kliknuti na handler zmeni stav objektu
         */
        this.dom.find(this.opts.handler_change).on('click' + '.' + $a_id_plugin, function ($p_e, $p_data) {
            $this.dom.trigger(hello.identifiers.trigger_change, [$p_data]);
        });

        /**
         * @description Po kliknuti zobrazi objekt
         */
        this.dom.find(this.opts.handler_show).on('click' + '.' + $a_id_plugin, function ($p_e, $p_data) {
            $this.dom.trigger(hello.identifiers.trigger_show, [$p_data]);
        });

        /**
         * @description Po kliknuti skryje objekt
         */
        this.dom.find(this.opts.handler_hide).on('click' + '.' + $a_id_plugin, function ($p_e, $p_data) {
            $this.dom.trigger(hello.identifiers.trigger_hidden, [$p_data]);
        });

        /**
         * @description Trigger na zmenu stavu objektu
         */
        this.dom.on(hello.identifiers.trigger_change + '.' + $a_id_plugin, function ($p_e, $p_data) {
            var $dom = ($p_data !== undefined && $p_data.block !== undefined ? $this.dom.find($p_data.block) : ($this.opts.block !== false ? $this.dom.find($this.opts.block) : $this.dom));

            $this.dom.trigger(!$dom.is(':visible') ? hello.identifiers.trigger_show : hello.identifiers.trigger_hidden, [$p_data]);
        });

        /**
         * @description Trigger na zobrazenie objektu
         */
        this.dom.on(hello.identifiers.trigger_show + '.' + $a_id_plugin, function ($p_e, $p_data) {
            $this.show($p_e, false, ($p_data !== undefined && $p_data.data !== undefined ? $p_data.data : {}), ($p_data !== undefined && $p_data.block !== undefined ? $p_data.block : undefined));
        });

        /**
         * @description Trigger na zobrazenie objektu
         */
        this.dom.on(hello.identifiers.trigger_hidden + '.' + $a_id_plugin, function ($p_e, $p_data) {
            $this.hide($p_e, false, ($p_data !== undefined && $p_data.data !== undefined ? $p_data.data : {}));
        });
    }

    /**
     * @description Zavolanie instancie nad objektom
     * @param {mixed} $p_opts
     * @returns {jQuery}
     */
    $.fn.hello_collapsed = function ($p_opts) {
        return this.each(function () {
            if (!$(this).data($a_id_plugin)) {
                $(this).data($a_id_plugin, new Hello_Collapsed(this, $p_opts));
            }
        });
    };
})(jQuery, hello);
/**
 * @author      Milan Kolcak <kolcakmilan@gmail.com>
 * @link        https://www.facebook.com/MilanKolcak
 * @link        https://plus.google.com/u/0/115293588588082222794
 * @created on	06.09.
 * @copyright   2013
 * @version     1.0.0
 */

/**
 * @description Globalne ovladacie prvky pre rozne akcie
 *
 * @param {jQuery} $
 * @param {hello} hello
 * @returns {Hello_Special_Scroll}
 */
; (function ($, doc, hello, win) {
    "use strict";

    /**
     * @description Namespace pluginu
     * @type String
     */
    var $a_ns = hello.identifiers.namespace;

    /**
     * @description Meno pluginu
     * @type String
     */
    var $a_plugin = 'special_scroll';

    /**
     * @description ID pluginu pre opatovne volanie
     * @type String
     */
    var $a_id_plugin = $a_ns + hello.identifiers.ns_joiner + $a_plugin;

    /**
     *
     * @param {jQuery/HTML} $p_el
     * @param {mixed} $p_opts
     * @returns {Hello_Special_Scroll}
     */
    function Hello_Special_Scroll($p_el, $p_opts) {
        var $private_defaults =
        {
            start: 'body',
            gotop: '._go-top',
            showmajor: '._show-major',
            majorhidden: true
        };

        this.dom = ($p_el instanceof jQuery ? $p_el : $($p_el));
        this.opts = $.extend($private_defaults, $p_opts, this.dom.data($a_id_plugin + '-opts'));

        var $this = this;

        /****************************************************************\
        |************************ Public Methods ************************|
        \****************************************************************/
        $.extend(this,
            {
                /**
                 * @description Plugin construktor
                 * @returns {this}
                 */
                __construct: function () {
                    this.dom.hide();
                    this.scroll();
                    return this;
                },

                /**
                 * @description Plugin destructor
                 */
                __destruct: function () {
                    this.dom.off('.' + $a_id_plugin);
                    this.dom.find('*').off('.' + $a_id_plugin);
                    this.dom.removeData($a_id_plugin);
                    this.dom = null;
                },

                scroll: function () {
                    showElement(actualScrollPosition(), actionElementPosition(this.opts.start));
                }
            });

        /****************************************************************\
        |************************ Private Methods ***********************|
        \****************************************************************/
        var actualScrollPosition = function () {
            return $(win).scrollTop();
        };

        var actionElementPosition = function ($ident) {
            var $el = $($ident);
            if ($el.offset()) {
                return ($el.offset().top);
            }
        };

        var showElement = function ($s_position, $action_position) {
            if ($s_position > $action_position) {
                if (!$this.dom.is(":visible")) {
                    $this.dom.show();
                    if ($this.opts.majorhidden === false) {
                        $this.dom.find('._major').show();
                    }
                    $this.dom.find('._action-btn').fadeIn(300);
                }
            }
            else {
                if ($this.dom.is(":visible")) {
                    $this.dom.hide();
                    $this.dom.find('._major').hide();
                    $this.dom.find('._action-btn').hide();
                }
            }
        };

        /****************************************************************\
        |************************* Events Methods ***********************|
        \****************************************************************/

        /**
         * @description Cavolanie akcie
         * @param {event} $p_e
         */
        $(win).on('scroll' + '.' + $a_id_plugin, function ($p_e) {
            $this.scroll();
        });

        $this.dom.find($this.opts.gotop).on('click' + '.' + $a_id_plugin, function ($p_e) {
            $('body,html').animate({ scrollTop: 0 }, 150);
        });

        $this.dom.find($this.opts.showmajor).on('click' + '.' + $a_id_plugin, function ($p_e) {
            var $toggle = $this.dom.find('._major');

            if (!$toggle.is(":visible")) {
                $toggle.slideDown(150);
            }
            else {
                $toggle.slideUp(150);
            }
        });
    }

    /**
     * @description Zavolanie instancie nad objektom
     * @param {mixed} $p_opts
     * @returns {jQuery}
     */
    $.fn.hello_special_scroll = function ($p_opts) {
        return this.each(function () {
            if (!$(this).data($a_id_plugin)) {
                $(this).data($a_id_plugin, new Hello_Special_Scroll(this, $p_opts));
            }
        });
    };
})(jQuery, document, hello, window);
/*! sprintf.js | Copyright (c) 2007-2013 Alexandru Marasteanu <hello at alexei dot ro> | 3 clause BSD license */(function (e) { function r(e) { return Object.prototype.toString.call(e).slice(8, -1).toLowerCase() } function i(e, t) { for (var n = []; t > 0; n[--t] = e); return n.join("") } var t = function () { return t.cache.hasOwnProperty(arguments[0]) || (t.cache[arguments[0]] = t.parse(arguments[0])), t.format.call(null, t.cache[arguments[0]], arguments) }; t.format = function (e, n) { var s = 1, o = e.length, u = "", a, f = [], l, c, h, p, d, v; for (l = 0; l < o; l++) { u = r(e[l]); if (u === "string") f.push(e[l]); else if (u === "array") { h = e[l]; if (h[2]) { a = n[s]; for (c = 0; c < h[2].length; c++) { if (!a.hasOwnProperty(h[2][c])) throw t('[sprintf] property "%s" does not exist', h[2][c]); a = a[h[2][c]] } } else h[1] ? a = n[h[1]] : a = n[s++]; if (/[^s]/.test(h[8]) && r(a) != "number") throw t("[sprintf] expecting number but found %s", r(a)); switch (h[8]) { case "b": a = a.toString(2); break; case "c": a = String.fromCharCode(a); break; case "d": a = parseInt(a, 10); break; case "e": a = h[7] ? a.toExponential(h[7]) : a.toExponential(); break; case "f": a = h[7] ? parseFloat(a).toFixed(h[7]) : parseFloat(a); break; case "o": a = a.toString(8); break; case "s": a = (a = String(a)) && h[7] ? a.substring(0, h[7]) : a; break; case "u": a >>>= 0; break; case "x": a = a.toString(16); break; case "X": a = a.toString(16).toUpperCase() }a = /[def]/.test(h[8]) && h[3] && a >= 0 ? "+" + a : a, d = h[4] ? h[4] == "0" ? "0" : h[4].charAt(1) : " ", v = h[6] - String(a).length, p = h[6] ? i(d, v) : "", f.push(h[5] ? a + p : p + a) } } return f.join("") }, t.cache = {}, t.parse = function (e) { var t = e, n = [], r = [], i = 0; while (t) { if ((n = /^[^\x25]+/.exec(t)) !== null) r.push(n[0]); else if ((n = /^\x25{2}/.exec(t)) !== null) r.push("%"); else { if ((n = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(t)) === null) throw "[sprintf] huh?"; if (n[2]) { i |= 1; var s = [], o = n[2], u = []; if ((u = /^([a-z_][a-z_\d]*)/i.exec(o)) === null) throw "[sprintf] huh?"; s.push(u[1]); while ((o = o.substring(u[0].length)) !== "") if ((u = /^\.([a-z_][a-z_\d]*)/i.exec(o)) !== null) s.push(u[1]); else { if ((u = /^\[(\d+)\]/.exec(o)) === null) throw "[sprintf] huh?"; s.push(u[1]) } n[2] = s } else i |= 2; if (i === 3) throw "[sprintf] mixing positional and named placeholders is not (yet) supported"; r.push(n) } t = t.substring(n[0].length) } return r }; var n = function (e, n, r) { return r = n.slice(0), r.splice(0, 0, e), t.apply(null, r) }; e.sprintf = t, e.vsprintf = n })(typeof exports != "undefined" ? exports : window);

/* Chosen v1.1.0 | (c) 2011-2013 by Harvest | MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md */
!function () { var a, AbstractChosen, Chosen, SelectParser, b, c = {}.hasOwnProperty, d = function (a, b) { function d() { this.constructor = a } for (var e in b) c.call(b, e) && (a[e] = b[e]); return d.prototype = b.prototype, a.prototype = new d, a.__super__ = b.prototype, a }; SelectParser = function () { function SelectParser() { this.options_index = 0, this.parsed = [] } return SelectParser.prototype.add_node = function (a) { return "OPTGROUP" === a.nodeName.toUpperCase() ? this.add_group(a) : this.add_option(a) }, SelectParser.prototype.add_group = function (a) { var b, c, d, e, f, g; for (b = this.parsed.length, this.parsed.push({ array_index: b, group: !0, label: this.escapeExpression(a.label), children: 0, disabled: a.disabled }), f = a.childNodes, g = [], d = 0, e = f.length; e > d; d++)c = f[d], g.push(this.add_option(c, b, a.disabled)); return g }, SelectParser.prototype.add_option = function (a, b, c) { return "OPTION" === a.nodeName.toUpperCase() ? ("" !== a.text ? (null != b && (this.parsed[b].children += 1), this.parsed.push({ array_index: this.parsed.length, options_index: this.options_index, value: a.value, text: a.text, html: a.innerHTML, selected: a.selected, disabled: c === !0 ? c : a.disabled, group_array_index: b, classes: a.className, style: a.style.cssText })) : this.parsed.push({ array_index: this.parsed.length, options_index: this.options_index, empty: !0 }), this.options_index += 1) : void 0 }, SelectParser.prototype.escapeExpression = function (a) { var b, c; return null == a || a === !1 ? "" : /[\&\<\>\"\'\`]/.test(a) ? (b = { "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" }, c = /&(?!\w+;)|[\<\>\"\'\`]/g, a.replace(c, function (a) { return b[a] || "&amp;" })) : a }, SelectParser }(), SelectParser.select_to_array = function (a) { var b, c, d, e, f; for (c = new SelectParser, f = a.childNodes, d = 0, e = f.length; e > d; d++)b = f[d], c.add_node(b); return c.parsed }, AbstractChosen = function () { function AbstractChosen(a, b) { this.form_field = a, this.options = null != b ? b : {}, AbstractChosen.browser_is_supported() && (this.is_multiple = this.form_field.multiple, this.set_default_text(), this.set_default_values(), this.setup(), this.set_up_html(), this.register_observers()) } return AbstractChosen.prototype.set_default_values = function () { var a = this; return this.click_test_action = function (b) { return a.test_active_click(b) }, this.activate_action = function (b) { return a.activate_field(b) }, this.active_field = !1, this.mouse_on_container = !1, this.results_showing = !1, this.result_highlighted = null, this.allow_single_deselect = null != this.options.allow_single_deselect && null != this.form_field.options[0] && "" === this.form_field.options[0].text ? this.options.allow_single_deselect : !1, this.disable_search_threshold = this.options.disable_search_threshold || 0, this.disable_search = this.options.disable_search || !1, this.enable_split_word_search = null != this.options.enable_split_word_search ? this.options.enable_split_word_search : !0, this.group_search = null != this.options.group_search ? this.options.group_search : !0, this.search_contains = this.options.search_contains || !1, this.single_backstroke_delete = null != this.options.single_backstroke_delete ? this.options.single_backstroke_delete : !0, this.max_selected_options = this.options.max_selected_options || 1 / 0, this.inherit_select_classes = this.options.inherit_select_classes || !1, this.display_selected_options = null != this.options.display_selected_options ? this.options.display_selected_options : !0, this.display_disabled_options = null != this.options.display_disabled_options ? this.options.display_disabled_options : !0 }, AbstractChosen.prototype.set_default_text = function () { return this.default_text = this.form_field.getAttribute("data-placeholder") ? this.form_field.getAttribute("data-placeholder") : this.is_multiple ? this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text : this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text, this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text }, AbstractChosen.prototype.mouse_enter = function () { return this.mouse_on_container = !0 }, AbstractChosen.prototype.mouse_leave = function () { return this.mouse_on_container = !1 }, AbstractChosen.prototype.input_focus = function () { var a = this; if (this.is_multiple) { if (!this.active_field) return setTimeout(function () { return a.container_mousedown() }, 50) } else if (!this.active_field) return this.activate_field() }, AbstractChosen.prototype.input_blur = function () { var a = this; return this.mouse_on_container ? void 0 : (this.active_field = !1, setTimeout(function () { return a.blur_test() }, 100)) }, AbstractChosen.prototype.results_option_build = function (a) { var b, c, d, e, f; for (b = "", f = this.results_data, d = 0, e = f.length; e > d; d++)c = f[d], b += c.group ? this.result_add_group(c) : this.result_add_option(c), (null != a ? a.first : void 0) && (c.selected && this.is_multiple ? this.choice_build(c) : c.selected && !this.is_multiple && this.single_set_selected_text(c.text)); return b }, AbstractChosen.prototype.result_add_option = function (a) { var b, c; return a.search_match ? this.include_option_in_results(a) ? (b = [], a.disabled || a.selected && this.is_multiple || b.push("active-result"), !a.disabled || a.selected && this.is_multiple || b.push("disabled-result"), a.selected && b.push("result-selected"), null != a.group_array_index && b.push("group-option"), "" !== a.classes && b.push(a.classes), c = document.createElement("li"), c.className = b.join(" "), c.style.cssText = a.style, c.setAttribute("data-option-array-index", a.array_index), c.innerHTML = a.search_text, this.outerHTML(c)) : "" : "" }, AbstractChosen.prototype.result_add_group = function (a) { var b; return a.search_match || a.group_match ? a.active_options > 0 ? (b = document.createElement("li"), b.className = "group-result", b.innerHTML = a.search_text, this.outerHTML(b)) : "" : "" }, AbstractChosen.prototype.results_update_field = function () { return this.set_default_text(), this.is_multiple || this.results_reset_cleanup(), this.result_clear_highlight(), this.results_build(), this.results_showing ? this.winnow_results() : void 0 }, AbstractChosen.prototype.reset_single_select_options = function () { var a, b, c, d, e; for (d = this.results_data, e = [], b = 0, c = d.length; c > b; b++)a = d[b], a.selected ? e.push(a.selected = !1) : e.push(void 0); return e }, AbstractChosen.prototype.results_toggle = function () { return this.results_showing ? this.results_hide() : this.results_show() }, AbstractChosen.prototype.results_search = function () { return this.results_showing ? this.winnow_results() : this.results_show() }, AbstractChosen.prototype.winnow_results = function () { var a, b, c, d, e, f, g, h, i, j, k, l, m; for (this.no_results_clear(), e = 0, g = this.get_search_text(), a = g.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), d = this.search_contains ? "" : "^", c = new RegExp(d + a, "i"), j = new RegExp(a, "i"), m = this.results_data, k = 0, l = m.length; l > k; k++)b = m[k], b.search_match = !1, f = null, this.include_option_in_results(b) && (b.group && (b.group_match = !1, b.active_options = 0), null != b.group_array_index && this.results_data[b.group_array_index] && (f = this.results_data[b.group_array_index], 0 === f.active_options && f.search_match && (e += 1), f.active_options += 1), (!b.group || this.group_search) && (b.search_text = b.group ? b.label : b.html, b.search_match = this.search_string_match(b.search_text, c), b.search_match && !b.group && (e += 1), b.search_match ? (g.length && (h = b.search_text.search(j), i = b.search_text.substr(0, h + g.length) + "</em>" + b.search_text.substr(h + g.length), b.search_text = i.substr(0, h) + "<em>" + i.substr(h)), null != f && (f.group_match = !0)) : null != b.group_array_index && this.results_data[b.group_array_index].search_match && (b.search_match = !0))); return this.result_clear_highlight(), 1 > e && g.length ? (this.update_results_content(""), this.no_results(g)) : (this.update_results_content(this.results_option_build()), this.winnow_results_set_highlight()) }, AbstractChosen.prototype.search_string_match = function (a, b) { var c, d, e, f; if (b.test(a)) return !0; if (this.enable_split_word_search && (a.indexOf(" ") >= 0 || 0 === a.indexOf("[")) && (d = a.replace(/\[|\]/g, "").split(" "), d.length)) for (e = 0, f = d.length; f > e; e++)if (c = d[e], b.test(c)) return !0 }, AbstractChosen.prototype.choices_count = function () { var a, b, c, d; if (null != this.selected_option_count) return this.selected_option_count; for (this.selected_option_count = 0, d = this.form_field.options, b = 0, c = d.length; c > b; b++)a = d[b], a.selected && (this.selected_option_count += 1); return this.selected_option_count }, AbstractChosen.prototype.choices_click = function (a) { return a.preventDefault(), this.results_showing || this.is_disabled ? void 0 : this.results_show() }, AbstractChosen.prototype.keyup_checker = function (a) { var b, c; switch (b = null != (c = a.which) ? c : a.keyCode, this.search_field_scale(), b) { case 8: if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) return this.keydown_backstroke(); if (!this.pending_backstroke) return this.result_clear_highlight(), this.results_search(); break; case 13: if (a.preventDefault(), this.results_showing) return this.result_select(a); break; case 27: return this.results_showing && this.results_hide(), !0; case 9: case 38: case 40: case 16: case 91: case 17: break; default: return this.results_search() } }, AbstractChosen.prototype.clipboard_event_checker = function () { var a = this; return setTimeout(function () { return a.results_search() }, 50) }, AbstractChosen.prototype.container_width = function () { return null != this.options.width ? this.options.width : "" + this.form_field.offsetWidth + "px" }, AbstractChosen.prototype.include_option_in_results = function (a) { return this.is_multiple && !this.display_selected_options && a.selected ? !1 : !this.display_disabled_options && a.disabled ? !1 : a.empty ? !1 : !0 }, AbstractChosen.prototype.search_results_touchstart = function (a) { return this.touch_started = !0, this.search_results_mouseover(a) }, AbstractChosen.prototype.search_results_touchmove = function (a) { return this.touch_started = !1, this.search_results_mouseout(a) }, AbstractChosen.prototype.search_results_touchend = function (a) { return this.touch_started ? this.search_results_mouseup(a) : void 0 }, AbstractChosen.prototype.outerHTML = function (a) { var b; return a.outerHTML ? a.outerHTML : (b = document.createElement("div"), b.appendChild(a), b.innerHTML) }, AbstractChosen.browser_is_supported = function () { return "Microsoft Internet Explorer" === window.navigator.appName ? document.documentMode >= 8 : /iP(od|hone)/i.test(window.navigator.userAgent) ? !1 : /Android/i.test(window.navigator.userAgent) && /Mobile/i.test(window.navigator.userAgent) ? !1 : !0 }, AbstractChosen.default_multiple_text = "Select Some Options", AbstractChosen.default_single_text = "Select an Option", AbstractChosen.default_no_result_text = "No results match", AbstractChosen }(), a = jQuery, a.fn.extend({ chosen: function (b) { return AbstractChosen.browser_is_supported() ? this.each(function () { var c, d; c = a(this), d = c.data("chosen"), "destroy" === b && d ? d.destroy() : d || c.data("chosen", new Chosen(this, b)) }) : this } }), Chosen = function (c) { function Chosen() { return b = Chosen.__super__.constructor.apply(this, arguments) } return d(Chosen, c), Chosen.prototype.setup = function () { return this.form_field_jq = a(this.form_field), this.current_selectedIndex = this.form_field.selectedIndex, this.is_rtl = this.form_field_jq.hasClass("chosen-rtl") }, Chosen.prototype.set_up_html = function () { var b, c; return b = ["chosen-container"], b.push("chosen-container-" + (this.is_multiple ? "multi" : "single")), this.inherit_select_classes && this.form_field.className && b.push(this.form_field.className), this.is_rtl && b.push("chosen-rtl"), c = { "class": b.join(" "), style: "width: " + this.container_width() + ";", title: this.form_field.title }, this.form_field.id.length && (c.id = this.form_field.id.replace(/[^\w]/g, "_") + "_chosen"), this.container = a("<div />", c), this.is_multiple ? this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>') : this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'), this.form_field_jq.hide().after(this.container), this.dropdown = this.container.find("div.chosen-drop").first(), this.search_field = this.container.find("input").first(), this.search_results = this.container.find("ul.chosen-results").first(), this.search_field_scale(), this.search_no_results = this.container.find("li.no-results").first(), this.is_multiple ? (this.search_choices = this.container.find("ul.chosen-choices").first(), this.search_container = this.container.find("li.search-field").first()) : (this.search_container = this.container.find("div.chosen-search").first(), this.selected_item = this.container.find(".chosen-single").first()), this.results_build(), this.set_tab_index(), this.set_label_behavior(), this.form_field_jq.trigger("chosen:ready", { chosen: this }) }, Chosen.prototype.register_observers = function () { var a = this; return this.container.bind("mousedown.chosen", function (b) { a.container_mousedown(b) }), this.container.bind("mouseup.chosen", function (b) { a.container_mouseup(b) }), this.container.bind("mouseenter.chosen", function (b) { a.mouse_enter(b) }), this.container.bind("mouseleave.chosen", function (b) { a.mouse_leave(b) }), this.search_results.bind("mouseup.chosen", function (b) { a.search_results_mouseup(b) }), this.search_results.bind("mouseover.chosen", function (b) { a.search_results_mouseover(b) }), this.search_results.bind("mouseout.chosen", function (b) { a.search_results_mouseout(b) }), this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen", function (b) { a.search_results_mousewheel(b) }), this.search_results.bind("touchstart.chosen", function (b) { a.search_results_touchstart(b) }), this.search_results.bind("touchmove.chosen", function (b) { a.search_results_touchmove(b) }), this.search_results.bind("touchend.chosen", function (b) { a.search_results_touchend(b) }), this.form_field_jq.bind("chosen:updated.chosen", function (b) { a.results_update_field(b) }), this.form_field_jq.bind("chosen:activate.chosen", function (b) { a.activate_field(b) }), this.form_field_jq.bind("chosen:open.chosen", function (b) { a.container_mousedown(b) }), this.form_field_jq.bind("chosen:close.chosen", function (b) { a.input_blur(b) }), this.search_field.bind("blur.chosen", function (b) { a.input_blur(b) }), this.search_field.bind("keyup.chosen", function (b) { a.keyup_checker(b) }), this.search_field.bind("keydown.chosen", function (b) { a.keydown_checker(b) }), this.search_field.bind("focus.chosen", function (b) { a.input_focus(b) }), this.search_field.bind("cut.chosen", function (b) { a.clipboard_event_checker(b) }), this.search_field.bind("paste.chosen", function (b) { a.clipboard_event_checker(b) }), this.is_multiple ? this.search_choices.bind("click.chosen", function (b) { a.choices_click(b) }) : this.container.bind("click.chosen", function (a) { a.preventDefault() }) }, Chosen.prototype.destroy = function () { return a(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action), this.search_field[0].tabIndex && (this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex), this.container.remove(), this.form_field_jq.removeData("chosen"), this.form_field_jq.show() }, Chosen.prototype.search_field_disabled = function () { return this.is_disabled = this.form_field_jq[0].disabled, this.is_disabled ? (this.container.addClass("chosen-disabled"), this.search_field[0].disabled = !0, this.is_multiple || this.selected_item.unbind("focus.chosen", this.activate_action), this.close_field()) : (this.container.removeClass("chosen-disabled"), this.search_field[0].disabled = !1, this.is_multiple ? void 0 : this.selected_item.bind("focus.chosen", this.activate_action)) }, Chosen.prototype.container_mousedown = function (b) { return this.is_disabled || (b && "mousedown" === b.type && !this.results_showing && b.preventDefault(), null != b && a(b.target).hasClass("search-choice-close")) ? void 0 : (this.active_field ? this.is_multiple || !b || a(b.target)[0] !== this.selected_item[0] && !a(b.target).parents("a.chosen-single").length || (b.preventDefault(), this.results_toggle()) : (this.is_multiple && this.search_field.val(""), a(this.container[0].ownerDocument).bind("click.chosen", this.click_test_action), this.results_show()), this.activate_field()) }, Chosen.prototype.container_mouseup = function (a) { return "ABBR" !== a.target.nodeName || this.is_disabled ? void 0 : this.results_reset(a) }, Chosen.prototype.search_results_mousewheel = function (a) { var b; return a.originalEvent && (b = -a.originalEvent.wheelDelta || a.originalEvent.detail), null != b ? (a.preventDefault(), "DOMMouseScroll" === a.type && (b = 40 * b), this.search_results.scrollTop(b + this.search_results.scrollTop())) : void 0 }, Chosen.prototype.blur_test = function () { return !this.active_field && this.container.hasClass("chosen-container-active") ? this.close_field() : void 0 }, Chosen.prototype.close_field = function () { return a(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action), this.active_field = !1, this.results_hide(), this.container.removeClass("chosen-container-active"), this.clear_backstroke(), this.show_search_field_default(), this.search_field_scale() }, Chosen.prototype.activate_field = function () { return this.container.addClass("chosen-container-active"), this.active_field = !0, this.search_field.val(this.search_field.val()), this.search_field.focus() }, Chosen.prototype.test_active_click = function (b) { var c; return c = a(b.target).closest(".chosen-container"), c.length && this.container[0] === c[0] ? this.active_field = !0 : this.close_field() }, Chosen.prototype.results_build = function () { return this.parsing = !0, this.selected_option_count = null, this.results_data = SelectParser.select_to_array(this.form_field), this.is_multiple ? this.search_choices.find("li.search-choice").remove() : this.is_multiple || (this.single_set_selected_text(), this.disable_search || this.form_field.options.length <= this.disable_search_threshold ? (this.search_field[0].readOnly = !0, this.container.addClass("chosen-container-single-nosearch")) : (this.search_field[0].readOnly = !1, this.container.removeClass("chosen-container-single-nosearch"))), this.update_results_content(this.results_option_build({ first: !0 })), this.search_field_disabled(), this.show_search_field_default(), this.search_field_scale(), this.parsing = !1 }, Chosen.prototype.result_do_highlight = function (a) { var b, c, d, e, f; if (a.length) { if (this.result_clear_highlight(), this.result_highlight = a, this.result_highlight.addClass("highlighted"), d = parseInt(this.search_results.css("maxHeight"), 10), f = this.search_results.scrollTop(), e = d + f, c = this.result_highlight.position().top + this.search_results.scrollTop(), b = c + this.result_highlight.outerHeight(), b >= e) return this.search_results.scrollTop(b - d > 0 ? b - d : 0); if (f > c) return this.search_results.scrollTop(c) } }, Chosen.prototype.result_clear_highlight = function () { return this.result_highlight && this.result_highlight.removeClass("highlighted"), this.result_highlight = null }, Chosen.prototype.results_show = function () { return this.is_multiple && this.max_selected_options <= this.choices_count() ? (this.form_field_jq.trigger("chosen:maxselected", { chosen: this }), !1) : (this.container.addClass("chosen-with-drop"), this.results_showing = !0, this.search_field.focus(), this.search_field.val(this.search_field.val()), this.winnow_results(), this.form_field_jq.trigger("chosen:showing_dropdown", { chosen: this })) }, Chosen.prototype.update_results_content = function (a) { return this.search_results.html(a) }, Chosen.prototype.results_hide = function () { return this.results_showing && (this.result_clear_highlight(), this.container.removeClass("chosen-with-drop"), this.form_field_jq.trigger("chosen:hiding_dropdown", { chosen: this })), this.results_showing = !1 }, Chosen.prototype.set_tab_index = function () { var a; return this.form_field.tabIndex ? (a = this.form_field.tabIndex, this.form_field.tabIndex = -1, this.search_field[0].tabIndex = a) : void 0 }, Chosen.prototype.set_label_behavior = function () { var b = this; return this.form_field_label = this.form_field_jq.parents("label"), !this.form_field_label.length && this.form_field.id.length && (this.form_field_label = a("label[for='" + this.form_field.id + "']")), this.form_field_label.length > 0 ? this.form_field_label.bind("click.chosen", function (a) { return b.is_multiple ? b.container_mousedown(a) : b.activate_field() }) : void 0 }, Chosen.prototype.show_search_field_default = function () { return this.is_multiple && this.choices_count() < 1 && !this.active_field ? (this.search_field.val(this.default_text), this.search_field.addClass("default")) : (this.search_field.val(""), this.search_field.removeClass("default")) }, Chosen.prototype.search_results_mouseup = function (b) { var c; return c = a(b.target).hasClass("active-result") ? a(b.target) : a(b.target).parents(".active-result").first(), c.length ? (this.result_highlight = c, this.result_select(b), this.search_field.focus()) : void 0 }, Chosen.prototype.search_results_mouseover = function (b) { var c; return c = a(b.target).hasClass("active-result") ? a(b.target) : a(b.target).parents(".active-result").first(), c ? this.result_do_highlight(c) : void 0 }, Chosen.prototype.search_results_mouseout = function (b) { return a(b.target).hasClass("active-result") ? this.result_clear_highlight() : void 0 }, Chosen.prototype.choice_build = function (b) { var c, d, e = this; return c = a("<li />", { "class": "search-choice" }).html("<span>" + b.html + "</span>"), b.disabled ? c.addClass("search-choice-disabled") : (d = a("<a />", { "class": "search-choice-close", "data-option-array-index": b.array_index }), d.bind("click.chosen", function (a) { return e.choice_destroy_link_click(a) }), c.append(d)), this.search_container.before(c) }, Chosen.prototype.choice_destroy_link_click = function (b) { return b.preventDefault(), b.stopPropagation(), this.is_disabled ? void 0 : this.choice_destroy(a(b.target)) }, Chosen.prototype.choice_destroy = function (a) { return this.result_deselect(a[0].getAttribute("data-option-array-index")) ? (this.show_search_field_default(), this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1 && this.results_hide(), a.parents("li").first().remove(), this.search_field_scale()) : void 0 }, Chosen.prototype.results_reset = function () { return this.reset_single_select_options(), this.form_field.options[0].selected = !0, this.single_set_selected_text(), this.show_search_field_default(), this.results_reset_cleanup(), this.form_field_jq.trigger("change"), this.active_field ? this.results_hide() : void 0 }, Chosen.prototype.results_reset_cleanup = function () { return this.current_selectedIndex = this.form_field.selectedIndex, this.selected_item.find("abbr").remove() }, Chosen.prototype.result_select = function (a) { var b, c; return this.result_highlight ? (b = this.result_highlight, this.result_clear_highlight(), this.is_multiple && this.max_selected_options <= this.choices_count() ? (this.form_field_jq.trigger("chosen:maxselected", { chosen: this }), !1) : (this.is_multiple ? b.removeClass("active-result") : this.reset_single_select_options(), c = this.results_data[b[0].getAttribute("data-option-array-index")], c.selected = !0, this.form_field.options[c.options_index].selected = !0, this.selected_option_count = null, this.is_multiple ? this.choice_build(c) : this.single_set_selected_text(c.text), (a.metaKey || a.ctrlKey) && this.is_multiple || this.results_hide(), this.search_field.val(""), (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) && this.form_field_jq.trigger("change", { selected: this.form_field.options[c.options_index].value }), this.current_selectedIndex = this.form_field.selectedIndex, this.search_field_scale())) : void 0 }, Chosen.prototype.single_set_selected_text = function (a) { return null == a && (a = this.default_text), a === this.default_text ? this.selected_item.addClass("chosen-default") : (this.single_deselect_control_build(), this.selected_item.removeClass("chosen-default")), this.selected_item.find("span").text(a) }, Chosen.prototype.result_deselect = function (a) { var b; return b = this.results_data[a], this.form_field.options[b.options_index].disabled ? !1 : (b.selected = !1, this.form_field.options[b.options_index].selected = !1, this.selected_option_count = null, this.result_clear_highlight(), this.results_showing && this.winnow_results(), this.form_field_jq.trigger("change", { deselected: this.form_field.options[b.options_index].value }), this.search_field_scale(), !0) }, Chosen.prototype.single_deselect_control_build = function () { return this.allow_single_deselect ? (this.selected_item.find("abbr").length || this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'), this.selected_item.addClass("chosen-single-with-deselect")) : void 0 }, Chosen.prototype.get_search_text = function () { return this.search_field.val() === this.default_text ? "" : a("<div/>").text(a.trim(this.search_field.val())).html() }, Chosen.prototype.winnow_results_set_highlight = function () { var a, b; return b = this.is_multiple ? [] : this.search_results.find(".result-selected.active-result"), a = b.length ? b.first() : this.search_results.find(".active-result").first(), null != a ? this.result_do_highlight(a) : void 0 }, Chosen.prototype.no_results = function (b) { var c; return c = a('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>'), c.find("span").first().html(b), this.search_results.append(c), this.form_field_jq.trigger("chosen:no_results", { chosen: this }) }, Chosen.prototype.no_results_clear = function () { return this.search_results.find(".no-results").remove() }, Chosen.prototype.keydown_arrow = function () { var a; return this.results_showing && this.result_highlight ? (a = this.result_highlight.nextAll("li.active-result").first()) ? this.result_do_highlight(a) : void 0 : this.results_show() }, Chosen.prototype.keyup_arrow = function () { var a; return this.results_showing || this.is_multiple ? this.result_highlight ? (a = this.result_highlight.prevAll("li.active-result"), a.length ? this.result_do_highlight(a.first()) : (this.choices_count() > 0 && this.results_hide(), this.result_clear_highlight())) : void 0 : this.results_show() }, Chosen.prototype.keydown_backstroke = function () { var a; return this.pending_backstroke ? (this.choice_destroy(this.pending_backstroke.find("a").first()), this.clear_backstroke()) : (a = this.search_container.siblings("li.search-choice").last(), a.length && !a.hasClass("search-choice-disabled") ? (this.pending_backstroke = a, this.single_backstroke_delete ? this.keydown_backstroke() : this.pending_backstroke.addClass("search-choice-focus")) : void 0) }, Chosen.prototype.clear_backstroke = function () { return this.pending_backstroke && this.pending_backstroke.removeClass("search-choice-focus"), this.pending_backstroke = null }, Chosen.prototype.keydown_checker = function (a) { var b, c; switch (b = null != (c = a.which) ? c : a.keyCode, this.search_field_scale(), 8 !== b && this.pending_backstroke && this.clear_backstroke(), b) { case 8: this.backstroke_length = this.search_field.val().length; break; case 9: this.results_showing && !this.is_multiple && this.result_select(a), this.mouse_on_container = !1; break; case 13: a.preventDefault(); break; case 38: a.preventDefault(), this.keyup_arrow(); break; case 40: a.preventDefault(), this.keydown_arrow() } }, Chosen.prototype.search_field_scale = function () { var b, c, d, e, f, g, h, i, j; if (this.is_multiple) { for (d = 0, h = 0, f = "position:absolute; left: -1000px; top: -1000px; display:none;", g = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"], i = 0, j = g.length; j > i; i++)e = g[i], f += e + ":" + this.search_field.css(e) + ";"; return b = a("<div />", { style: f }), b.text(this.search_field.val()), a("body").append(b), h = b.width() + 25, b.remove(), c = this.container.outerWidth(), h > c - 10 && (h = c - 10), this.search_field.css({ width: h + "px" }) } }, Chosen }(AbstractChosen) }.call(this);
var tns = (function () {
    // Object.keys
    if (!Object.keys) {
        Object.keys = function (object) {
            var keys = [];
            for (var name in object) {
                if (Object.prototype.hasOwnProperty.call(object, name)) {
                    keys.push(name);
                }
            }
            return keys;
        };
    }

    // ChildNode.remove
    if (!("remove" in Element.prototype)) {
        Element.prototype.remove = function () {
            if (this.parentNode) {
                this.parentNode.removeChild(this);
            }
        };
    }

    var win = window;

    var raf = win.requestAnimationFrame
        || win.webkitRequestAnimationFrame
        || win.mozRequestAnimationFrame
        || win.msRequestAnimationFrame
        || function (cb) { return setTimeout(cb, 16); };

    var win$1 = window;

    var caf = win$1.cancelAnimationFrame
        || win$1.mozCancelAnimationFrame
        || function (id) { clearTimeout(id); };

    function extend() {
        var obj, name, copy,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length;

        for (; i < length; i++) {
            if ((obj = arguments[i]) !== null) {
                for (name in obj) {
                    copy = obj[name];

                    if (target === copy) {
                        continue;
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    }

    function checkStorageValue(value) {
        return ['true', 'false'].indexOf(value) >= 0 ? JSON.parse(value) : value;
    }

    function setLocalStorage(storage, key, value, access) {
        if (access) {
            try { storage.setItem(key, value); } catch (e) { }
        }
        return value;
    }

    function getSlideId() {
        var id = window.tnsId;
        window.tnsId = !id ? 1 : id + 1;

        return 'tns' + window.tnsId;
    }

    function getBody() {
        var doc = document,
            body = doc.body;

        if (!body) {
            body = doc.createElement('body');
            body.fake = true;
        }

        return body;
    }

    var docElement = document.documentElement;

    function setFakeBody(body) {
        var docOverflow = '';
        if (body.fake) {
            docOverflow = docElement.style.overflow;
            //avoid crashing IE8, if background image is used
            body.style.background = '';
            //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
            body.style.overflow = docElement.style.overflow = 'hidden';
            docElement.appendChild(body);
        }

        return docOverflow;
    }

    function resetFakeBody(body, docOverflow) {
        if (body.fake) {
            body.remove();
            docElement.style.overflow = docOverflow;
            // Trigger layout so kinetic scrolling isn't disabled in iOS6+
            // eslint-disable-next-line
            docElement.offsetHeight;
        }
    }

    // get css-calc

    function calc() {
        var doc = document,
            body = getBody(),
            docOverflow = setFakeBody(body),
            div = doc.createElement('div'),
            result = false;

        body.appendChild(div);
        try {
            var str = '(10px * 10)',
                vals = ['calc' + str, '-moz-calc' + str, '-webkit-calc' + str],
                val;
            for (var i = 0; i < 3; i++) {
                val = vals[i];
                div.style.width = val;
                if (div.offsetWidth === 100) {
                    result = val.replace(str, '');
                    break;
                }
            }
        } catch (e) { }

        body.fake ? resetFakeBody(body, docOverflow) : div.remove();

        return result;
    }

    // get subpixel support value

    function percentageLayout() {
        // check subpixel layout supporting
        var doc = document,
            body = getBody(),
            docOverflow = setFakeBody(body),
            wrapper = doc.createElement('div'),
            outer = doc.createElement('div'),
            str = '',
            count = 70,
            perPage = 3,
            supported = false;

        wrapper.className = "tns-t-subp2";
        outer.className = "tns-t-ct";

        for (var i = 0; i < count; i++) {
            str += '<div></div>';
        }

        outer.innerHTML = str;
        wrapper.appendChild(outer);
        body.appendChild(wrapper);

        supported = Math.abs(wrapper.getBoundingClientRect().left - outer.children[count - perPage].getBoundingClientRect().left) < 2;

        body.fake ? resetFakeBody(body, docOverflow) : wrapper.remove();

        return supported;
    }

    function mediaquerySupport() {
        var doc = document,
            body = getBody(),
            docOverflow = setFakeBody(body),
            div = doc.createElement('div'),
            style = doc.createElement('style'),
            rule = '@media all and (min-width:1px){.tns-mq-test{position:absolute}}',
            position;

        style.type = 'text/css';
        div.className = 'tns-mq-test';

        body.appendChild(style);
        body.appendChild(div);

        if (style.styleSheet) {
            style.styleSheet.cssText = rule;
        } else {
            style.appendChild(doc.createTextNode(rule));
        }

        position = window.getComputedStyle ? window.getComputedStyle(div).position : div.currentStyle['position'];

        body.fake ? resetFakeBody(body, docOverflow) : div.remove();

        return position === "absolute";
    }

    // create and append style sheet
    function createStyleSheet(media) {
        // Create the <style> tag
        var style = document.createElement("style");
        // style.setAttribute("type", "text/css");

        // Add a media (and/or media query) here if you'd like!
        // style.setAttribute("media", "screen")
        // style.setAttribute("media", "only screen and (max-width : 1024px)")
        if (media) { style.setAttribute("media", media); }

        // WebKit hack :(
        // style.appendChild(document.createTextNode(""));

        // Add the <style> element to the page
        document.querySelector('head').appendChild(style);

        return style.sheet ? style.sheet : style.styleSheet;
    }

    // cross browsers addRule method
    function addCSSRule(sheet, selector, rules, index) {
        // return raf(function() {
        'insertRule' in sheet ?
            sheet.insertRule(selector + '{' + rules + '}', index) :
            sheet.addRule(selector, rules, index);
        // });
    }

    // cross browsers addRule method
    function removeCSSRule(sheet, index) {
        // return raf(function() {
        'deleteRule' in sheet ?
            sheet.deleteRule(index) :
            sheet.removeRule(index);
        // });
    }

    function getCssRulesLength(sheet) {
        var rule = ('insertRule' in sheet) ? sheet.cssRules : sheet.rules;
        return rule.length;
    }

    function toDegree(y, x) {
        return Math.atan2(y, x) * (180 / Math.PI);
    }

    function getTouchDirection(angle, range) {
        var direction = false,
            gap = Math.abs(90 - Math.abs(angle));

        if (gap >= 90 - range) {
            direction = 'horizontal';
        } else if (gap <= range) {
            direction = 'vertical';
        }

        return direction;
    }

    // https://toddmotto.com/ditch-the-array-foreach-call-nodelist-hack/
    function forEach(arr, callback, scope) {
        for (var i = 0, l = arr.length; i < l; i++) {
            callback.call(scope, arr[i], i);
        }
    }

    var classListSupport = 'classList' in document.createElement('_');

    var hasClass = classListSupport ?
        function (el, str) { return el.classList.contains(str); } :
        function (el, str) { return el.className.indexOf(str) >= 0; };

    var addClass = classListSupport ?
        function (el, str) {
            if (!hasClass(el, str)) { el.classList.add(str); }
        } :
        function (el, str) {
            if (!hasClass(el, str)) { el.className += ' ' + str; }
        };

    var removeClass = classListSupport ?
        function (el, str) {
            if (hasClass(el, str)) { el.classList.remove(str); }
        } :
        function (el, str) {
            if (hasClass(el, str)) { el.className = el.className.replace(str, ''); }
        };

    function hasAttr(el, attr) {
        return el.hasAttribute(attr);
    }

    function getAttr(el, attr) {
        return el.getAttribute(attr);
    }

    function isNodeList(el) {
        // Only NodeList has the "item()" function
        return typeof el.item !== "undefined";
    }

    function setAttrs(els, attrs) {
        els = (isNodeList(els) || els instanceof Array) ? els : [els];
        if (Object.prototype.toString.call(attrs) !== '[object Object]') { return; }

        for (var i = els.length; i--;) {
            for (var key in attrs) {
                els[i].setAttribute(key, attrs[key]);
            }
        }
    }

    function removeAttrs(els, attrs) {
        els = (isNodeList(els) || els instanceof Array) ? els : [els];
        attrs = (attrs instanceof Array) ? attrs : [attrs];

        var attrLength = attrs.length;
        for (var i = els.length; i--;) {
            for (var j = attrLength; j--;) {
                els[i].removeAttribute(attrs[j]);
            }
        }
    }

    function arrayFromNodeList(nl) {
        var arr = [];
        for (var i = 0, l = nl.length; i < l; i++) {
            arr.push(nl[i]);
        }
        return arr;
    }

    function hideElement(el, forceHide) {
        if (el.style.display !== 'none') { el.style.display = 'none'; }
    }

    function showElement(el, forceHide) {
        if (el.style.display === 'none') { el.style.display = ''; }
    }

    function isVisible(el) {
        return window.getComputedStyle(el).display !== 'none';
    }

    function whichProperty(props) {
        if (typeof props === 'string') {
            var arr = [props],
                Props = props.charAt(0).toUpperCase() + props.substr(1),
                prefixes = ['Webkit', 'Moz', 'ms', 'O'];

            prefixes.forEach(function (prefix) {
                if (prefix !== 'ms' || props === 'transform') {
                    arr.push(prefix + Props);
                }
            });

            props = arr;
        }

        var el = document.createElement('fakeelement'),
            len = props.length;
        for (var i = 0; i < props.length; i++) {
            var prop = props[i];
            if (el.style[prop] !== undefined) { return prop; }
        }

        return false; // explicit for ie9-
    }

    function has3DTransforms(tf) {
        if (!tf) { return false; }
        if (!window.getComputedStyle) { return false; }

        var doc = document,
            body = getBody(),
            docOverflow = setFakeBody(body),
            el = doc.createElement('p'),
            has3d,
            cssTF = tf.length > 9 ? '-' + tf.slice(0, -9).toLowerCase() + '-' : '';

        cssTF += 'transform';

        // Add it to the body to get the computed style
        body.insertBefore(el, null);

        el.style[tf] = 'translate3d(1px,1px,1px)';
        has3d = window.getComputedStyle(el).getPropertyValue(cssTF);

        body.fake ? resetFakeBody(body, docOverflow) : el.remove();

        return (has3d !== undefined && has3d.length > 0 && has3d !== "none");
    }

    // get transitionend, animationend based on transitionDuration
    // @propin: string
    // @propOut: string, first-letter uppercase
    // Usage: getEndProperty('WebkitTransitionDuration', 'Transition') => webkitTransitionEnd
    function getEndProperty(propIn, propOut) {
        var endProp = false;
        if (/^Webkit/.test(propIn)) {
            endProp = 'webkit' + propOut + 'End';
        } else if (/^O/.test(propIn)) {
            endProp = 'o' + propOut + 'End';
        } else if (propIn) {
            endProp = propOut.toLowerCase() + 'end';
        }
        return endProp;
    }

    // Test via a getter in the options object to see if the passive property is accessed
    var supportsPassive = false;
    try {
        var opts = Object.defineProperty({}, 'passive', {
            get: function () {
                supportsPassive = true;
            }
        });
        window.addEventListener("test", null, opts);
    } catch (e) { }
    var passiveOption = supportsPassive ? { passive: true } : false;

    function addEvents(el, obj, preventScrolling) {
        for (var prop in obj) {
            var option = ['touchstart', 'touchmove'].indexOf(prop) >= 0 && !preventScrolling ? passiveOption : false;
            el.addEventListener(prop, obj[prop], option);
        }
    }

    function removeEvents(el, obj) {
        for (var prop in obj) {
            var option = ['touchstart', 'touchmove'].indexOf(prop) >= 0 ? passiveOption : false;
            el.removeEventListener(prop, obj[prop], option);
        }
    }

    function Events() {
        return {
            topics: {},
            on: function (eventName, fn) {
                this.topics[eventName] = this.topics[eventName] || [];
                this.topics[eventName].push(fn);
            },
            off: function (eventName, fn) {
                if (this.topics[eventName]) {
                    for (var i = 0; i < this.topics[eventName].length; i++) {
                        if (this.topics[eventName][i] === fn) {
                            this.topics[eventName].splice(i, 1);
                            break;
                        }
                    }
                }
            },
            emit: function (eventName, data) {
                data.type = eventName;
                if (this.topics[eventName]) {
                    this.topics[eventName].forEach(function (fn) {
                        fn(data, eventName);
                    });
                }
            }
        };
    }

    function jsTransform(element, attr, prefix, postfix, to, duration, callback) {
        var tick = Math.min(duration, 10),
            unit = (to.indexOf('%') >= 0) ? '%' : 'px',
            to = to.replace(unit, ''),
            from = Number(element.style[attr].replace(prefix, '').replace(postfix, '').replace(unit, '')),
            positionTick = (to - from) / duration * tick,
            running;

        setTimeout(moveElement, tick);
        function moveElement() {
            duration -= tick;
            from += positionTick;
            element.style[attr] = prefix + from + unit + postfix;
            if (duration > 0) {
                setTimeout(moveElement, tick);
            } else {
                callback();
            }
        }
    }

    var tns = function (options) {
        options = extend({
            container: '.slider',
            mode: 'carousel',
            axis: 'horizontal',
            items: 1,
            gutter: 0,
            edgePadding: 0,
            fixedWidth: false,
            autoWidth: false,
            viewportMax: false,
            slideBy: 1,
            center: false,
            controls: true,
            controlsPosition: 'top',
            controlsText: ['prev', 'next'],
            controlsContainer: false,
            prevButton: false,
            nextButton: false,
            nav: true,
            navPosition: 'top',
            navContainer: false,
            navAsThumbnails: false,
            arrowKeys: false,
            speed: 300,
            autoplay: false,
            autoplayPosition: 'top',
            autoplayTimeout: 5000,
            autoplayDirection: 'forward',
            autoplayText: ['start', 'stop'],
            autoplayHoverPause: false,
            autoplayButton: false,
            autoplayButtonOutput: true,
            autoplayResetOnVisibility: true,
            animateIn: 'tns-fadeIn',
            animateOut: 'tns-fadeOut',
            animateNormal: 'tns-normal',
            animateDelay: false,
            loop: true,
            rewind: false,
            autoHeight: false,
            responsive: false,
            lazyload: false,
            lazyloadSelector: '.tns-lazy-img',
            touch: true,
            mouseDrag: false,
            swipeAngle: 15,
            nested: false,
            preventActionWhenRunning: false,
            preventScrollOnTouch: false,
            freezable: true,
            onInit: false,
            useLocalStorage: true,
            textDirection: 'ltr'
        }, options || {});

        var doc = document,
            win = window,
            KEYS = {
                ENTER: 13,
                SPACE: 32,
                LEFT: 37,
                RIGHT: 39
            },
            tnsStorage = {},
            localStorageAccess = options.useLocalStorage;

        if (localStorageAccess) {
            // check browser version and local storage access
            var browserInfo = navigator.userAgent;
            var uid = new Date;

            try {
                tnsStorage = win.localStorage;
                if (tnsStorage) {
                    tnsStorage.setItem(uid, uid);
                    localStorageAccess = tnsStorage.getItem(uid) == uid;
                    tnsStorage.removeItem(uid);
                } else {
                    localStorageAccess = false;
                }
                if (!localStorageAccess) { tnsStorage = {}; }
            } catch (e) {
                localStorageAccess = false;
            }

            if (localStorageAccess) {
                // remove storage when browser version changes
                if (tnsStorage['tnsApp'] && tnsStorage['tnsApp'] !== browserInfo) {
                    ['tC', 'tPL', 'tMQ', 'tTf', 't3D', 'tTDu', 'tTDe', 'tADu', 'tADe', 'tTE', 'tAE'].forEach(function (item) { tnsStorage.removeItem(item); });
                }
                // update browserInfo
                localStorage['tnsApp'] = browserInfo;
            }
        }

        var CALC = tnsStorage['tC'] ? checkStorageValue(tnsStorage['tC']) : setLocalStorage(tnsStorage, 'tC', calc(), localStorageAccess),
            PERCENTAGELAYOUT = tnsStorage['tPL'] ? checkStorageValue(tnsStorage['tPL']) : setLocalStorage(tnsStorage, 'tPL', percentageLayout(), localStorageAccess),
            CSSMQ = tnsStorage['tMQ'] ? checkStorageValue(tnsStorage['tMQ']) : setLocalStorage(tnsStorage, 'tMQ', mediaquerySupport(), localStorageAccess),
            TRANSFORM = tnsStorage['tTf'] ? checkStorageValue(tnsStorage['tTf']) : setLocalStorage(tnsStorage, 'tTf', whichProperty('transform'), localStorageAccess),
            HAS3DTRANSFORMS = tnsStorage['t3D'] ? checkStorageValue(tnsStorage['t3D']) : setLocalStorage(tnsStorage, 't3D', has3DTransforms(TRANSFORM), localStorageAccess),
            TRANSITIONDURATION = tnsStorage['tTDu'] ? checkStorageValue(tnsStorage['tTDu']) : setLocalStorage(tnsStorage, 'tTDu', whichProperty('transitionDuration'), localStorageAccess),
            TRANSITIONDELAY = tnsStorage['tTDe'] ? checkStorageValue(tnsStorage['tTDe']) : setLocalStorage(tnsStorage, 'tTDe', whichProperty('transitionDelay'), localStorageAccess),
            ANIMATIONDURATION = tnsStorage['tADu'] ? checkStorageValue(tnsStorage['tADu']) : setLocalStorage(tnsStorage, 'tADu', whichProperty('animationDuration'), localStorageAccess),
            ANIMATIONDELAY = tnsStorage['tADe'] ? checkStorageValue(tnsStorage['tADe']) : setLocalStorage(tnsStorage, 'tADe', whichProperty('animationDelay'), localStorageAccess),
            TRANSITIONEND = tnsStorage['tTE'] ? checkStorageValue(tnsStorage['tTE']) : setLocalStorage(tnsStorage, 'tTE', getEndProperty(TRANSITIONDURATION, 'Transition'), localStorageAccess),
            ANIMATIONEND = tnsStorage['tAE'] ? checkStorageValue(tnsStorage['tAE']) : setLocalStorage(tnsStorage, 'tAE', getEndProperty(ANIMATIONDURATION, 'Animation'), localStorageAccess);

        // get element nodes from selectors
        var supportConsoleWarn = win.console && typeof win.console.warn === "function",
            tnsList = ['container', 'controlsContainer', 'prevButton', 'nextButton', 'navContainer', 'autoplayButton'],
            optionsElements = {};

        tnsList.forEach(function (item) {
            if (typeof options[item] === 'string') {
                var str = options[item],
                    el = doc.querySelector(str);
                optionsElements[item] = str;

                if (el && el.nodeName) {
                    options[item] = el;
                } else {
                    if (supportConsoleWarn) { console.warn('Can\'t find', options[item]); }
                    return;
                }
            }
        });

        // make sure at least 1 slide
        if (options.container.children.length < 1) {
            if (supportConsoleWarn) { console.warn('No slides found in', options.container); }
            return;
        }

        // update options
        var responsive = options.responsive,
            nested = options.nested,
            carousel = options.mode === 'carousel' ? true : false;

        if (responsive) {
            // apply responsive[0] to options and remove it
            if (0 in responsive) {
                options = extend(options, responsive[0]);
                delete responsive[0];
            }

            var responsiveTem = {};
            for (var key in responsive) {
                var val = responsive[key];
                // update responsive
                // from: 300: 2
                // to:
                //   300: {
                //     items: 2
                //   }
                val = typeof val === 'number' ? { items: val } : val;
                responsiveTem[key] = val;
            }
            responsive = responsiveTem;
            responsiveTem = null;
        }

        // update options
        function updateOptions(obj) {
            for (var key in obj) {
                if (!carousel) {
                    if (key === 'slideBy') { obj[key] = 'page'; }
                    if (key === 'edgePadding') { obj[key] = false; }
                    if (key === 'autoHeight') { obj[key] = false; }
                }

                // update responsive options
                if (key === 'responsive') { updateOptions(obj[key]); }
            }
        }
        if (!carousel) { updateOptions(options); }


        // === define and set variables ===
        if (!carousel) {
            options.axis = 'horizontal';
            options.slideBy = 'page';
            options.edgePadding = false;

            var animateIn = options.animateIn,
                animateOut = options.animateOut,
                animateDelay = options.animateDelay,
                animateNormal = options.animateNormal;
        }

        var horizontal = options.axis === 'horizontal' ? true : false,
            outerWrapper = doc.createElement('div'),
            innerWrapper = doc.createElement('div'),
            middleWrapper,
            container = options.container,
            containerParent = container.parentNode,
            containerHTML = container.outerHTML,
            slideItems = container.children,
            slideCount = slideItems.length,
            breakpointZone,
            windowWidth = getWindowWidth(),
            isOn = false;
        if (responsive) { setBreakpointZone(); }
        if (carousel) { container.className += ' tns-vpfix'; }

        // fixedWidth: viewport > rightBoundary > indexMax
        var autoWidth = options.autoWidth,
            fixedWidth = getOption('fixedWidth'),
            edgePadding = getOption('edgePadding'),
            gutter = getOption('gutter'),
            viewport = getViewportWidth(),
            center = getOption('center'),
            items = !autoWidth ? Math.floor(getOption('items')) : 1,
            slideBy = getOption('slideBy'),
            viewportMax = options.viewportMax || options.fixedWidthViewportWidth,
            arrowKeys = getOption('arrowKeys'),
            speed = getOption('speed'),
            rewind = options.rewind,
            loop = rewind ? false : options.loop,
            autoHeight = getOption('autoHeight'),
            controls = getOption('controls'),
            controlsText = getOption('controlsText'),
            textDirection = getOption('textDirection'),
            nav = getOption('nav'),
            touch = getOption('touch'),
            mouseDrag = getOption('mouseDrag'),
            autoplay = getOption('autoplay'),
            autoplayTimeout = getOption('autoplayTimeout'),
            autoplayText = getOption('autoplayText'),
            autoplayHoverPause = getOption('autoplayHoverPause'),
            autoplayResetOnVisibility = getOption('autoplayResetOnVisibility'),
            sheet = createStyleSheet(),
            lazyload = options.lazyload,
            lazyloadSelector = options.lazyloadSelector,
            slidePositions, // collection of slide positions
            slideItemsOut = [],
            cloneCount = loop ? getCloneCountForLoop() : 0,
            slideCountNew = !carousel ? slideCount + cloneCount : slideCount + cloneCount * 2,
            hasRightDeadZone = (fixedWidth || autoWidth) && !loop ? true : false,
            rightBoundary = fixedWidth ? getRightBoundary() : null,
            updateIndexBeforeTransform = (!carousel || !loop) ? true : false,
            // transform
            transformAttr = horizontal ? 'left' : 'top',
            transformPrefix = '',
            transformPostfix = '',
            // index
            getIndexMax = (function () {
                if (fixedWidth) {
                    return function () { return center && !loop ? slideCount - 1 : Math.ceil(- rightBoundary / (fixedWidth + gutter)); };
                } else if (autoWidth) {
                    return function () {
                        for (var i = slideCountNew; i--;) {
                            if (slidePositions[i] >= - rightBoundary) { return i; }
                        }
                    };
                } else {
                    return function () {
                        if (center && carousel && !loop) {
                            return slideCount - 1;
                        } else {
                            return loop || carousel ? Math.max(0, slideCountNew - Math.ceil(items)) : slideCountNew - 1;
                        }
                    };
                }
            })(),
            index = getStartIndex(getOption('startIndex')),
            indexCached = index,
            displayIndex = getCurrentSlide(),
            indexMin = 0,
            indexMax = !autoWidth ? getIndexMax() : null,
            // resize
            resizeTimer,
            preventActionWhenRunning = options.preventActionWhenRunning,
            swipeAngle = options.swipeAngle,
            moveDirectionExpected = swipeAngle ? '?' : true,
            running = false,
            onInit = options.onInit,
            events = new Events(),
            // id, class
            newContainerClasses = ' tns-slider tns-' + options.mode,
            slideId = container.id || getSlideId(),
            disable = getOption('disable'),
            disabled = false,
            freezable = options.freezable,
            freeze = freezable && !autoWidth ? getFreeze() : false,
            frozen = false,
            controlsEvents = {
                'click': onControlsClick,
                'keydown': onControlsKeydown
            },
            navEvents = {
                'click': onNavClick,
                'keydown': onNavKeydown
            },
            hoverEvents = {
                'mouseover': mouseoverPause,
                'mouseout': mouseoutRestart
            },
            visibilityEvent = { 'visibilitychange': onVisibilityChange },
            docmentKeydownEvent = { 'keydown': onDocumentKeydown },
            touchEvents = {
                'touchstart': onPanStart,
                'touchmove': onPanMove,
                'touchend': onPanEnd,
                'touchcancel': onPanEnd
            }, dragEvents = {
                'mousedown': onPanStart,
                'mousemove': onPanMove,
                'mouseup': onPanEnd,
                'mouseleave': onPanEnd
            },
            hasControls = hasOption('controls'),
            hasNav = hasOption('nav'),
            navAsThumbnails = autoWidth ? true : options.navAsThumbnails,
            hasAutoplay = hasOption('autoplay'),
            hasTouch = hasOption('touch'),
            hasMouseDrag = hasOption('mouseDrag'),
            slideActiveClass = 'tns-slide-active',
            imgCompleteClass = 'tns-complete',
            imgEvents = {
                'load': onImgLoaded,
                'error': onImgFailed
            },
            imgsComplete,
            liveregionCurrent,
            preventScroll = options.preventScrollOnTouch === 'force' ? true : false;

        // controls
        if (hasControls) {
            var controlsContainer = options.controlsContainer,
                controlsContainerHTML = options.controlsContainer ? options.controlsContainer.outerHTML : '',
                prevButton = options.prevButton,
                nextButton = options.nextButton,
                prevButtonHTML = options.prevButton ? options.prevButton.outerHTML : '',
                nextButtonHTML = options.nextButton ? options.nextButton.outerHTML : '',
                prevIsButton,
                nextIsButton;
        }

        // nav
        if (hasNav) {
            var navContainer = options.navContainer,
                navContainerHTML = options.navContainer ? options.navContainer.outerHTML : '',
                navItems,
                pages = autoWidth ? slideCount : getPages(),
                pagesCached = 0,
                navClicked = -1,
                navCurrentIndex = getCurrentNavIndex(),
                navCurrentIndexCached = navCurrentIndex,
                navActiveClass = 'tns-nav-active',
                navStr = 'Carousel Page ',
                navStrCurrent = ' (Current Slide)';
        }

        // autoplay
        if (hasAutoplay) {
            var autoplayDirection = options.autoplayDirection === 'forward' ? 1 : -1,
                autoplayButton = options.autoplayButton,
                autoplayButtonHTML = options.autoplayButton ? options.autoplayButton.outerHTML : '',
                autoplayHtmlStrings = ['<span class=\'tns-visually-hidden\'>', ' animation</span>'],
                autoplayTimer,
                animating,
                autoplayHoverPaused,
                autoplayUserPaused,
                autoplayVisibilityPaused;
        }

        if (hasTouch || hasMouseDrag) {
            var initPosition = {},
                lastPosition = {},
                translateInit,
                disX,
                disY,
                panStart = false,
                rafIndex,
                getDist = horizontal ?
                    function (a, b) { return a.x - b.x; } :
                    function (a, b) { return a.y - b.y; };
        }

        // disable slider when slidecount <= items
        if (!autoWidth) { resetVariblesWhenDisable(disable || freeze); }

        if (TRANSFORM) {
            transformAttr = TRANSFORM;
            transformPrefix = 'translate';

            if (HAS3DTRANSFORMS) {
                transformPrefix += horizontal ? '3d(' : '3d(0px, ';
                transformPostfix = horizontal ? ', 0px, 0px)' : ', 0px)';
            } else {
                transformPrefix += horizontal ? 'X(' : 'Y(';
                transformPostfix = ')';
            }

        }

        if (carousel) { container.className = container.className.replace('tns-vpfix', ''); }
        initStructure();
        initSheet();
        initSliderTransform();

        // === COMMON FUNCTIONS === //
        function resetVariblesWhenDisable(condition) {
            if (condition) {
                controls = nav = touch = mouseDrag = arrowKeys = autoplay = autoplayHoverPause = autoplayResetOnVisibility = false;
            }
        }

        function getCurrentSlide() {
            var tem = carousel ? index - cloneCount : index;
            while (tem < 0) { tem += slideCount; }
            return tem % slideCount + 1;
        }

        function getStartIndex(ind) {
            ind = ind ? Math.max(0, Math.min(loop ? slideCount - 1 : slideCount - items, ind)) : 0;
            return carousel ? ind + cloneCount : ind;
        }

        function getAbsIndex(i) {
            if (i == null) { i = index; }

            if (carousel) { i -= cloneCount; }
            while (i < 0) { i += slideCount; }

            return Math.floor(i % slideCount);
        }

        function getCurrentNavIndex() {
            var absIndex = getAbsIndex(),
                result;

            result = navAsThumbnails ? absIndex :
                fixedWidth || autoWidth ? Math.ceil((absIndex + 1) * pages / slideCount - 1) :
                    Math.floor(absIndex / items);

            // set active nav to the last one when reaches the right edge
            if (!loop && carousel && index === indexMax) { result = pages - 1; }

            return result;
        }

        function getItemsMax() {
            // fixedWidth or autoWidth while viewportMax is not available
            if (autoWidth || (fixedWidth && !viewportMax)) {
                return slideCount - 1;
                // most cases
            } else {
                var str = fixedWidth ? 'fixedWidth' : 'items',
                    arr = [];

                if (fixedWidth || options[str] < slideCount) { arr.push(options[str]); }

                if (responsive) {
                    for (var bp in responsive) {
                        var tem = responsive[bp][str];
                        if (tem && (fixedWidth || tem < slideCount)) { arr.push(tem); }
                    }
                }

                if (!arr.length) { arr.push(0); }

                return Math.ceil(fixedWidth ? viewportMax / Math.min.apply(null, arr) : Math.max.apply(null, arr));
            }
        }

        function getCloneCountForLoop() {
            var itemsMax = getItemsMax(),
                result = carousel ? Math.ceil((itemsMax * 5 - slideCount) / 2) : (itemsMax * 4 - slideCount);
            result = Math.max(itemsMax, result);

            return hasOption('edgePadding') ? result + 1 : result;
        }

        function getWindowWidth() {
            return win.innerWidth || doc.documentElement.clientWidth || doc.body.clientWidth;
        }

        function getInsertPosition(pos) {
            return pos === 'top' ? 'afterbegin' : 'beforeend';
        }

        function getClientWidth(el) {
            var div = doc.createElement('div'), rect, width;
            el.appendChild(div);
            rect = div.getBoundingClientRect();
            width = rect.right - rect.left;
            div.remove();
            return width || getClientWidth(el.parentNode);
        }

        function getViewportWidth() {
            var gap = edgePadding ? edgePadding * 2 - gutter : 0;
            return getClientWidth(containerParent) - gap;
        }

        function hasOption(item) {
            if (options[item]) {
                return true;
            } else {
                if (responsive) {
                    for (var bp in responsive) {
                        if (responsive[bp][item]) { return true; }
                    }
                }
                return false;
            }
        }

        // get option:
        // fixed width: viewport, fixedWidth, gutter => items
        // others: window width => all variables
        // all: items => slideBy
        function getOption(item, ww) {
            if (ww == null) { ww = windowWidth; }

            if (item === 'items' && fixedWidth) {
                return Math.floor((viewport + gutter) / (fixedWidth + gutter)) || 1;

            } else {
                var result = options[item];

                if (responsive) {
                    for (var bp in responsive) {
                        // bp: convert string to number
                        if (ww >= parseInt(bp)) {
                            if (item in responsive[bp]) { result = responsive[bp][item]; }
                        }
                    }
                }

                if (item === 'slideBy' && result === 'page') { result = getOption('items'); }
                if (!carousel && (item === 'slideBy' || item === 'items')) { result = Math.floor(result); }

                return result;
            }
        }

        function getSlideMarginLeft(i) {
            return CALC ?
                CALC + '(' + i * 100 + '% / ' + slideCountNew + ')' :
                i * 100 / slideCountNew + '%';
        }

        function getInnerWrapperStyles(edgePaddingTem, gutterTem, fixedWidthTem, speedTem, autoHeightBP) {
            var str = '';

            if (edgePaddingTem !== undefined) {
                var gap = edgePaddingTem;
                if (gutterTem) { gap -= gutterTem; }
                str = horizontal ?
                    'margin: 0 ' + gap + 'px 0 ' + edgePaddingTem + 'px;' :
                    'margin: ' + edgePaddingTem + 'px 0 ' + gap + 'px 0;';
            } else if (gutterTem && !fixedWidthTem) {
                var gutterTemUnit = '-' + gutterTem + 'px',
                    dir = horizontal ? gutterTemUnit + ' 0 0' : '0 ' + gutterTemUnit + ' 0';
                str = 'margin: 0 ' + dir + ';';
            }

            if (!carousel && autoHeightBP && TRANSITIONDURATION && speedTem) { str += getTransitionDurationStyle(speedTem); }
            return str;
        }

        function getContainerWidth(fixedWidthTem, gutterTem, itemsTem) {
            if (fixedWidthTem) {
                return (fixedWidthTem + gutterTem) * slideCountNew + 'px';
            } else {
                return CALC ?
                    CALC + '(' + slideCountNew * 100 + '% / ' + itemsTem + ')' :
                    slideCountNew * 100 / itemsTem + '%';
            }
        }

        function getSlideWidthStyle(fixedWidthTem, gutterTem, itemsTem) {
            var width;

            if (fixedWidthTem) {
                width = (fixedWidthTem + gutterTem) + 'px';
            } else {
                if (!carousel) { itemsTem = Math.floor(itemsTem); }
                var dividend = carousel ? slideCountNew : itemsTem;
                width = CALC ?
                    CALC + '(100% / ' + dividend + ')' :
                    100 / dividend + '%';
            }

            width = 'width:' + width;

            // inner slider: overwrite outer slider styles
            return nested !== 'inner' ? width + ';' : width + ' !important;';
        }

        function getSlideGutterStyle(gutterTem) {
            var str = '';

            // gutter maybe interger || 0
            // so can't use 'if (gutter)'
            if (gutterTem !== false) {
                var prop = horizontal ? 'padding-' : 'margin-',
                    dir = horizontal ? 'right' : 'bottom';
                str = prop + dir + ': ' + gutterTem + 'px;';
            }

            return str;
        }

        function getCSSPrefix(name, num) {
            var prefix = name.substring(0, name.length - num).toLowerCase();
            if (prefix) { prefix = '-' + prefix + '-'; }

            return prefix;
        }

        function getTransitionDurationStyle(speed) {
            return getCSSPrefix(TRANSITIONDURATION, 18) + 'transition-duration:' + speed / 1000 + 's;';
        }

        function getAnimationDurationStyle(speed) {
            return getCSSPrefix(ANIMATIONDURATION, 17) + 'animation-duration:' + speed / 1000 + 's;';
        }

        function initStructure() {
            var classOuter = 'tns-outer',
                classInner = 'tns-inner',
                hasGutter = hasOption('gutter');

            outerWrapper.className = classOuter;
            innerWrapper.className = classInner;
            outerWrapper.id = slideId + '-ow';
            innerWrapper.id = slideId + '-iw';

            // set container properties
            if (container.id === '') { container.id = slideId; }
            newContainerClasses += PERCENTAGELAYOUT || autoWidth ? ' tns-subpixel' : ' tns-no-subpixel';
            newContainerClasses += CALC ? ' tns-calc' : ' tns-no-calc';
            if (autoWidth) { newContainerClasses += ' tns-autowidth'; }
            newContainerClasses += ' tns-' + options.axis;
            container.className += newContainerClasses;

            // add constrain layer for carousel
            if (carousel) {
                middleWrapper = doc.createElement('div');
                middleWrapper.id = slideId + '-mw';
                middleWrapper.className = 'tns-ovh';

                outerWrapper.appendChild(middleWrapper);
                middleWrapper.appendChild(innerWrapper);
            } else {
                outerWrapper.appendChild(innerWrapper);
            }

            if (autoHeight) {
                var wp = middleWrapper ? middleWrapper : innerWrapper;
                wp.className += ' tns-ah';
            }

            containerParent.insertBefore(outerWrapper, container);
            innerWrapper.appendChild(container);

            // add id, class, aria attributes
            // before clone slides
            forEach(slideItems, function (item, i) {
                addClass(item, 'tns-item');
                if (!item.id) { item.id = slideId + '-item' + i; }
                if (!carousel && animateNormal) { addClass(item, animateNormal); }
                setAttrs(item, {
                    'aria-hidden': 'true',
                    'tabindex': '-1'
                });
            });

            // ## clone slides
            // carousel: n + slides + n
            // gallery:      slides + n
            if (cloneCount) {
                var fragmentBefore = doc.createDocumentFragment(),
                    fragmentAfter = doc.createDocumentFragment();

                for (var j = cloneCount; j--;) {
                    var num = j % slideCount,
                        cloneFirst = slideItems[num].cloneNode(true);
                    removeAttrs(cloneFirst, 'id');
                    fragmentAfter.insertBefore(cloneFirst, fragmentAfter.firstChild);

                    if (carousel) {
                        var cloneLast = slideItems[slideCount - 1 - num].cloneNode(true);
                        removeAttrs(cloneLast, 'id');
                        fragmentBefore.appendChild(cloneLast);
                    }
                }

                container.insertBefore(fragmentBefore, container.firstChild);
                container.appendChild(fragmentAfter);
                slideItems = container.children;
            }

        }

        function initSliderTransform() {
            // ## images loaded/failed
            if (hasOption('autoHeight') || autoWidth || !horizontal) {
                var imgs = container.querySelectorAll('img');

                // add complete class if all images are loaded/failed
                forEach(imgs, function (img) {
                    var src = img.src;

                    if (src && src.indexOf('data:image') < 0) {
                        addEvents(img, imgEvents);
                        img.src = '';
                        img.src = src;
                        addClass(img, 'loading');
                    } else if (!lazyload) {
                        imgLoaded(img);
                    }
                });

                // All imgs are completed
                raf(function () { imgsLoadedCheck(arrayFromNodeList(imgs), function () { imgsComplete = true; }); });

                // Check imgs in window only for auto height
                if (!autoWidth && horizontal) { imgs = getImageArray(index, Math.min(index + items - 1, slideCountNew - 1)); }

                lazyload ? initSliderTransformStyleCheck() : raf(function () { imgsLoadedCheck(arrayFromNodeList(imgs), initSliderTransformStyleCheck); });

            } else {
                // set container transform property
                if (carousel) { doContainerTransformSilent(); }

                // update slider tools and events
                initTools();
                initEvents();
            }
        }

        function initSliderTransformStyleCheck() {
            if (autoWidth) {
                // check styles application
                var num = loop ? index : slideCount - 1;
                (function stylesApplicationCheck() {
                    slideItems[num - 1].getBoundingClientRect().right.toFixed(2) === slideItems[num].getBoundingClientRect().left.toFixed(2) ?
                        initSliderTransformCore() :
                        setTimeout(function () { stylesApplicationCheck(); }, 16);
                })();
            } else {
                initSliderTransformCore();
            }
        }


        function initSliderTransformCore() {
            // run Fn()s which are rely on image loading
            if (!horizontal || autoWidth) {
                setSlidePositions();

                if (autoWidth) {
                    rightBoundary = getRightBoundary();
                    if (freezable) { freeze = getFreeze(); }
                    indexMax = getIndexMax(); // <= slidePositions, rightBoundary <=
                    resetVariblesWhenDisable(disable || freeze);
                } else {
                    updateContentWrapperHeight();
                }
            }

            // set container transform property
            if (carousel) { doContainerTransformSilent(); }

            // update slider tools and events
            initTools();
            initEvents();
        }

        function initSheet() {
            // gallery:
            // set animation classes and left value for gallery slider
            if (!carousel) {
                for (var i = index, l = index + Math.min(slideCount, items); i < l; i++) {
                    var item = slideItems[i];
                    item.style.left = (i - index) * 100 / items + '%';
                    addClass(item, animateIn);
                    removeClass(item, animateNormal);
                }
            }

            // #### LAYOUT

            // ## INLINE-BLOCK VS FLOAT

            // ## PercentageLayout:
            // slides: inline-block
            // remove blank space between slides by set font-size: 0

            // ## Non PercentageLayout:
            // slides: float
            //         margin-right: -100%
            //         margin-left: ~

            // Resource: https://docs.google.com/spreadsheets/d/147up245wwTXeQYve3BRSAD4oVcvQmuGsFteJOeA5xNQ/edit?usp=sharing
            if (horizontal) {
                if (PERCENTAGELAYOUT || autoWidth) {
                    addCSSRule(sheet, '#' + slideId + ' > .tns-item', 'font-size:' + win.getComputedStyle(slideItems[0]).fontSize + ';', getCssRulesLength(sheet));
                    addCSSRule(sheet, '#' + slideId, 'font-size:0;', getCssRulesLength(sheet));
                } else if (carousel) {
                    forEach(slideItems, function (slide, i) {
                        slide.style.marginLeft = getSlideMarginLeft(i);
                    });
                }
            }


            // ## BASIC STYLES
            if (CSSMQ) {
                // middle wrapper style
                if (TRANSITIONDURATION) {
                    var str = middleWrapper && options.autoHeight ? getTransitionDurationStyle(options.speed) : '';
                    addCSSRule(sheet, '#' + slideId + '-mw', str, getCssRulesLength(sheet));
                }

                // inner wrapper styles
                str = getInnerWrapperStyles(options.edgePadding, options.gutter, options.fixedWidth, options.speed, options.autoHeight);
                addCSSRule(sheet, '#' + slideId + '-iw', str, getCssRulesLength(sheet));

                // container styles
                if (carousel) {
                    str = horizontal && !autoWidth ? 'width:' + getContainerWidth(options.fixedWidth, options.gutter, options.items) + ';' : '';
                    if (TRANSITIONDURATION) { str += getTransitionDurationStyle(speed); }
                    addCSSRule(sheet, '#' + slideId, str, getCssRulesLength(sheet));
                }

                // slide styles
                str = horizontal && !autoWidth ? getSlideWidthStyle(options.fixedWidth, options.gutter, options.items) : '';
                if (options.gutter) { str += getSlideGutterStyle(options.gutter); }
                // set gallery items transition-duration
                if (!carousel) {
                    if (TRANSITIONDURATION) { str += getTransitionDurationStyle(speed); }
                    if (ANIMATIONDURATION) { str += getAnimationDurationStyle(speed); }
                }
                if (str) { addCSSRule(sheet, '#' + slideId + ' > .tns-item', str, getCssRulesLength(sheet)); }

                // non CSS mediaqueries: IE8
                // ## update inner wrapper, container, slides if needed
                // set inline styles for inner wrapper & container
                // insert stylesheet (one line) for slides only (since slides are many)
            } else {
                // middle wrapper styles
                update_carousel_transition_duration();

                // inner wrapper styles
                innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth, autoHeight);

                // container styles
                if (carousel && horizontal && !autoWidth) {
                    container.style.width = getContainerWidth(fixedWidth, gutter, items);
                }

                // slide styles
                var str = horizontal && !autoWidth ? getSlideWidthStyle(fixedWidth, gutter, items) : '';
                if (gutter) { str += getSlideGutterStyle(gutter); }

                // append to the last line
                if (str) { addCSSRule(sheet, '#' + slideId + ' > .tns-item', str, getCssRulesLength(sheet)); }
            }

            // ## MEDIAQUERIES
            if (responsive && CSSMQ) {
                for (var bp in responsive) {
                    // bp: convert string to number
                    bp = parseInt(bp);

                    var opts = responsive[bp],
                        str = '',
                        middleWrapperStr = '',
                        innerWrapperStr = '',
                        containerStr = '',
                        slideStr = '',
                        itemsBP = !autoWidth ? getOption('items', bp) : null,
                        fixedWidthBP = getOption('fixedWidth', bp),
                        speedBP = getOption('speed', bp),
                        edgePaddingBP = getOption('edgePadding', bp),
                        autoHeightBP = getOption('autoHeight', bp),
                        gutterBP = getOption('gutter', bp);

                    // middle wrapper string
                    if (TRANSITIONDURATION && middleWrapper && getOption('autoHeight', bp) && 'speed' in opts) {
                        middleWrapperStr = '#' + slideId + '-mw{' + getTransitionDurationStyle(speedBP) + '}';
                    }

                    // inner wrapper string
                    if ('edgePadding' in opts || 'gutter' in opts) {
                        innerWrapperStr = '#' + slideId + '-iw{' + getInnerWrapperStyles(edgePaddingBP, gutterBP, fixedWidthBP, speedBP, autoHeightBP) + '}';
                    }

                    // container string
                    if (carousel && horizontal && !autoWidth && ('fixedWidth' in opts || 'items' in opts || (fixedWidth && 'gutter' in opts))) {
                        containerStr = 'width:' + getContainerWidth(fixedWidthBP, gutterBP, itemsBP) + ';';
                    }
                    if (TRANSITIONDURATION && 'speed' in opts) {
                        containerStr += getTransitionDurationStyle(speedBP);
                    }
                    if (containerStr) {
                        containerStr = '#' + slideId + '{' + containerStr + '}';
                    }

                    // slide string
                    if ('fixedWidth' in opts || (fixedWidth && 'gutter' in opts) || !carousel && 'items' in opts) {
                        slideStr += getSlideWidthStyle(fixedWidthBP, gutterBP, itemsBP);
                    }
                    if ('gutter' in opts) {
                        slideStr += getSlideGutterStyle(gutterBP);
                    }
                    // set gallery items transition-duration
                    if (!carousel && 'speed' in opts) {
                        if (TRANSITIONDURATION) { slideStr += getTransitionDurationStyle(speedBP); }
                        if (ANIMATIONDURATION) { slideStr += getAnimationDurationStyle(speedBP); }
                    }
                    if (slideStr) { slideStr = '#' + slideId + ' > .tns-item{' + slideStr + '}'; }

                    // add up
                    str = middleWrapperStr + innerWrapperStr + containerStr + slideStr;

                    if (str) {
                        sheet.insertRule('@media (min-width: ' + bp / 16 + 'em) {' + str + '}', sheet.cssRules.length);
                    }
                }
            }
        }

        function initTools() {
            // == slides ==
            updateSlideStatus();

            // == live region ==
            outerWrapper.insertAdjacentHTML('afterbegin', '<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">' + getLiveRegionStr() + '</span>  of ' + slideCount + '</div>');
            liveregionCurrent = outerWrapper.querySelector('.tns-liveregion .current');

            // == autoplayInit ==
            if (hasAutoplay) {
                var txt = autoplay ? 'stop' : 'start';
                if (autoplayButton) {
                    setAttrs(autoplayButton, { 'data-action': txt });
                } else if (options.autoplayButtonOutput) {
                    outerWrapper.insertAdjacentHTML(getInsertPosition(options.autoplayPosition), '<button data-action="' + txt + '">' + autoplayHtmlStrings[0] + txt + autoplayHtmlStrings[1] + autoplayText[0] + '</button>');
                    autoplayButton = outerWrapper.querySelector('[data-action]');
                }

                // add event
                if (autoplayButton) {
                    addEvents(autoplayButton, { 'click': toggleAutoplay });
                }

                if (autoplay) {
                    startAutoplay();
                    if (autoplayHoverPause) { addEvents(container, hoverEvents); }
                    if (autoplayResetOnVisibility) { addEvents(container, visibilityEvent); }
                }
            }

            // == navInit ==
            if (hasNav) {
                var initIndex = !carousel ? 0 : cloneCount;
                // customized nav
                // will not hide the navs in case they're thumbnails
                if (navContainer) {
                    setAttrs(navContainer, { 'aria-label': 'Carousel Pagination' });
                    navItems = navContainer.children;
                    forEach(navItems, function (item, i) {
                        setAttrs(item, {
                            'data-nav': i,
                            'tabindex': '-1',
                            'aria-label': navStr + (i + 1),
                            'aria-controls': slideId,
                        });
                    });

                    // generated nav
                } else {
                    var navHtml = '',
                        hiddenStr = navAsThumbnails ? '' : 'style="display:none"';
                    for (var i = 0; i < slideCount; i++) {
                        // hide nav items by default
                        navHtml += '<button data-nav="' + i + '" tabindex="-1" aria-controls="' + slideId + '" ' + hiddenStr + ' aria-label="' + navStr + (i + 1) + '"></button>';
                    }
                    navHtml = '<div class="tns-nav" aria-label="Carousel Pagination">' + navHtml + '</div>';
                    outerWrapper.insertAdjacentHTML(getInsertPosition(options.navPosition), navHtml);

                    navContainer = outerWrapper.querySelector('.tns-nav');
                    navItems = navContainer.children;
                }

                updateNavVisibility();

                // add transition
                if (TRANSITIONDURATION) {
                    var prefix = TRANSITIONDURATION.substring(0, TRANSITIONDURATION.length - 18).toLowerCase(),
                        str = 'transition: all ' + speed / 1000 + 's';

                    if (prefix) {
                        str = '-' + prefix + '-' + str;
                    }

                    addCSSRule(sheet, '[aria-controls^=' + slideId + '-item]', str, getCssRulesLength(sheet));
                }

                setAttrs(navItems[navCurrentIndex], { 'aria-label': navStr + (navCurrentIndex + 1) + navStrCurrent });
                removeAttrs(navItems[navCurrentIndex], 'tabindex');
                addClass(navItems[navCurrentIndex], navActiveClass);

                // add events
                addEvents(navContainer, navEvents);
            }



            // == controlsInit ==
            if (hasControls) {
                if (!controlsContainer && (!prevButton || !nextButton)) {
                    outerWrapper.insertAdjacentHTML(getInsertPosition(options.controlsPosition), '<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="' + slideId + '">' + controlsText[0] + '</button><button data-controls="next" tabindex="-1" aria-controls="' + slideId + '">' + controlsText[1] + '</button></div>');

                    controlsContainer = outerWrapper.querySelector('.tns-controls');
                }

                if (!prevButton || !nextButton) {
                    prevButton = controlsContainer.children[0];
                    nextButton = controlsContainer.children[1];
                }

                if (options.controlsContainer) {
                    setAttrs(controlsContainer, {
                        'aria-label': 'Carousel Navigation',
                        'tabindex': '0'
                    });
                }

                if (options.controlsContainer || (options.prevButton && options.nextButton)) {
                    setAttrs([prevButton, nextButton], {
                        'aria-controls': slideId,
                        'tabindex': '-1',
                    });
                }

                if (options.controlsContainer || (options.prevButton && options.nextButton)) {
                    setAttrs(prevButton, { 'data-controls': 'prev' });
                    setAttrs(nextButton, { 'data-controls': 'next' });
                }

                prevIsButton = isButton(prevButton);
                nextIsButton = isButton(nextButton);

                updateControlsStatus();

                // add events
                if (controlsContainer) {
                    addEvents(controlsContainer, controlsEvents);
                } else {
                    addEvents(prevButton, controlsEvents);
                    addEvents(nextButton, controlsEvents);
                }
            }

            // hide tools if needed
            disableUI();
        }

        function initEvents() {
            // add events
            if (carousel && TRANSITIONEND) {
                var eve = {};
                eve[TRANSITIONEND] = onTransitionEnd;
                addEvents(container, eve);
            }

            if (touch) { addEvents(container, touchEvents, options.preventScrollOnTouch); }
            if (mouseDrag) { addEvents(container, dragEvents); }
            if (arrowKeys) { addEvents(doc, docmentKeydownEvent); }

            if (nested === 'inner') {
                events.on('outerResized', function () {
                    resizeTasks();
                    events.emit('innerLoaded', info());
                });
            } else if (responsive || fixedWidth || autoWidth || autoHeight || !horizontal) {
                addEvents(win, { 'resize': onResize });
            }

            if (autoHeight) {
                if (nested === 'outer') {
                    events.on('innerLoaded', doAutoHeight);
                } else if (!disable) { doAutoHeight(); }
            }

            doLazyLoad();
            if (disable) { disableSlider(); } else if (freeze) { freezeSlider(); }

            events.on('indexChanged', additionalUpdates);
            if (nested === 'inner') { events.emit('innerLoaded', info()); }
            if (typeof onInit === 'function') { onInit(info()); }
            isOn = true;
        }

        function destroy() {
            // sheet
            sheet.disabled = true;
            if (sheet.ownerNode) { sheet.ownerNode.remove(); }

            // remove win event listeners
            removeEvents(win, { 'resize': onResize });

            // arrowKeys, controls, nav
            if (arrowKeys) { removeEvents(doc, docmentKeydownEvent); }
            if (controlsContainer) { removeEvents(controlsContainer, controlsEvents); }
            if (navContainer) { removeEvents(navContainer, navEvents); }

            // autoplay
            removeEvents(container, hoverEvents);
            removeEvents(container, visibilityEvent);
            if (autoplayButton) { removeEvents(autoplayButton, { 'click': toggleAutoplay }); }
            if (autoplay) { clearInterval(autoplayTimer); }

            // container
            if (carousel && TRANSITIONEND) {
                var eve = {};
                eve[TRANSITIONEND] = onTransitionEnd;
                removeEvents(container, eve);
            }
            if (touch) { removeEvents(container, touchEvents); }
            if (mouseDrag) { removeEvents(container, dragEvents); }

            // cache Object values in options && reset HTML
            var htmlList = [containerHTML, controlsContainerHTML, prevButtonHTML, nextButtonHTML, navContainerHTML, autoplayButtonHTML];

            tnsList.forEach(function (item, i) {
                var el = item === 'container' ? outerWrapper : options[item];

                if (typeof el === 'object') {
                    var prevEl = el.previousElementSibling ? el.previousElementSibling : false,
                        parentEl = el.parentNode;
                    el.outerHTML = htmlList[i];
                    options[item] = prevEl ? prevEl.nextElementSibling : parentEl.firstElementChild;
                }
            });


            // reset variables
            tnsList = animateIn = animateOut = animateDelay = animateNormal = horizontal = outerWrapper = innerWrapper = container = containerParent = containerHTML = slideItems = slideCount = breakpointZone = windowWidth = autoWidth = fixedWidth = edgePadding = gutter = viewport = items = slideBy = viewportMax = arrowKeys = speed = rewind = loop = autoHeight = sheet = lazyload = slidePositions = slideItemsOut = cloneCount = slideCountNew = hasRightDeadZone = rightBoundary = updateIndexBeforeTransform = transformAttr = transformPrefix = transformPostfix = getIndexMax = index = indexCached = indexMin = indexMax = resizeTimer = swipeAngle = moveDirectionExpected = running = onInit = events = newContainerClasses = slideId = disable = disabled = freezable = freeze = frozen = controlsEvents = navEvents = hoverEvents = visibilityEvent = docmentKeydownEvent = touchEvents = dragEvents = hasControls = hasNav = navAsThumbnails = hasAutoplay = hasTouch = hasMouseDrag = slideActiveClass = imgCompleteClass = imgEvents = imgsComplete = controls = controlsText = controlsContainer = controlsContainerHTML = prevButton = nextButton = prevIsButton = nextIsButton = nav = navContainer = navContainerHTML = navItems = pages = pagesCached = navClicked = navCurrentIndex = navCurrentIndexCached = navActiveClass = navStr = navStrCurrent = autoplay = autoplayTimeout = autoplayDirection = autoplayText = autoplayHoverPause = autoplayButton = autoplayButtonHTML = autoplayResetOnVisibility = autoplayHtmlStrings = autoplayTimer = animating = autoplayHoverPaused = autoplayUserPaused = autoplayVisibilityPaused = initPosition = lastPosition = translateInit = disX = disY = panStart = rafIndex = getDist = touch = mouseDrag = null;
            // check variables
            // [animateIn, animateOut, animateDelay, animateNormal, horizontal, outerWrapper, innerWrapper, container, containerParent, containerHTML, slideItems, slideCount, breakpointZone, windowWidth, autoWidth, fixedWidth, edgePadding, gutter, viewport, items, slideBy, viewportMax, arrowKeys, speed, rewind, loop, autoHeight, sheet, lazyload, slidePositions, slideItemsOut, cloneCount, slideCountNew, hasRightDeadZone, rightBoundary, updateIndexBeforeTransform, transformAttr, transformPrefix, transformPostfix, getIndexMax, index, indexCached, indexMin, indexMax, resizeTimer, swipeAngle, moveDirectionExpected, running, onInit, events, newContainerClasses, slideId, disable, disabled, freezable, freeze, frozen, controlsEvents, navEvents, hoverEvents, visibilityEvent, docmentKeydownEvent, touchEvents, dragEvents, hasControls, hasNav, navAsThumbnails, hasAutoplay, hasTouch, hasMouseDrag, slideActiveClass, imgCompleteClass, imgEvents, imgsComplete, controls, controlsText, controlsContainer, controlsContainerHTML, prevButton, nextButton, prevIsButton, nextIsButton, nav, navContainer, navContainerHTML, navItems, pages, pagesCached, navClicked, navCurrentIndex, navCurrentIndexCached, navActiveClass, navStr, navStrCurrent, autoplay, autoplayTimeout, autoplayDirection, autoplayText, autoplayHoverPause, autoplayButton, autoplayButtonHTML, autoplayResetOnVisibility, autoplayHtmlStrings, autoplayTimer, animating, autoplayHoverPaused, autoplayUserPaused, autoplayVisibilityPaused, initPosition, lastPosition, translateInit, disX, disY, panStart, rafIndex, getDist, touch, mouseDrag ].forEach(function(item) { if (item !== null) { console.log(item); } });

            for (var a in this) {
                if (a !== 'rebuild') { this[a] = null; }
            }
            isOn = false;
        }

        // === ON RESIZE ===
        // responsive || fixedWidth || autoWidth || !horizontal
        function onResize(e) {
            raf(function () { resizeTasks(getEvent(e)); });
        }

        function resizeTasks(e) {
            if (!isOn) { return; }
            if (nested === 'outer') { events.emit('outerResized', info(e)); }
            windowWidth = getWindowWidth();
            var bpChanged,
                breakpointZoneTem = breakpointZone,
                needContainerTransform = false;

            if (responsive) {
                setBreakpointZone();
                bpChanged = breakpointZoneTem !== breakpointZone;
                // if (hasRightDeadZone) { needContainerTransform = true; } // *?
                if (bpChanged) { events.emit('newBreakpointStart', info(e)); }
            }

            var indChanged,
                itemsChanged,
                itemsTem = items,
                disableTem = disable,
                freezeTem = freeze,
                arrowKeysTem = arrowKeys,
                controlsTem = controls,
                navTem = nav,
                touchTem = touch,
                mouseDragTem = mouseDrag,
                autoplayTem = autoplay,
                autoplayHoverPauseTem = autoplayHoverPause,
                autoplayResetOnVisibilityTem = autoplayResetOnVisibility,
                indexTem = index;

            if (bpChanged) {
                var fixedWidthTem = fixedWidth,
                    autoHeightTem = autoHeight,
                    controlsTextTem = controlsText,
                    centerTem = center,
                    autoplayTextTem = autoplayText;

                if (!CSSMQ) {
                    var gutterTem = gutter,
                        edgePaddingTem = edgePadding;
                }
            }

            // get option:
            // fixed width: viewport, fixedWidth, gutter => items
            // others: window width => all variables
            // all: items => slideBy
            arrowKeys = getOption('arrowKeys');
            controls = getOption('controls');
            nav = getOption('nav');
            touch = getOption('touch');
            center = getOption('center');
            mouseDrag = getOption('mouseDrag');
            autoplay = getOption('autoplay');
            autoplayHoverPause = getOption('autoplayHoverPause');
            autoplayResetOnVisibility = getOption('autoplayResetOnVisibility');

            if (bpChanged) {
                disable = getOption('disable');
                fixedWidth = getOption('fixedWidth');
                speed = getOption('speed');
                autoHeight = getOption('autoHeight');
                controlsText = getOption('controlsText');
                autoplayText = getOption('autoplayText');
                autoplayTimeout = getOption('autoplayTimeout');

                if (!CSSMQ) {
                    edgePadding = getOption('edgePadding');
                    gutter = getOption('gutter');
                }
            }
            // update options
            resetVariblesWhenDisable(disable);

            viewport = getViewportWidth(); // <= edgePadding, gutter
            if ((!horizontal || autoWidth) && !disable) {
                setSlidePositions();
                if (!horizontal) {
                    updateContentWrapperHeight(); // <= setSlidePositions
                    needContainerTransform = true;
                }
            }
            if (fixedWidth || autoWidth) {
                rightBoundary = getRightBoundary(); // autoWidth: <= viewport, slidePositions, gutter
                // fixedWidth: <= viewport, fixedWidth, gutter
                indexMax = getIndexMax(); // autoWidth: <= rightBoundary, slidePositions
                // fixedWidth: <= rightBoundary, fixedWidth, gutter
            }

            if (bpChanged || fixedWidth) {
                items = getOption('items');
                slideBy = getOption('slideBy');
                itemsChanged = items !== itemsTem;

                if (itemsChanged) {
                    if (!fixedWidth && !autoWidth) { indexMax = getIndexMax(); } // <= items
                    // check index before transform in case
                    // slider reach the right edge then items become bigger
                    updateIndex();
                }
            }

            if (bpChanged) {
                if (disable !== disableTem) {
                    if (disable) {
                        disableSlider();
                    } else {
                        enableSlider(); // <= slidePositions, rightBoundary, indexMax
                    }
                }
            }

            if (freezable && (bpChanged || fixedWidth || autoWidth)) {
                freeze = getFreeze(); // <= autoWidth: slidePositions, gutter, viewport, rightBoundary
                // <= fixedWidth: fixedWidth, gutter, rightBoundary
                // <= others: items

                if (freeze !== freezeTem) {
                    if (freeze) {
                        doContainerTransform(getContainerTransformValue(getStartIndex(0)));
                        freezeSlider();
                    } else {
                        unfreezeSlider();
                        needContainerTransform = true;
                    }
                }
            }

            resetVariblesWhenDisable(disable || freeze); // controls, nav, touch, mouseDrag, arrowKeys, autoplay, autoplayHoverPause, autoplayResetOnVisibility
            if (!autoplay) { autoplayHoverPause = autoplayResetOnVisibility = false; }

            if (arrowKeys !== arrowKeysTem) {
                arrowKeys ?
                    addEvents(doc, docmentKeydownEvent) :
                    removeEvents(doc, docmentKeydownEvent);
            }
            if (controls !== controlsTem) {
                if (controls) {
                    if (controlsContainer) {
                        showElement(controlsContainer);
                    } else {
                        if (prevButton) { showElement(prevButton); }
                        if (nextButton) { showElement(nextButton); }
                    }
                } else {
                    if (controlsContainer) {
                        hideElement(controlsContainer);
                    } else {
                        if (prevButton) { hideElement(prevButton); }
                        if (nextButton) { hideElement(nextButton); }
                    }
                }
            }
            if (nav !== navTem) {
                nav ?
                    showElement(navContainer) :
                    hideElement(navContainer);
            }
            if (touch !== touchTem) {
                touch ?
                    addEvents(container, touchEvents, options.preventScrollOnTouch) :
                    removeEvents(container, touchEvents);
            }
            if (mouseDrag !== mouseDragTem) {
                mouseDrag ?
                    addEvents(container, dragEvents) :
                    removeEvents(container, dragEvents);
            }
            if (autoplay !== autoplayTem) {
                if (autoplay) {
                    if (autoplayButton) { showElement(autoplayButton); }
                    if (!animating && !autoplayUserPaused) { startAutoplay(); }
                } else {
                    if (autoplayButton) { hideElement(autoplayButton); }
                    if (animating) { stopAutoplay(); }
                }
            }
            if (autoplayHoverPause !== autoplayHoverPauseTem) {
                autoplayHoverPause ?
                    addEvents(container, hoverEvents) :
                    removeEvents(container, hoverEvents);
            }
            if (autoplayResetOnVisibility !== autoplayResetOnVisibilityTem) {
                autoplayResetOnVisibility ?
                    addEvents(doc, visibilityEvent) :
                    removeEvents(doc, visibilityEvent);
            }

            if (bpChanged) {
                if (fixedWidth !== fixedWidthTem || center !== centerTem) { needContainerTransform = true; }

                if (autoHeight !== autoHeightTem) {
                    if (!autoHeight) { innerWrapper.style.height = ''; }
                }

                if (controls && controlsText !== controlsTextTem) {
                    prevButton.innerHTML = controlsText[0];
                    nextButton.innerHTML = controlsText[1];
                }

                if (autoplayButton && autoplayText !== autoplayTextTem) {
                    var i = autoplay ? 1 : 0,
                        html = autoplayButton.innerHTML,
                        len = html.length - autoplayTextTem[i].length;
                    if (html.substring(len) === autoplayTextTem[i]) {
                        autoplayButton.innerHTML = html.substring(0, len) + autoplayText[i];
                    }
                }
            } else {
                if (center && (fixedWidth || autoWidth)) { needContainerTransform = true; }
            }

            if (itemsChanged || fixedWidth && !autoWidth) {
                pages = getPages();
                updateNavVisibility();
            }

            indChanged = index !== indexTem;
            if (indChanged) {
                events.emit('indexChanged', info());
                needContainerTransform = true;
            } else if (itemsChanged) {
                if (!indChanged) { additionalUpdates(); }
            } else if (fixedWidth || autoWidth) {
                doLazyLoad();
                updateSlideStatus();
                updateLiveRegion();
            }

            if (itemsChanged || !carousel) { updateGallerySlidePositions(); }

            if (!disable && !freeze) {
                // non-meduaqueries: IE8
                if (bpChanged && !CSSMQ) {
                    // middle wrapper styles
                    if (autoHeight !== autoheightTem || speed !== speedTem) {
                        update_carousel_transition_duration();
                    }

                    // inner wrapper styles
                    if (edgePadding !== edgePaddingTem || gutter !== gutterTem) {
                        innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth, speed, autoHeight);
                    }

                    if (horizontal) {
                        // container styles
                        if (carousel) {
                            container.style.width = getContainerWidth(fixedWidth, gutter, items);
                        }

                        // slide styles
                        var str = getSlideWidthStyle(fixedWidth, gutter, items) +
                            getSlideGutterStyle(gutter);

                        // remove the last line and
                        // add new styles
                        removeCSSRule(sheet, getCssRulesLength(sheet) - 1);
                        addCSSRule(sheet, '#' + slideId + ' > .tns-item', str, getCssRulesLength(sheet));
                    }
                }

                // auto height
                if (autoHeight) { doAutoHeight(); }

                if (needContainerTransform) {
                    doContainerTransformSilent();
                    indexCached = index;
                }
            }

            if (bpChanged) { events.emit('newBreakpointEnd', info(e)); }
        }





        // === INITIALIZATION FUNCTIONS === //
        function getFreeze() {
            if (!fixedWidth && !autoWidth) {
                var a = center ? items - (items - 1) / 2 : items;
                return slideCount <= a;
            }

            var width = fixedWidth ? (fixedWidth + gutter) * slideCount : slidePositions[slideCount],
                vp = edgePadding ? viewport + edgePadding * 2 : viewport + gutter;

            if (center) {
                vp -= fixedWidth ? (viewport - fixedWidth) / 2 : (viewport - (slidePositions[index + 1] - slidePositions[index] - gutter)) / 2;
            }

            return width <= vp;
        }

        function setBreakpointZone() {
            breakpointZone = 0;
            for (var bp in responsive) {
                bp = parseInt(bp); // convert string to number
                if (windowWidth >= bp) { breakpointZone = bp; }
            }
        }

        // (slideBy, indexMin, indexMax) => index
        var updateIndex = (function () {
            return loop ?
                carousel ?
                    // loop + carousel
                    function () {
                        var leftEdge = indexMin,
                            rightEdge = indexMax;

                        leftEdge += slideBy;
                        rightEdge -= slideBy;

                        // adjust edges when has edge paddings
                        // or fixed-width slider with extra space on the right side
                        if (edgePadding) {
                            leftEdge += 1;
                            rightEdge -= 1;
                        } else if (fixedWidth) {
                            if ((viewport + gutter) % (fixedWidth + gutter)) { rightEdge -= 1; }
                        }

                        if (cloneCount) {
                            if (index > rightEdge) {
                                index -= slideCount;
                            } else if (index < leftEdge) {
                                index += slideCount;
                            }
                        }
                    } :
                    // loop + gallery
                    function () {
                        if (index > indexMax) {
                            while (index >= indexMin + slideCount) { index -= slideCount; }
                        } else if (index < indexMin) {
                            while (index <= indexMax - slideCount) { index += slideCount; }
                        }
                    } :
                // non-loop
                function () {
                    index = Math.max(indexMin, Math.min(indexMax, index));
                };
        })();

        function disableUI() {
            if (!autoplay && autoplayButton) { hideElement(autoplayButton); }
            if (!nav && navContainer) { hideElement(navContainer); }
            if (!controls) {
                if (controlsContainer) {
                    hideElement(controlsContainer);
                } else {
                    if (prevButton) { hideElement(prevButton); }
                    if (nextButton) { hideElement(nextButton); }
                }
            }
        }

        function enableUI() {
            if (autoplay && autoplayButton) { showElement(autoplayButton); }
            if (nav && navContainer) { showElement(navContainer); }
            if (controls) {
                if (controlsContainer) {
                    showElement(controlsContainer);
                } else {
                    if (prevButton) { showElement(prevButton); }
                    if (nextButton) { showElement(nextButton); }
                }
            }
        }

        function freezeSlider() {
            if (frozen) { return; }

            // remove edge padding from inner wrapper
            if (edgePadding) { innerWrapper.style.margin = '0px'; }

            // add class tns-transparent to cloned slides
            if (cloneCount) {
                var str = 'tns-transparent';
                for (var i = cloneCount; i--;) {
                    if (carousel) { addClass(slideItems[i], str); }
                    addClass(slideItems[slideCountNew - i - 1], str);
                }
            }

            // update tools
            disableUI();

            frozen = true;
        }

        function unfreezeSlider() {
            if (!frozen) { return; }

            // restore edge padding for inner wrapper
            // for mordern browsers
            if (edgePadding && CSSMQ) { innerWrapper.style.margin = ''; }

            // remove class tns-transparent to cloned slides
            if (cloneCount) {
                var str = 'tns-transparent';
                for (var i = cloneCount; i--;) {
                    if (carousel) { removeClass(slideItems[i], str); }
                    removeClass(slideItems[slideCountNew - i - 1], str);
                }
            }

            // update tools
            enableUI();

            frozen = false;
        }

        function disableSlider() {
            if (disabled) { return; }

            sheet.disabled = true;
            container.className = container.className.replace(newContainerClasses.substring(1), '');
            removeAttrs(container, ['style']);
            if (loop) {
                for (var j = cloneCount; j--;) {
                    if (carousel) { hideElement(slideItems[j]); }
                    hideElement(slideItems[slideCountNew - j - 1]);
                }
            }

            // vertical slider
            if (!horizontal || !carousel) { removeAttrs(innerWrapper, ['style']); }

            // gallery
            if (!carousel) {
                for (var i = index, l = index + slideCount; i < l; i++) {
                    var item = slideItems[i];
                    removeAttrs(item, ['style']);
                    removeClass(item, animateIn);
                    removeClass(item, animateNormal);
                }
            }

            // update tools
            disableUI();

            disabled = true;
        }

        function enableSlider() {
            if (!disabled) { return; }

            sheet.disabled = false;
            container.className += newContainerClasses;
            doContainerTransformSilent();

            if (loop) {
                for (var j = cloneCount; j--;) {
                    if (carousel) { showElement(slideItems[j]); }
                    showElement(slideItems[slideCountNew - j - 1]);
                }
            }

            // gallery
            if (!carousel) {
                for (var i = index, l = index + slideCount; i < l; i++) {
                    var item = slideItems[i],
                        classN = i < index + items ? animateIn : animateNormal;
                    item.style.left = (i - index) * 100 / items + '%';
                    addClass(item, classN);
                }
            }

            // update tools
            enableUI();

            disabled = false;
        }

        function updateLiveRegion() {
            var str = getLiveRegionStr();
            if (liveregionCurrent.innerHTML !== str) { liveregionCurrent.innerHTML = str; }
        }

        function getLiveRegionStr() {
            var arr = getVisibleSlideRange(),
                start = arr[0] + 1,
                end = arr[1] + 1;
            return start === end ? start + '' : start + ' to ' + end;
        }

        function getVisibleSlideRange(val) {
            if (val == null) { val = getContainerTransformValue(); }
            var start = index, end, rangestart, rangeend;

            // get range start, range end for autoWidth and fixedWidth
            if (center || edgePadding) {
                if (autoWidth || fixedWidth) {
                    rangestart = - (parseFloat(val) + edgePadding);
                    rangeend = rangestart + viewport + edgePadding * 2;
                }
            } else {
                if (autoWidth) {
                    rangestart = slidePositions[index];
                    rangeend = rangestart + viewport;
                }
            }

            // get start, end
            // - check auto width
            if (autoWidth) {
                slidePositions.forEach(function (point, i) {
                    if (i < slideCountNew) {
                        if ((center || edgePadding) && point <= rangestart + 0.5) { start = i; }
                        if (rangeend - point >= 0.5) { end = i; }
                    }
                });

                // - check percentage width, fixed width
            } else {

                if (fixedWidth) {
                    var cell = fixedWidth + gutter;
                    if (center || edgePadding) {
                        start = Math.floor(rangestart / cell);
                        end = Math.ceil(rangeend / cell - 1);
                    } else {
                        end = start + Math.ceil(viewport / cell) - 1;
                    }

                } else {
                    if (center || edgePadding) {
                        var a = items - 1;
                        if (center) {
                            start -= a / 2;
                            end = index + a / 2;
                        } else {
                            end = index + a;
                        }

                        if (edgePadding) {
                            var b = edgePadding * items / viewport;
                            start -= b;
                            end += b;
                        }

                        start = Math.floor(start);
                        end = Math.ceil(end);
                    } else {
                        end = start + items - 1;
                    }
                }

                start = Math.max(start, 0);
                end = Math.min(end, slideCountNew - 1);
            }

            return [start, end];
        }

        function doLazyLoad() {
            if (lazyload && !disable) {
                getImageArray.apply(null, getVisibleSlideRange()).forEach(function (img) {
                    if (!hasClass(img, imgCompleteClass)) {
                        // stop propagation transitionend event to container
                        var eve = {};
                        eve[TRANSITIONEND] = function (e) { e.stopPropagation(); };
                        addEvents(img, eve);

                        addEvents(img, imgEvents);

                        // update src
                        img.src = getAttr(img, 'data-src');

                        // update srcset
                        var srcset = getAttr(img, 'data-srcset');
                        if (srcset) { img.srcset = srcset; }

                        addClass(img, 'loading');
                    }
                });
            }
        }

        function onImgLoaded(e) {
            imgLoaded(getTarget(e));
        }

        function onImgFailed(e) {
            imgFailed(getTarget(e));
        }

        function imgLoaded(img) {
            addClass(img, 'loaded');
            imgCompleted(img);
        }

        function imgFailed(img) {
            addClass(img, 'failed');
            imgCompleted(img);
        }

        function imgCompleted(img) {
            addClass(img, 'tns-complete');
            removeClass(img, 'loading');
            removeEvents(img, imgEvents);
        }

        function getImageArray(start, end) {
            var imgs = [];
            while (start <= end) {
                forEach(slideItems[start].querySelectorAll('img'), function (img) { imgs.push(img); });
                start++;
            }

            return imgs;
        }

        // check if all visible images are loaded
        // and update container height if it's done
        function doAutoHeight() {
            var imgs = getImageArray.apply(null, getVisibleSlideRange());
            raf(function () { imgsLoadedCheck(imgs, updateInnerWrapperHeight); });
        }

        function imgsLoadedCheck(imgs, cb) {
            // directly execute callback function if all images are complete
            if (imgsComplete) { return cb(); }

            // check selected image classes otherwise
            imgs.forEach(function (img, index) {
                if (hasClass(img, imgCompleteClass)) { imgs.splice(index, 1); }
            });

            // execute callback function if selected images are all complete
            if (!imgs.length) { return cb(); }

            // otherwise execute this functiona again
            raf(function () { imgsLoadedCheck(imgs, cb); });
        }

        function additionalUpdates() {
            doLazyLoad();
            updateSlideStatus();
            updateLiveRegion();
            updateControlsStatus();
            updateNavStatus();
        }


        function update_carousel_transition_duration() {
            if (carousel && autoHeight) {
                middleWrapper.style[TRANSITIONDURATION] = speed / 1000 + 's';
            }
        }

        function getMaxSlideHeight(slideStart, slideRange) {
            var heights = [];
            for (var i = slideStart, l = Math.min(slideStart + slideRange, slideCountNew); i < l; i++) {
                heights.push(slideItems[i].offsetHeight);
            }

            return Math.max.apply(null, heights);
        }

        // update inner wrapper height
        // 1. get the max-height of the visible slides
        // 2. set transitionDuration to speed
        // 3. update inner wrapper height to max-height
        // 4. set transitionDuration to 0s after transition done
        function updateInnerWrapperHeight() {
            var maxHeight = autoHeight ? getMaxSlideHeight(index, items) : getMaxSlideHeight(cloneCount, slideCount),
                wp = middleWrapper ? middleWrapper : innerWrapper;

            if (wp.style.height !== maxHeight) { wp.style.height = maxHeight + 'px'; }
        }

        // get the distance from the top edge of the first slide to each slide
        // (init) => slidePositions
        function setSlidePositions() {
            slidePositions = [0];
            var attr = horizontal ? 'left' : 'top',
                attr2 = horizontal ? 'right' : 'bottom',
                base = slideItems[0].getBoundingClientRect()[attr];

            forEach(slideItems, function (item, i) {
                // skip the first slide
                if (i) { slidePositions.push(item.getBoundingClientRect()[attr] - base); }
                // add the end edge
                if (i === slideCountNew - 1) { slidePositions.push(item.getBoundingClientRect()[attr2] - base); }
            });
        }

        // update slide
        function updateSlideStatus() {
            var range = getVisibleSlideRange(),
                start = range[0],
                end = range[1];

            forEach(slideItems, function (item, i) {
                // show slides
                if (i >= start && i <= end) {
                    if (hasAttr(item, 'aria-hidden')) {
                        removeAttrs(item, ['aria-hidden', 'tabindex']);
                        addClass(item, slideActiveClass);
                    }
                    // hide slides
                } else {
                    if (!hasAttr(item, 'aria-hidden')) {
                        setAttrs(item, {
                            'aria-hidden': 'true',
                            'tabindex': '-1'
                        });
                        removeClass(item, slideActiveClass);
                    }
                }
            });
        }

        // gallery: update slide position
        function updateGallerySlidePositions() {
            var l = index + Math.min(slideCount, items);
            for (var i = slideCountNew; i--;) {
                var item = slideItems[i];

                if (i >= index && i < l) {
                    // add transitions to visible slides when adjusting their positions
                    addClass(item, 'tns-moving');

                    item.style.left = (i - index) * 100 / items + '%';
                    addClass(item, animateIn);
                    removeClass(item, animateNormal);
                } else if (item.style.left) {
                    item.style.left = '';
                    addClass(item, animateNormal);
                    removeClass(item, animateIn);
                }

                // remove outlet animation
                removeClass(item, animateOut);
            }

            // removing '.tns-moving'
            setTimeout(function () {
                forEach(slideItems, function (el) {
                    removeClass(el, 'tns-moving');
                });
            }, 300);
        }

        // set tabindex on Nav
        function updateNavStatus() {
            // get current nav
            if (nav) {
                navCurrentIndex = navClicked >= 0 ? navClicked : getCurrentNavIndex();
                navClicked = -1;

                if (navCurrentIndex !== navCurrentIndexCached) {
                    var navPrev = navItems[navCurrentIndexCached],
                        navCurrent = navItems[navCurrentIndex];

                    setAttrs(navPrev, {
                        'tabindex': '-1',
                        'aria-label': navStr + (navCurrentIndexCached + 1)
                    });
                    removeClass(navPrev, navActiveClass);

                    setAttrs(navCurrent, { 'aria-label': navStr + (navCurrentIndex + 1) + navStrCurrent });
                    removeAttrs(navCurrent, 'tabindex');
                    addClass(navCurrent, navActiveClass);

                    navCurrentIndexCached = navCurrentIndex;
                }
            }
        }

        function getLowerCaseNodeName(el) {
            return el.nodeName.toLowerCase();
        }

        function isButton(el) {
            return getLowerCaseNodeName(el) === 'button';
        }

        function isAriaDisabled(el) {
            return el.getAttribute('aria-disabled') === 'true';
        }

        function disEnableElement(isButton, el, val) {
            if (isButton) {
                el.disabled = val;
            } else {
                el.setAttribute('aria-disabled', val.toString());
            }
        }

        // set 'disabled' to true on controls when reach the edges
        function updateControlsStatus() {
            if (!controls || rewind || loop) { return; }

            var prevDisabled = (prevIsButton) ? prevButton.disabled : isAriaDisabled(prevButton),
                nextDisabled = (nextIsButton) ? nextButton.disabled : isAriaDisabled(nextButton),
                disablePrev = (index <= indexMin) ? true : false,
                disableNext = (!rewind && index >= indexMax) ? true : false;

            if (disablePrev && !prevDisabled) {
                disEnableElement(prevIsButton, prevButton, true);
            }
            if (!disablePrev && prevDisabled) {
                disEnableElement(prevIsButton, prevButton, false);
            }
            if (disableNext && !nextDisabled) {
                disEnableElement(nextIsButton, nextButton, true);
            }
            if (!disableNext && nextDisabled) {
                disEnableElement(nextIsButton, nextButton, false);
            }
        }

        // set duration
        function resetDuration(el, str) {
            if (TRANSITIONDURATION) { el.style[TRANSITIONDURATION] = str; }
        }

        function getSliderWidth() {
            return fixedWidth ? (fixedWidth + gutter) * slideCountNew : slidePositions[slideCountNew];
        }

        function getCenterGap(num) {
            if (num == null) { num = index; }

            var gap = edgePadding ? gutter : 0;
            return autoWidth ? ((viewport - gap) - (slidePositions[num + 1] - slidePositions[num] - gutter)) / 2 :
                fixedWidth ? (viewport - fixedWidth) / 2 :
                    (items - 1) / 2;
        }

        function getRightBoundary() {
            var gap = edgePadding ? gutter : 0,
                result = (viewport + gap) - getSliderWidth();

            if (center && !loop) {
                result = fixedWidth ? - (fixedWidth + gutter) * (slideCountNew - 1) - getCenterGap() :
                    getCenterGap(slideCountNew - 1) - slidePositions[slideCountNew - 1];
            }
            if (result > 0) { result = 0; }

            return result;
        }

        function getContainerTransformValue(num) {
            if (num == null) { num = index; }

            var val;
            if (horizontal && !autoWidth) {
                if (fixedWidth) {
                    val = - (fixedWidth + gutter) * num;
                    if (center) { val += getCenterGap(); }
                } else {
                    var denominator = TRANSFORM ? slideCountNew : items;
                    if (center) { num -= getCenterGap(); }
                    val = - num * 100 / denominator;
                }
            } else {
                val = - slidePositions[num];
                if (center && autoWidth) {
                    val += getCenterGap();
                }
            }

            if (hasRightDeadZone) { val = Math.max(val, rightBoundary); }

            val += (horizontal && !autoWidth && !fixedWidth) ? '%' : 'px';

            return val;
        }

        function doContainerTransformSilent(val) {
            resetDuration(container, '0s');
            doContainerTransform(val);
        }

        function doContainerTransform(val) {
            if (val == null) { val = getContainerTransformValue(); }
            if (textDirection === 'rtl' && val.charAt(0) === '-') {
                val = val.substr(1)
            }
            container.style[transformAttr] = transformPrefix + val + transformPostfix;
        }

        function animateSlide(number, classOut, classIn, isOut) {
            var l = number + items;
            if (!loop) { l = Math.min(l, slideCountNew); }

            for (var i = number; i < l; i++) {
                var item = slideItems[i];

                // set item positions
                if (!isOut) { item.style.left = (i - index) * 100 / items + '%'; }

                if (animateDelay && TRANSITIONDELAY) {
                    item.style[TRANSITIONDELAY] = item.style[ANIMATIONDELAY] = animateDelay * (i - number) / 1000 + 's';
                }
                removeClass(item, classOut);
                addClass(item, classIn);

                if (isOut) { slideItemsOut.push(item); }
            }
        }

        // make transfer after click/drag:
        // 1. change 'transform' property for mordern browsers
        // 2. change 'left' property for legacy browsers
        var transformCore = (function () {
            return carousel ?
                function () {
                    resetDuration(container, '');
                    if (TRANSITIONDURATION || !speed) {
                        // for morden browsers with non-zero duration or
                        // zero duration for all browsers
                        doContainerTransform();
                        // run fallback function manually
                        // when duration is 0 / container is hidden
                        if (!speed || !isVisible(container)) { onTransitionEnd(); }

                    } else {
                        // for old browser with non-zero duration
                        jsTransform(container, transformAttr, transformPrefix, transformPostfix, getContainerTransformValue(), speed, onTransitionEnd);
                    }

                    if (!horizontal) { updateContentWrapperHeight(); }
                } :
                function () {
                    slideItemsOut = [];

                    var eve = {};
                    eve[TRANSITIONEND] = eve[ANIMATIONEND] = onTransitionEnd;
                    removeEvents(slideItems[indexCached], eve);
                    addEvents(slideItems[index], eve);

                    animateSlide(indexCached, animateIn, animateOut, true);
                    animateSlide(index, animateNormal, animateIn);

                    // run fallback function manually
                    // when transition or animation not supported / duration is 0
                    if (!TRANSITIONEND || !ANIMATIONEND || !speed || !isVisible(container)) { onTransitionEnd(); }
                };
        })();

        function render(e, sliderMoved) {
            if (updateIndexBeforeTransform) { updateIndex(); }

            // render when slider was moved (touch or drag) even though index may not change
            if (index !== indexCached || sliderMoved) {
                // events
                events.emit('indexChanged', info());
                events.emit('transitionStart', info());
                if (autoHeight) { doAutoHeight(); }

                // pause autoplay when click or keydown from user
                if (animating && e && ['click', 'keydown'].indexOf(e.type) >= 0) { stopAutoplay(); }

                running = true;
                transformCore();
            }
        }

        /*
         * Transfer prefixed properties to the same format
         * CSS: -Webkit-Transform => webkittransform
         * JS: WebkitTransform => webkittransform
         * @param {string} str - property
         *
         */
        function strTrans(str) {
            return str.toLowerCase().replace(/-/g, '');
        }

        // AFTER TRANSFORM
        // Things need to be done after a transfer:
        // 1. check index
        // 2. add classes to visible slide
        // 3. disable controls buttons when reach the first/last slide in non-loop slider
        // 4. update nav status
        // 5. lazyload images
        // 6. update container height
        function onTransitionEnd(event) {
            // check running on gallery mode
            // make sure trantionend/animationend events run only once
            if (carousel || running) {
                events.emit('transitionEnd', info(event));

                if (!carousel && slideItemsOut.length > 0) {
                    for (var i = 0; i < slideItemsOut.length; i++) {
                        var item = slideItemsOut[i];
                        // set item positions
                        item.style.left = '';

                        if (ANIMATIONDELAY && TRANSITIONDELAY) {
                            item.style[ANIMATIONDELAY] = '';
                            item.style[TRANSITIONDELAY] = '';
                        }
                        removeClass(item, animateOut);
                        addClass(item, animateNormal);
                    }
                }

                /* update slides, nav, controls after checking ...
                 * => legacy browsers who don't support 'event'
                 *    have to check event first, otherwise event.target will cause an error
                 * => or 'gallery' mode:
                 *   + event target is slide item
                 * => or 'carousel' mode:
                 *   + event target is container,
                 *   + event.property is the same with transform attribute
                 */
                if (!event ||
                    !carousel && event.target.parentNode === container ||
                    event.target === container && strTrans(event.propertyName) === strTrans(transformAttr)) {

                    if (!updateIndexBeforeTransform) {
                        var indexTem = index;
                        updateIndex();
                        if (index !== indexTem) {
                            events.emit('indexChanged', info());

                            doContainerTransformSilent();
                        }
                    }

                    if (nested === 'inner') { events.emit('innerLoaded', info()); }
                    running = false;
                    indexCached = index;
                }
            }

        }

        // # ACTIONS
        function goTo(targetIndex, e) {
            if (freeze) { return; }

            // prev slideBy
            if (targetIndex === 'prev') {
                onControlsClick(e, -1);

                // next slideBy
            } else if (targetIndex === 'next') {
                onControlsClick(e, 1);

                // go to exact slide
            } else {
                if (running) {
                    if (preventActionWhenRunning) { return; } else { onTransitionEnd(); }
                }

                var absIndex = getAbsIndex(),
                    indexGap = 0;

                if (targetIndex === 'first') {
                    indexGap = - absIndex;
                } else if (targetIndex === 'last') {
                    indexGap = carousel ? slideCount - items - absIndex : slideCount - 1 - absIndex;
                } else {
                    if (typeof targetIndex !== 'number') { targetIndex = parseInt(targetIndex); }

                    if (!isNaN(targetIndex)) {
                        // from directly called goTo function
                        if (!e) { targetIndex = Math.max(0, Math.min(slideCount - 1, targetIndex)); }

                        indexGap = targetIndex - absIndex;
                    }
                }

                // gallery: make sure new page won't overlap with current page
                if (!carousel && indexGap && Math.abs(indexGap) < items) {
                    var factor = indexGap > 0 ? 1 : -1;
                    indexGap += (index + indexGap - slideCount) >= indexMin ? slideCount * factor : slideCount * 2 * factor * -1;
                }

                index += indexGap;

                // make sure index is in range
                if (carousel && loop) {
                    if (index < indexMin) { index += slideCount; }
                    if (index > indexMax) { index -= slideCount; }
                }

                // if index is changed, start rendering
                if (getAbsIndex(index) !== getAbsIndex(indexCached)) {
                    render(e);
                }

            }
        }

        // on controls click
        function onControlsClick(e, dir) {
            if (running) {
                if (preventActionWhenRunning) { return; } else { onTransitionEnd(); }
            }
            var passEventObject;

            if (!dir) {
                e = getEvent(e);
                var target = getTarget(e);

                while (target !== controlsContainer && [prevButton, nextButton].indexOf(target) < 0) { target = target.parentNode; }

                var targetIn = [prevButton, nextButton].indexOf(target);
                if (targetIn >= 0) {
                    passEventObject = true;
                    dir = targetIn === 0 ? -1 : 1;
                }
            }

            if (rewind) {
                if (index === indexMin && dir === -1) {
                    goTo('last', e);
                    return;
                } else if (index === indexMax && dir === 1) {
                    goTo('first', e);
                    return;
                }
            }

            if (dir) {
                index += slideBy * dir;
                if (autoWidth) { index = Math.floor(index); }
                // pass e when click control buttons or keydown
                render((passEventObject || (e && e.type === 'keydown')) ? e : null);
            }
        }

        // on nav click
        function onNavClick(e) {
            if (running) {
                if (preventActionWhenRunning) { return; } else { onTransitionEnd(); }
            }

            e = getEvent(e);
            var target = getTarget(e), navIndex;

            // find the clicked nav item
            while (target !== navContainer && !hasAttr(target, 'data-nav')) { target = target.parentNode; }
            if (hasAttr(target, 'data-nav')) {
                var navIndex = navClicked = Number(getAttr(target, 'data-nav')),
                    targetIndexBase = fixedWidth || autoWidth ? navIndex * slideCount / pages : navIndex * items,
                    targetIndex = navAsThumbnails ? navIndex : Math.min(Math.ceil(targetIndexBase), slideCount - 1);
                goTo(targetIndex, e);

                if (navCurrentIndex === navIndex) {
                    if (animating) { stopAutoplay(); }
                    navClicked = -1; // reset navClicked
                }
            }
        }

        // autoplay functions
        function setAutoplayTimer() {
            autoplayTimer = setInterval(function () {
                onControlsClick(null, autoplayDirection);
            }, autoplayTimeout);

            animating = true;
        }

        function stopAutoplayTimer() {
            clearInterval(autoplayTimer);
            animating = false;
        }

        function updateAutoplayButton(action, txt) {
            setAttrs(autoplayButton, { 'data-action': action });
            autoplayButton.innerHTML = autoplayHtmlStrings[0] + action + autoplayHtmlStrings[1] + txt;
        }

        function startAutoplay() {
            setAutoplayTimer();
            if (autoplayButton) { updateAutoplayButton('stop', autoplayText[1]); }
        }

        function stopAutoplay() {
            stopAutoplayTimer();
            if (autoplayButton) { updateAutoplayButton('start', autoplayText[0]); }
        }

        // programaitcally play/pause the slider
        function play() {
            if (autoplay && !animating) {
                startAutoplay();
                autoplayUserPaused = false;
            }
        }
        function pause() {
            if (animating) {
                stopAutoplay();
                autoplayUserPaused = true;
            }
        }

        function toggleAutoplay() {
            if (animating) {
                stopAutoplay();
                autoplayUserPaused = true;
            } else {
                startAutoplay();
                autoplayUserPaused = false;
            }
        }

        function onVisibilityChange() {
            if (doc.hidden) {
                if (animating) {
                    stopAutoplayTimer();
                    autoplayVisibilityPaused = true;
                }
            } else if (autoplayVisibilityPaused) {
                setAutoplayTimer();
                autoplayVisibilityPaused = false;
            }
        }

        function mouseoverPause() {
            if (animating) {
                stopAutoplayTimer();
                autoplayHoverPaused = true;
            }
        }

        function mouseoutRestart() {
            if (autoplayHoverPaused) {
                setAutoplayTimer();
                autoplayHoverPaused = false;
            }
        }

        // keydown events on document
        function onDocumentKeydown(e) {
            e = getEvent(e);
            var keyIndex = [KEYS.LEFT, KEYS.RIGHT].indexOf(e.keyCode);

            if (keyIndex >= 0) {
                onControlsClick(e, keyIndex === 0 ? -1 : 1);
            }
        }

        // on key control
        function onControlsKeydown(e) {
            e = getEvent(e);
            var keyIndex = [KEYS.LEFT, KEYS.RIGHT].indexOf(e.keyCode);

            if (keyIndex >= 0) {
                if (keyIndex === 0) {
                    if (!prevButton.disabled) { onControlsClick(e, -1); }
                } else if (!nextButton.disabled) {
                    onControlsClick(e, 1);
                }
            }
        }

        // set focus
        function setFocus(el) {
            el.focus();
        }

        // on key nav
        function onNavKeydown(e) {
            e = getEvent(e);
            var curElement = doc.activeElement;
            if (!hasAttr(curElement, 'data-nav')) { return; }

            // var code = e.keyCode,
            var keyIndex = [KEYS.LEFT, KEYS.RIGHT, KEYS.ENTER, KEYS.SPACE].indexOf(e.keyCode),
                navIndex = Number(getAttr(curElement, 'data-nav'));

            if (keyIndex >= 0) {
                if (keyIndex === 0) {
                    if (navIndex > 0) { setFocus(navItems[navIndex - 1]); }
                } else if (keyIndex === 1) {
                    if (navIndex < pages - 1) { setFocus(navItems[navIndex + 1]); }
                } else {
                    navClicked = navIndex;
                    goTo(navIndex, e);
                }
            }
        }

        function getEvent(e) {
            e = e || win.event;
            return isTouchEvent(e) ? e.changedTouches[0] : e;
        }
        function getTarget(e) {
            return e.target || win.event.srcElement;
        }

        function isTouchEvent(e) {
            return e.type.indexOf('touch') >= 0;
        }

        function preventDefaultBehavior(e) {
            e.preventDefault ? e.preventDefault() : e.returnValue = false;
        }

        function getMoveDirectionExpected() {
            return getTouchDirection(toDegree(lastPosition.y - initPosition.y, lastPosition.x - initPosition.x), swipeAngle) === options.axis;
        }

        function onPanStart(e) {
            if (running) {
                if (preventActionWhenRunning) { return; } else { onTransitionEnd(); }
            }

            if (autoplay && animating) { stopAutoplayTimer(); }

            panStart = true;
            if (rafIndex) {
                caf(rafIndex);
                rafIndex = null;
            }

            var $ = getEvent(e);
            events.emit(isTouchEvent(e) ? 'touchStart' : 'dragStart', info(e));

            if (!isTouchEvent(e) && ['img', 'a'].indexOf(getLowerCaseNodeName(getTarget(e))) >= 0) {
                preventDefaultBehavior(e);
            }

            lastPosition.x = initPosition.x = $.clientX;
            lastPosition.y = initPosition.y = $.clientY;
            if (carousel) {
                translateInit = parseFloat(container.style[transformAttr].replace(transformPrefix, ''));
                resetDuration(container, '0s');
            }
        }

        function onPanMove(e) {
            if (panStart) {
                var $ = getEvent(e);
                lastPosition.x = $.clientX;
                lastPosition.y = $.clientY;

                if (carousel) {
                    if (!rafIndex) { rafIndex = raf(function () { panUpdate(e); }); }
                } else {
                    if (moveDirectionExpected === '?') { moveDirectionExpected = getMoveDirectionExpected(); }
                    if (moveDirectionExpected) { preventScroll = true; }
                }

                if (preventScroll) { e.preventDefault(); }
            }
        }

        function panUpdate(e) {
            if (!moveDirectionExpected) {
                panStart = false;
                return;
            }
            caf(rafIndex);
            if (panStart) { rafIndex = raf(function () { panUpdate(e); }); }

            if (moveDirectionExpected === '?') { moveDirectionExpected = getMoveDirectionExpected(); }
            if (moveDirectionExpected) {
                if (!preventScroll && isTouchEvent(e)) { preventScroll = true; }

                try {
                    if (e.type) { events.emit(isTouchEvent(e) ? 'touchMove' : 'dragMove', info(e)); }
                } catch (err) { }

                var x = translateInit,
                    dist = getDist(lastPosition, initPosition);
                if (!horizontal || fixedWidth || autoWidth) {
                    x += dist;
                    x += 'px';
                } else {
                    var percentageX = TRANSFORM ? dist * items * 100 / ((viewport + gutter) * slideCountNew) : dist * 100 / (viewport + gutter);
                    x += percentageX;
                    x += '%';
                }

                container.style[transformAttr] = transformPrefix + x + transformPostfix;
            }
        }

        function onPanEnd(e) {
            if (panStart) {
                if (rafIndex) {
                    caf(rafIndex);
                    rafIndex = null;
                }
                if (carousel) { resetDuration(container, ''); }
                panStart = false;

                var $ = getEvent(e);
                lastPosition.x = $.clientX;
                lastPosition.y = $.clientY;
                var dist = getDist(lastPosition, initPosition);

                if (Math.abs(dist)) {
                    // drag vs click
                    if (!isTouchEvent(e)) {
                        // prevent "click"
                        var target = getTarget(e);
                        addEvents(target, {
                            'click': function preventClick(e) {
                                preventDefaultBehavior(e);
                                removeEvents(target, { 'click': preventClick });
                            }
                        });
                    }

                    if (carousel) {
                        rafIndex = raf(function () {
                            if (horizontal && !autoWidth) {
                                var indexMoved = - dist * items / (viewport + gutter);
                                indexMoved = dist > 0 ? Math.floor(indexMoved) : Math.ceil(indexMoved);
                                if (textDirection === 'rtl') {
                                    index += indexMoved * -1;
                                } else {
                                    index += indexMoved;
                                }
                            } else {
                                var moved = - (translateInit + dist);
                                if (moved <= 0) {
                                    index = indexMin;
                                } else if (moved >= slidePositions[slideCountNew - 1]) {
                                    index = indexMax;
                                } else {
                                    var i = 0;
                                    while (i < slideCountNew && moved >= slidePositions[i]) {
                                        index = i;
                                        if (moved > slidePositions[i] && dist < 0) { index += 1; }
                                        i++;
                                    }
                                }
                            }

                            render(e, dist);
                            events.emit(isTouchEvent(e) ? 'touchEnd' : 'dragEnd', info(e));
                        });
                    } else {
                        if (moveDirectionExpected) {
                            onControlsClick(e, dist > 0 ? -1 : 1);
                        }
                    }
                }
            }

            // reset
            if (options.preventScrollOnTouch === 'auto') { preventScroll = false; }
            if (swipeAngle) { moveDirectionExpected = '?'; }
            if (autoplay && !animating) { setAutoplayTimer(); }
        }

        // === RESIZE FUNCTIONS === //
        // (slidePositions, index, items) => vertical_conentWrapper.height
        function updateContentWrapperHeight() {
            var wp = middleWrapper ? middleWrapper : innerWrapper;
            wp.style.height = slidePositions[index + items] - slidePositions[index] + 'px';
        }

        function getPages() {
            var rough = fixedWidth ? (fixedWidth + gutter) * slideCount / viewport : slideCount / items;
            return Math.min(Math.ceil(rough), slideCount);
        }

        /*
         * 1. update visible nav items list
         * 2. add "hidden" attributes to previous visible nav items
         * 3. remove "hidden" attrubutes to new visible nav items
         */
        function updateNavVisibility() {
            if (!nav || navAsThumbnails) { return; }

            if (pages !== pagesCached) {
                var min = pagesCached,
                    max = pages,
                    fn = showElement;

                if (pagesCached > pages) {
                    min = pages;
                    max = pagesCached;
                    fn = hideElement;
                }

                while (min < max) {
                    fn(navItems[min]);
                    min++;
                }

                // cache pages
                pagesCached = pages;
            }
        }

        function info(e) {
            return {
                container: container,
                slideItems: slideItems,
                navContainer: navContainer,
                navItems: navItems,
                controlsContainer: controlsContainer,
                hasControls: hasControls,
                prevButton: prevButton,
                nextButton: nextButton,
                items: items,
                slideBy: slideBy,
                cloneCount: cloneCount,
                slideCount: slideCount,
                slideCountNew: slideCountNew,
                index: index,
                indexCached: indexCached,
                displayIndex: getCurrentSlide(),
                navCurrentIndex: navCurrentIndex,
                navCurrentIndexCached: navCurrentIndexCached,
                pages: pages,
                pagesCached: pagesCached,
                sheet: sheet,
                isOn: isOn,
                event: e || {},
            };
        }

        return {
            version: '2.9.1',
            getInfo: info,
            events: events,
            goTo: goTo,
            play: play,
            pause: pause,
            isOn: isOn,
            updateSliderHeight: updateInnerWrapperHeight,
            refresh: initSliderTransform,
            destroy: destroy,
            rebuild: function () {
                return tns(extend(options, optionsElements));
            }
        };
    };

    return tns;
})();

/*
 * @build  : 20-07-2013
 * @author : Ram swaroop
 * @site   : Compzets.com
 */
(function ($) {

    // defines various easing effects
    $.easing['jswing'] = $.easing['swing'];
    $.extend($.easing,
        {
            def: 'easeOutQuad',
            swing: function (x, t, b, c, d) {
                return $.easing[$.easing.def](x, t, b, c, d);
            },
            easeInQuad: function (x, t, b, c, d) {
                return c * (t /= d) * t + b;
            },
            easeOutQuad: function (x, t, b, c, d) {
                return -c * (t /= d) * (t - 2) + b;
            },
            easeInOutQuad: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t + b;
                return -c / 2 * ((--t) * (t - 2) - 1) + b;
            },
            easeInCubic: function (x, t, b, c, d) {
                return c * (t /= d) * t * t + b;
            },
            easeOutCubic: function (x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t + 1) + b;
            },
            easeInOutCubic: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
                return c / 2 * ((t -= 2) * t * t + 2) + b;
            },
            easeInQuart: function (x, t, b, c, d) {
                return c * (t /= d) * t * t * t + b;
            },
            easeOutQuart: function (x, t, b, c, d) {
                return -c * ((t = t / d - 1) * t * t * t - 1) + b;
            },
            easeInOutQuart: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
                return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
            },
            easeInQuint: function (x, t, b, c, d) {
                return c * (t /= d) * t * t * t * t + b;
            },
            easeOutQuint: function (x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
            },
            easeInOutQuint: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
                return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
            },
            easeInSine: function (x, t, b, c, d) {
                return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
            },
            easeOutSine: function (x, t, b, c, d) {
                return c * Math.sin(t / d * (Math.PI / 2)) + b;
            },
            easeInOutSine: function (x, t, b, c, d) {
                return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
            },
            easeInExpo: function (x, t, b, c, d) {
                return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
            },
            easeOutExpo: function (x, t, b, c, d) {
                return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
            },
            easeInOutExpo: function (x, t, b, c, d) {
                if (t == 0) return b;
                if (t == d) return b + c;
                if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
            },
            easeInCirc: function (x, t, b, c, d) {
                return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
            },
            easeOutCirc: function (x, t, b, c, d) {
                return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
            },
            easeInOutCirc: function (x, t, b, c, d) {
                if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
                return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
            },
            easeInElastic: function (x, t, b, c, d) {
                var s = 1.70158; var p = 0; var a = c;
                if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
                if (a < Math.abs(c)) { a = c; var s = p / 4; }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            },
            easeOutElastic: function (x, t, b, c, d) {
                var s = 1.70158; var p = 0; var a = c;
                if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
                if (a < Math.abs(c)) { a = c; var s = p / 4; }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
            },
            easeInOutElastic: function (x, t, b, c, d) {
                var s = 1.70158; var p = 0; var a = c;
                if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5);
                if (a < Math.abs(c)) { a = c; var s = p / 4; }
                else var s = p / (2 * Math.PI) * Math.asin(c / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
            },
            easeInBack: function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                return c * (t /= d) * t * ((s + 1) * t - s) + b;
            },
            easeOutBack: function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            },
            easeInOutBack: function (x, t, b, c, d, s) {
                if (s == undefined) s = 1.70158;
                if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
                return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
            },
            easeInBounce: function (x, t, b, c, d) {
                return c - $.easing.easeOutBounce(x, d - t, 0, c, d) + b;
            },
            easeOutBounce: function (x, t, b, c, d) {
                if ((t /= d) < (1 / 2.75)) {
                    return c * (7.5625 * t * t) + b;
                } else if (t < (2 / 2.75)) {
                    return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
                } else if (t < (2.5 / 2.75)) {
                    return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
                } else {
                    return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
                }
            },
            easeInOutBounce: function (x, t, b, c, d) {
                if (t < d / 2) return $.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
                return $.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
            }
        });

    $.fn.animatescroll = function (options) {

        // fetches options
        var opts = $.extend({}, $.fn.animatescroll.defaults, options);

        // make sure the callback is a function
        if (typeof opts.onScrollStart == 'function') {
            // brings the scope to the callback
            opts.onScrollStart.call(this);
        }

        if (opts.element == "html,body") {
            // Get the distance of particular id or class from top
            var offset = this.offset().top;

            // Scroll the page to the desired position
            $(opts.element).stop().animate({ scrollTop: offset - opts.padding }, opts.scrollSpeed, opts.easing);
        }
        else {
            // Scroll the element to the desired position
            $(opts.element).stop().animate({ scrollTop: this.offset().top - this.parent().offset().top + this.parent().scrollTop() - opts.padding }, opts.scrollSpeed, opts.easing);
        }

        setTimeout(function () {

            // make sure the callback is a function
            if (typeof opts.onScrollEnd == 'function') {
                // brings the scope to the callback
                opts.onScrollEnd.call(this);
            }
        }, opts.scrollSpeed);
    };

    // default options
    $.fn.animatescroll.defaults = {
        easing: "swing",
        scrollSpeed: 800,
        padding: 0,
        element: "html,body"
    };

}(jQuery));
/*!
 * fancyBox - jQuery Plugin
 * version: 2.1.7 (Tue, 28 Feb 2017)
 * requires jQuery v1.6 or later
 *
 * Examples at http://fancyapps.com/fancybox/
 * License: www.fancyapps.com/fancybox/#license
 *
 * Copyright 2017 fancyapps.com
 *
 */

; (function (window, document, $, undefined) {
    "use strict";

    var H = $("html"),
        W = $(window),
        D = $(document),
        F = $.fancybox = function () {
            F.open.apply(this, arguments);
        },
        IE = navigator.userAgent.match(/msie/i),
        didUpdate = null,
        isTouch = document.createTouch !== undefined,

        isQuery = function (obj) {
            return obj && obj.hasOwnProperty && obj instanceof $;
        },
        isString = function (str) {
            return str && $.type(str) === "string";
        },
        isPercentage = function (str) {
            return isString(str) && str.indexOf('%') > 0;
        },
        isScrollable = function (el) {
            return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
        },
        getScalar = function (orig, dim) {
            var value = parseInt(orig, 10) || 0;

            if (dim && isPercentage(orig)) {
                value = F.getViewport()[dim] / 100 * value;
            }

            return Math.ceil(value);
        },
        getValue = function (value, dim) {
            return getScalar(value, dim) + 'px';
        };

    $.extend(F, {
        // The current version of fancyBox
        version: '2.1.7',

        defaults: {
            padding: 15,
            margin: 20,

            width: 800,
            height: 600,
            minWidth: 100,
            minHeight: 100,
            maxWidth: 9999,
            maxHeight: 9999,
            pixelRatio: 1, // Set to 2 for retina display support

            autoSize: true,
            autoHeight: false,
            autoWidth: false,

            autoResize: true,
            autoCenter: !isTouch,
            fitToView: true,
            aspectRatio: false,
            topRatio: 0.5,
            leftRatio: 0.5,

            scrolling: 'auto', // 'auto', 'yes' or 'no'
            wrapCSS: '',

            arrows: true,
            closeBtn: true,
            closeClick: false,
            nextClick: false,
            mouseWheel: true,
            autoPlay: false,
            playSpeed: 3000,
            preload: 3,
            modal: false,
            loop: true,

            ajax: {
                dataType: 'html',
                headers: { 'X-fancyBox': true }
            },
            iframe: {
                scrolling: 'auto',
                preload: true
            },
            swf: {
                wmode: 'transparent',
                allowfullscreen: 'true',
                allowscriptaccess: 'always'
            },

            keys: {
                next: {
                    13: 'left', // enter
                    34: 'up',   // page down
                    39: 'left', // right arrow
                    40: 'up'    // down arrow
                },
                prev: {
                    8: 'right',  // backspace
                    33: 'down',   // page up
                    37: 'right',  // left arrow
                    38: 'down'    // up arrow
                },
                close: [27], // escape key
                play: [32], // space - start/stop slideshow
                toggle: [70]  // letter "f" - toggle fullscreen
            },

            direction: {
                next: 'left',
                prev: 'right'
            },

            scrollOutside: true,

            // Override some properties
            index: 0,
            type: null,
            href: null,
            content: null,
            title: null,

            // HTML templates
            tpl: {
                wrap: '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
                image: '<img class="fancybox-image" src="{href}" alt="" />',
                iframe: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
                error: '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
                closeBtn: '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
                next: '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
                prev: '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',
                loading: '<div id="fancybox-loading"><div></div></div>'
            },

            // Properties for each animation type
            // Opening fancyBox
            openEffect: 'fade', // 'elastic', 'fade' or 'none'
            openSpeed: 250,
            openEasing: 'swing',
            openOpacity: true,
            openMethod: 'zoomIn',

            // Closing fancyBox
            closeEffect: 'fade', // 'elastic', 'fade' or 'none'
            closeSpeed: 250,
            closeEasing: 'swing',
            closeOpacity: true,
            closeMethod: 'zoomOut',

            // Changing next gallery item
            nextEffect: 'elastic', // 'elastic', 'fade' or 'none'
            nextSpeed: 250,
            nextEasing: 'swing',
            nextMethod: 'changeIn',

            // Changing previous gallery item
            prevEffect: 'elastic', // 'elastic', 'fade' or 'none'
            prevSpeed: 250,
            prevEasing: 'swing',
            prevMethod: 'changeOut',

            // Enable default helpers
            helpers: {
                overlay: true,
                title: true
            },

            // Callbacks
            onCancel: $.noop, // If canceling
            beforeLoad: $.noop, // Before loading
            afterLoad: $.noop, // After loading
            beforeShow: $.noop, // Before changing in current item
            afterShow: $.noop, // After opening
            beforeChange: $.noop, // Before changing gallery item
            beforeClose: $.noop, // Before closing
            afterClose: $.noop  // After closing
        },

        //Current state
        group: {}, // Selected group
        opts: {}, // Group options
        previous: null,  // Previous element
        coming: null,  // Element being loaded
        current: null,  // Currently loaded element
        isActive: false, // Is activated
        isOpen: false, // Is currently open
        isOpened: false, // Have been fully opened at least once

        wrap: null,
        skin: null,
        outer: null,
        inner: null,

        player: {
            timer: null,
            isActive: false
        },

        // Loaders
        ajaxLoad: null,
        imgPreload: null,

        // Some collections
        transitions: {},
        helpers: {},

        /*
         *	Static methods
         */

        open: function (group, opts) {
            if (!group) {
                return;
            }

            if (!$.isPlainObject(opts)) {
                opts = {};
            }

            // Close if already active
            if (false === F.close(true)) {
                return;
            }

            // Normalize group
            if (!$.isArray(group)) {
                group = isQuery(group) ? $(group).get() : [group];
            }

            // Recheck if the type of each element is `object` and set content type (image, ajax, etc)
            $.each(group, function (i, element) {
                var obj = {},
                    href,
                    title,
                    content,
                    type,
                    rez,
                    hrefParts,
                    selector;

                if ($.type(element) === "object") {
                    // Check if is DOM element
                    if (element.nodeType) {
                        element = $(element);
                    }

                    if (isQuery(element)) {
                        obj = {
                            href: element.data('fancybox-href') || element.attr('href'),
                            title: $('<div/>').text(element.data('fancybox-title') || element.attr('title') || '').html(),
                            isDom: true,
                            element: element
                        };

                        if ($.metadata) {
                            $.extend(true, obj, element.metadata());
                        }

                    } else {
                        obj = element;
                    }
                }

                href = opts.href || obj.href || (isString(element) ? element : null);
                title = opts.title !== undefined ? opts.title : obj.title || '';

                content = opts.content || obj.content;
                type = content ? 'html' : (opts.type || obj.type);

                if (!type && obj.isDom) {
                    type = element.data('fancybox-type');

                    if (!type) {
                        rez = element.prop('class').match(/fancybox\.(\w+)/);
                        type = rez ? rez[1] : null;
                    }
                }

                if (isString(href)) {
                    // Try to guess the content type
                    if (!type) {
                        if (F.isImage(href)) {
                            type = 'image';

                        } else if (F.isSWF(href)) {
                            type = 'swf';

                        } else if (href.charAt(0) === '#') {
                            type = 'inline';

                        } else if (isString(element)) {
                            type = 'html';
                            content = element;
                        }
                    }

                    // Split url into two pieces with source url and content selector, e.g,
                    // "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
                    if (type === 'ajax') {
                        hrefParts = href.split(/\s+/, 2);
                        href = hrefParts.shift();
                        selector = hrefParts.shift();
                    }
                }

                if (!content) {
                    if (type === 'inline') {
                        if (href) {
                            content = $(isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href); //strip for ie7

                        } else if (obj.isDom) {
                            content = element;
                        }

                    } else if (type === 'html') {
                        content = href;

                    } else if (!type && !href && obj.isDom) {
                        type = 'inline';
                        content = element;
                    }
                }

                $.extend(obj, {
                    href: href,
                    type: type,
                    content: content,
                    title: title,
                    selector: selector
                });

                group[i] = obj;
            });

            // Extend the defaults
            F.opts = $.extend(true, {}, F.defaults, opts);

            // All options are merged recursive except keys
            if (opts.keys !== undefined) {
                F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
            }

            F.group = group;

            return F._start(F.opts.index);
        },

        // Cancel image loading or abort ajax request
        cancel: function () {
            var coming = F.coming;

            if (coming && false === F.trigger('onCancel')) {
                return;
            }

            F.hideLoading();

            if (!coming) {
                return;
            }

            if (F.ajaxLoad) {
                F.ajaxLoad.abort();
            }

            F.ajaxLoad = null;

            if (F.imgPreload) {
                F.imgPreload.onload = F.imgPreload.onerror = null;
            }

            if (coming.wrap) {
                coming.wrap.stop(true, true).trigger('onReset').remove();
            }

            F.coming = null;

            // If the first item has been canceled, then clear everything
            if (!F.current) {
                F._afterZoomOut(coming);
            }
        },

        // Start closing animation if is open; remove immediately if opening/closing
        close: function (event) {
            F.cancel();

            if (false === F.trigger('beforeClose')) {
                return;
            }

            F.unbindEvents();

            if (!F.isActive) {
                return;
            }

            if (!F.isOpen || event === true) {
                $('.fancybox-wrap').stop(true).trigger('onReset').remove();

                F._afterZoomOut();

            } else {
                F.isOpen = F.isOpened = false;
                F.isClosing = true;

                $('.fancybox-item, .fancybox-nav').remove();

                F.wrap.stop(true, true).removeClass('fancybox-opened');

                F.transitions[F.current.closeMethod]();
            }
        },

        // Manage slideshow:
        //   $.fancybox.play(); - toggle slideshow
        //   $.fancybox.play( true ); - start
        //   $.fancybox.play( false ); - stop
        play: function (action) {
            var clear = function () {
                clearTimeout(F.player.timer);
            },
                set = function () {
                    clear();

                    if (F.current && F.player.isActive) {
                        F.player.timer = setTimeout(F.next, F.current.playSpeed);
                    }
                },
                stop = function () {
                    clear();

                    D.unbind('.player');

                    F.player.isActive = false;

                    F.trigger('onPlayEnd');
                },
                start = function () {
                    if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
                        F.player.isActive = true;

                        D.bind({
                            'onCancel.player beforeClose.player': stop,
                            'onUpdate.player': set,
                            'beforeLoad.player': clear
                        });

                        set();

                        F.trigger('onPlayStart');
                    }
                };

            if (action === true || (!F.player.isActive && action !== false)) {
                start();
            } else {
                stop();
            }
        },

        // Navigate to next gallery item
        next: function (direction) {
            var current = F.current;

            if (current) {
                if (!isString(direction)) {
                    direction = current.direction.next;
                }

                F.jumpto(current.index + 1, direction, 'next');
            }
        },

        // Navigate to previous gallery item
        prev: function (direction) {
            var current = F.current;

            if (current) {
                if (!isString(direction)) {
                    direction = current.direction.prev;
                }

                F.jumpto(current.index - 1, direction, 'prev');
            }
        },

        // Navigate to gallery item by index
        jumpto: function (index, direction, router) {
            var current = F.current;

            if (!current) {
                return;
            }

            index = getScalar(index);

            F.direction = direction || current.direction[(index >= current.index ? 'next' : 'prev')];
            F.router = router || 'jumpto';

            if (current.loop) {
                if (index < 0) {
                    index = current.group.length + (index % current.group.length);
                }

                index = index % current.group.length;
            }

            if (current.group[index] !== undefined) {
                F.cancel();

                F._start(index);
            }
        },

        // Center inside viewport and toggle position type to fixed or absolute if needed
        reposition: function (e, onlyAbsolute) {
            var current = F.current,
                wrap = current ? current.wrap : null,
                pos;

            if (wrap) {
                pos = F._getPosition(onlyAbsolute);

                if (e && e.type === 'scroll') {
                    delete pos.position;

                    wrap.stop(true, true).animate(pos, 200);

                } else {
                    wrap.css(pos);

                    current.pos = $.extend({}, current.dim, pos);
                }
            }
        },

        update: function (e) {
            var type = (e && e.originalEvent && e.originalEvent.type),
                anyway = !type || type === 'orientationchange';

            if (anyway) {
                clearTimeout(didUpdate);

                didUpdate = null;
            }

            if (!F.isOpen || didUpdate) {
                return;
            }

            didUpdate = setTimeout(function () {
                var current = F.current;

                if (!current || F.isClosing) {
                    return;
                }

                F.wrap.removeClass('fancybox-tmp');

                if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
                    F._setDimension();
                }

                if (!(type === 'scroll' && current.canShrink)) {
                    F.reposition(e);
                }

                F.trigger('onUpdate');

                didUpdate = null;

            }, (anyway && !isTouch ? 0 : 300));
        },

        // Shrink content to fit inside viewport or restore if resized
        toggle: function (action) {
            if (F.isOpen) {
                F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;

                // Help browser to restore document dimensions
                if (isTouch) {
                    F.wrap.removeAttr('style').addClass('fancybox-tmp');

                    F.trigger('onUpdate');
                }

                F.update();
            }
        },

        hideLoading: function () {
            D.unbind('.loading');

            $('#fancybox-loading').remove();
        },

        showLoading: function () {
            var el, viewport;

            F.hideLoading();

            el = $(F.opts.tpl.loading).click(F.cancel).appendTo('body');

            // If user will press the escape-button, the request will be canceled
            D.bind('keydown.loading', function (e) {
                if ((e.which || e.keyCode) === 27) {
                    e.preventDefault();

                    F.cancel();
                }
            });

            if (!F.defaults.fixed) {
                viewport = F.getViewport();

                el.css({
                    position: 'absolute',
                    top: (viewport.h * 0.5) + viewport.y,
                    left: (viewport.w * 0.5) + viewport.x
                });
            }

            F.trigger('onLoading');
        },

        getViewport: function () {
            var locked = (F.current && F.current.locked) || false,
                rez = {
                    x: W.scrollLeft(),
                    y: W.scrollTop()
                };

            if (locked && locked.length) {
                rez.w = locked[0].clientWidth;
                rez.h = locked[0].clientHeight;

            } else {
                // See http://bugs.jquery.com/ticket/6724
                rez.w = isTouch && window.innerWidth ? window.innerWidth : W.width();
                rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
            }

            return rez;
        },

        // Unbind the keyboard / clicking actions
        unbindEvents: function () {
            if (F.wrap && isQuery(F.wrap)) {
                F.wrap.unbind('.fb');
            }

            D.unbind('.fb');
            W.unbind('.fb');
        },

        bindEvents: function () {
            var current = F.current,
                keys;

            if (!current) {
                return;
            }

            // Changing document height on iOS devices triggers a 'resize' event,
            // that can change document height... repeating infinitely
            W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);

            keys = current.keys;

            if (keys) {
                D.bind('keydown.fb', function (e) {
                    var code = e.which || e.keyCode,
                        target = e.target || e.srcElement;

                    // Skip esc key if loading, because showLoading will cancel preloading
                    if (code === 27 && F.coming) {
                        return false;
                    }

                    // Ignore key combinations and key events within form elements
                    if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
                        $.each(keys, function (i, val) {
                            if (current.group.length > 1 && val[code] !== undefined) {
                                F[i](val[code]);

                                e.preventDefault();
                                return false;
                            }

                            if ($.inArray(code, val) > -1) {
                                F[i]();

                                e.preventDefault();
                                return false;
                            }
                        });
                    }
                });
            }

            if ($.fn.mousewheel && current.mouseWheel) {
                F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
                    var target = e.target || null,
                        parent = $(target),
                        canScroll = false;

                    while (parent.length) {
                        if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
                            break;
                        }

                        canScroll = isScrollable(parent[0]);
                        parent = $(parent).parent();
                    }

                    if (delta !== 0 && !canScroll) {
                        if (F.group.length > 1 && !current.canShrink) {
                            if (deltaY > 0 || deltaX > 0) {
                                F.prev(deltaY > 0 ? 'down' : 'left');

                            } else if (deltaY < 0 || deltaX < 0) {
                                F.next(deltaY < 0 ? 'up' : 'right');
                            }

                            e.preventDefault();
                        }
                    }
                });
            }
        },

        trigger: function (event, o) {
            var ret, obj = o || F.coming || F.current;

            if (obj) {
                if ($.isFunction(obj[event])) {
                    ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
                }

                if (ret === false) {
                    return false;
                }

                if (obj.helpers) {
                    $.each(obj.helpers, function (helper, opts) {
                        if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
                            F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
                        }
                    });
                }
            }

            D.trigger(event);
        },

        isImage: function (str) {
            return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
        },

        isSWF: function (str) {
            return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
        },

        _start: function (index) {
            var coming = {},
                obj,
                href,
                type,
                margin,
                padding;

            index = getScalar(index);
            obj = F.group[index] || null;

            if (!obj) {
                return false;
            }

            coming = $.extend(true, {}, F.opts, obj);

            // Convert margin and padding properties to array - top, right, bottom, left
            margin = coming.margin;
            padding = coming.padding;

            if ($.type(margin) === 'number') {
                coming.margin = [margin, margin, margin, margin];
            }

            if ($.type(padding) === 'number') {
                coming.padding = [padding, padding, padding, padding];
            }

            // 'modal' propery is just a shortcut
            if (coming.modal) {
                $.extend(true, coming, {
                    closeBtn: false,
                    closeClick: false,
                    nextClick: false,
                    arrows: false,
                    mouseWheel: false,
                    keys: null,
                    helpers: {
                        overlay: {
                            closeClick: false
                        }
                    }
                });
            }

            // 'autoSize' property is a shortcut, too
            if (coming.autoSize) {
                coming.autoWidth = coming.autoHeight = true;
            }

            if (coming.width === 'auto') {
                coming.autoWidth = true;
            }

            if (coming.height === 'auto') {
                coming.autoHeight = true;
            }

            /*
             * Add reference to the group, so it`s possible to access from callbacks, example:
             * afterLoad : function() {
             *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
             * }
             */

            coming.group = F.group;
            coming.index = index;

            // Give a chance for callback or helpers to update coming item (type, title, etc)
            F.coming = coming;

            if (false === F.trigger('beforeLoad')) {
                F.coming = null;

                return;
            }

            type = coming.type;
            href = coming.href;

            if (!type) {
                F.coming = null;

                //If we can not determine content type then drop silently or display next/prev item if looping through gallery
                if (F.current && F.router && F.router !== 'jumpto') {
                    F.current.index = index;

                    return F[F.router](F.direction);
                }

                return false;
            }

            F.isActive = true;

            if (type === 'image' || type === 'swf') {
                coming.autoHeight = coming.autoWidth = false;
                coming.scrolling = 'visible';
            }

            if (type === 'image') {
                coming.aspectRatio = true;
            }

            if (type === 'iframe' && isTouch) {
                coming.scrolling = 'scroll';
            }

            // Build the neccessary markup
            coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo(coming.parent || 'body');

            $.extend(coming, {
                skin: $('.fancybox-skin', coming.wrap),
                outer: $('.fancybox-outer', coming.wrap),
                inner: $('.fancybox-inner', coming.wrap)
            });

            $.each(["Top", "Right", "Bottom", "Left"], function (i, v) {
                coming.skin.css('padding' + v, getValue(coming.padding[i]));
            });

            F.trigger('onReady');

            // Check before try to load; 'inline' and 'html' types need content, others - href
            if (type === 'inline' || type === 'html') {
                if (!coming.content || !coming.content.length) {
                    return F._error('content');
                }

            } else if (!href) {
                return F._error('href');
            }

            if (type === 'image') {
                F._loadImage();

            } else if (type === 'ajax') {
                F._loadAjax();

            } else if (type === 'iframe') {
                F._loadIframe();

            } else {
                F._afterLoad();
            }
        },

        _error: function (type) {
            $.extend(F.coming, {
                type: 'html',
                autoWidth: true,
                autoHeight: true,
                minWidth: 0,
                minHeight: 0,
                scrolling: 'no',
                hasError: type,
                content: F.coming.tpl.error
            });

            F._afterLoad();
        },

        _loadImage: function () {
            // Reset preload image so it is later possible to check "complete" property
            var img = F.imgPreload = new Image();

            img.onload = function () {
                this.onload = this.onerror = null;

                F.coming.width = this.width / F.opts.pixelRatio;
                F.coming.height = this.height / F.opts.pixelRatio;

                F._afterLoad();
            };

            img.onerror = function () {
                this.onload = this.onerror = null;

                F._error('image');
            };

            img.src = F.coming.href;

            if (img.complete !== true) {
                F.showLoading();
            }
        },

        _loadAjax: function () {
            var coming = F.coming;

            F.showLoading();

            F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
                url: coming.href,
                error: function (jqXHR, textStatus) {
                    if (F.coming && textStatus !== 'abort') {
                        F._error('ajax', jqXHR);

                    } else {
                        F.hideLoading();
                    }
                },
                success: function (data, textStatus) {
                    if (textStatus === 'success') {
                        coming.content = data;

                        F._afterLoad();
                    }
                }
            }));
        },

        _loadIframe: function () {
            var coming = F.coming,
                iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
                    .attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
                    .attr('src', coming.href);

            // This helps IE
            $(coming.wrap).bind('onReset', function () {
                try {
                    $(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
                } catch (e) { }
            });

            if (coming.iframe.preload) {
                F.showLoading();

                iframe.one('load', function () {
                    $(this).data('ready', 1);

                    // iOS will lose scrolling if we resize
                    if (!isTouch) {
                        $(this).bind('load.fb', F.update);
                    }

                    // Without this trick:
                    //   - iframe won't scroll on iOS devices
                    //   - IE7 sometimes displays empty iframe
                    $(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();

                    F._afterLoad();
                });
            }

            coming.content = iframe.appendTo(coming.inner);

            if (!coming.iframe.preload) {
                F._afterLoad();
            }
        },

        _preloadImages: function () {
            var group = F.group,
                current = F.current,
                len = group.length,
                cnt = current.preload ? Math.min(current.preload, len - 1) : 0,
                item,
                i;

            for (i = 1; i <= cnt; i += 1) {
                item = group[(current.index + i) % len];

                if (item.type === 'image' && item.href) {
                    new Image().src = item.href;
                }
            }
        },

        _afterLoad: function () {
            var coming = F.coming,
                previous = F.current,
                placeholder = 'fancybox-placeholder',
                current,
                content,
                type,
                scrolling,
                href,
                embed;

            F.hideLoading();

            if (!coming || F.isActive === false) {
                return;
            }

            if (false === F.trigger('afterLoad', coming, previous)) {
                coming.wrap.stop(true).trigger('onReset').remove();

                F.coming = null;

                return;
            }

            if (previous) {
                F.trigger('beforeChange', previous);

                previous.wrap.stop(true).removeClass('fancybox-opened')
                    .find('.fancybox-item, .fancybox-nav')
                    .remove();
            }

            F.unbindEvents();

            current = coming;
            content = coming.content;
            type = coming.type;
            scrolling = coming.scrolling;

            $.extend(F, {
                wrap: current.wrap,
                skin: current.skin,
                outer: current.outer,
                inner: current.inner,
                current: current,
                previous: previous
            });

            href = current.href;

            switch (type) {
                case 'inline':
                case 'ajax':
                case 'html':
                    if (current.selector) {
                        content = $('<div>').html(content).find(current.selector);

                    } else if (isQuery(content)) {
                        if (!content.data(placeholder)) {
                            content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter(content).hide());
                        }

                        content = content.show().detach();

                        current.wrap.bind('onReset', function () {
                            if ($(this).find(content).length) {
                                content.hide().replaceAll(content.data(placeholder)).data(placeholder, false);
                            }
                        });
                    }
                    break;

                case 'image':
                    content = current.tpl.image.replace(/\{href\}/g, href);
                    break;

                case 'swf':
                    content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
                    embed = '';

                    $.each(current.swf, function (name, val) {
                        content += '<param name="' + name + '" value="' + val + '"></param>';
                        embed += ' ' + name + '="' + val + '"';
                    });

                    content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
                    break;
            }

            if (!(isQuery(content) && content.parent().is(current.inner))) {
                current.inner.append(content);
            }

            // Give a chance for helpers or callbacks to update elements
            F.trigger('beforeShow');

            // Set scrolling before calculating dimensions
            current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));

            // Set initial dimensions and start position
            F._setDimension();

            F.reposition();

            F.isOpen = false;
            F.coming = null;

            F.bindEvents();

            if (!F.isOpened) {
                $('.fancybox-wrap').not(current.wrap).stop(true).trigger('onReset').remove();

            } else if (previous.prevMethod) {
                F.transitions[previous.prevMethod]();
            }

            F.transitions[F.isOpened ? current.nextMethod : current.openMethod]();

            F._preloadImages();
        },

        _setDimension: function () {
            var viewport = F.getViewport(),
                steps = 0,
                canShrink = false,
                canExpand = false,
                wrap = F.wrap,
                skin = F.skin,
                inner = F.inner,
                current = F.current,
                width = current.width,
                height = current.height,
                minWidth = current.minWidth,
                minHeight = current.minHeight,
                maxWidth = current.maxWidth,
                maxHeight = current.maxHeight,
                scrolling = current.scrolling,
                scrollOut = current.scrollOutside ? current.scrollbarWidth : 0,
                margin = current.margin,
                wMargin = getScalar(margin[1] + margin[3]),
                hMargin = getScalar(margin[0] + margin[2]),
                wPadding,
                hPadding,
                wSpace,
                hSpace,
                origWidth,
                origHeight,
                origMaxWidth,
                origMaxHeight,
                ratio,
                width_,
                height_,
                maxWidth_,
                maxHeight_,
                iframe,
                body;

            // Reset dimensions so we could re-check actual size
            wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');

            wPadding = getScalar(skin.outerWidth(true) - skin.width());
            hPadding = getScalar(skin.outerHeight(true) - skin.height());

            // Any space between content and viewport (margin, padding, border, title)
            wSpace = wMargin + wPadding;
            hSpace = hMargin + hPadding;

            origWidth = isPercentage(width) ? (viewport.w - wSpace) * getScalar(width) / 100 : width;
            origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;

            if (current.type === 'iframe') {
                iframe = current.content;

                if (current.autoHeight && iframe && iframe.data('ready') === 1) {
                    try {
                        if (iframe[0].contentWindow.document.location) {
                            inner.width(origWidth).height(9999);

                            body = iframe.contents().find('body');

                            if (scrollOut) {
                                body.css('overflow-x', 'hidden');
                            }

                            origHeight = body.outerHeight(true);
                        }

                    } catch (e) { }
                }

            } else if (current.autoWidth || current.autoHeight) {
                inner.addClass('fancybox-tmp');

                // Set width or height in case we need to calculate only one dimension
                if (!current.autoWidth) {
                    inner.width(origWidth);
                }

                if (!current.autoHeight) {
                    inner.height(origHeight);
                }

                if (current.autoWidth) {
                    origWidth = inner.width();
                }

                if (current.autoHeight) {
                    origHeight = inner.height();
                }

                inner.removeClass('fancybox-tmp');
            }

            width = getScalar(origWidth);
            height = getScalar(origHeight);

            ratio = origWidth / origHeight;

            // Calculations for the content
            minWidth = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
            maxWidth = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);

            minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
            maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);

            // These will be used to determine if wrap can fit in the viewport
            origMaxWidth = maxWidth;
            origMaxHeight = maxHeight;

            if (current.fitToView) {
                maxWidth = Math.min(viewport.w - wSpace, maxWidth);
                maxHeight = Math.min(viewport.h - hSpace, maxHeight);
            }

            maxWidth_ = viewport.w - wMargin;
            maxHeight_ = viewport.h - hMargin;

            if (current.aspectRatio) {
                if (width > maxWidth) {
                    width = maxWidth;
                    height = getScalar(width / ratio);
                }

                if (height > maxHeight) {
                    height = maxHeight;
                    width = getScalar(height * ratio);
                }

                if (width < minWidth) {
                    width = minWidth;
                    height = getScalar(width / ratio);
                }

                if (height < minHeight) {
                    height = minHeight;
                    width = getScalar(height * ratio);
                }

            } else {
                width = Math.max(minWidth, Math.min(width, maxWidth));

                if (current.autoHeight && current.type !== 'iframe') {
                    inner.width(width);

                    height = inner.height();
                }

                height = Math.max(minHeight, Math.min(height, maxHeight));
            }

            // Try to fit inside viewport (including the title)
            if (current.fitToView) {
                inner.width(width).height(height);

                wrap.width(width + wPadding);

                // Real wrap dimensions
                width_ = wrap.width();
                height_ = wrap.height();

                if (current.aspectRatio) {
                    while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
                        if (steps++ > 19) {
                            break;
                        }

                        height = Math.max(minHeight, Math.min(maxHeight, height - 10));
                        width = getScalar(height * ratio);

                        if (width < minWidth) {
                            width = minWidth;
                            height = getScalar(width / ratio);
                        }

                        if (width > maxWidth) {
                            width = maxWidth;
                            height = getScalar(width / ratio);
                        }

                        inner.width(width).height(height);

                        wrap.width(width + wPadding);

                        width_ = wrap.width();
                        height_ = wrap.height();
                    }

                } else {
                    width = Math.max(minWidth, Math.min(width, width - (width_ - maxWidth_)));
                    height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
                }
            }

            if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
                width += scrollOut;
            }

            inner.width(width).height(height);

            wrap.width(width + wPadding);

            width_ = wrap.width();
            height_ = wrap.height();

            canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
            canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));

            $.extend(current, {
                dim: {
                    width: getValue(width_),
                    height: getValue(height_)
                },
                origWidth: origWidth,
                origHeight: origHeight,
                canShrink: canShrink,
                canExpand: canExpand,
                wPadding: wPadding,
                hPadding: hPadding,
                wrapSpace: height_ - skin.outerHeight(true),
                skinSpace: skin.height() - height
            });

            if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
                inner.height('auto');
            }
        },

        _getPosition: function (onlyAbsolute) {
            var current = F.current,
                viewport = F.getViewport(),
                margin = current.margin,
                width = F.wrap.width() + margin[1] + margin[3],
                height = F.wrap.height() + margin[0] + margin[2],
                rez = {
                    position: 'absolute',
                    top: margin[0],
                    left: margin[3]
                };

            if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
                rez.position = 'fixed';

            } else if (!current.locked) {
                rez.top += viewport.y;
                rez.left += viewport.x;
            }

            rez.top = getValue(Math.max(rez.top, rez.top + ((viewport.h - height) * current.topRatio)));
            rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width) * current.leftRatio)));

            return rez;
        },

        _afterZoomIn: function () {
            var current = F.current;

            if (!current) {
                return;
            }

            F.isOpen = F.isOpened = true;

            F.wrap.css('overflow', 'visible').addClass('fancybox-opened').hide().show(0);

            F.update();

            // Assign a click event
            if (current.closeClick || (current.nextClick && F.group.length > 1)) {
                F.inner.css('cursor', 'pointer').bind('click.fb', function (e) {
                    if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
                        e.preventDefault();

                        F[current.closeClick ? 'close' : 'next']();
                    }
                });
            }

            // Create a close button
            if (current.closeBtn) {
                $(current.tpl.closeBtn).appendTo(F.skin).bind('click.fb', function (e) {
                    e.preventDefault();

                    F.close();
                });
            }

            // Create navigation arrows
            if (current.arrows && F.group.length > 1) {
                if (current.loop || current.index > 0) {
                    $(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
                }

                if (current.loop || current.index < F.group.length - 1) {
                    $(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
                }
            }

            F.trigger('afterShow');

            // Stop the slideshow if this is the last item
            if (!current.loop && current.index === current.group.length - 1) {

                F.play(false);

            } else if (F.opts.autoPlay && !F.player.isActive) {
                F.opts.autoPlay = false;

                F.play(true);
            }
        },

        _afterZoomOut: function (obj) {
            obj = obj || F.current;

            $('.fancybox-wrap').trigger('onReset').remove();

            $.extend(F, {
                group: {},
                opts: {},
                router: false,
                current: null,
                isActive: false,
                isOpened: false,
                isOpen: false,
                isClosing: false,
                wrap: null,
                skin: null,
                outer: null,
                inner: null
            });

            F.trigger('afterClose', obj);
        }
    });

    /*
     *	Default transitions
     */

    F.transitions = {
        getOrigPosition: function () {
            var current = F.current,
                element = current.element,
                orig = current.orig,
                pos = {},
                width = 50,
                height = 50,
                hPadding = current.hPadding,
                wPadding = current.wPadding,
                viewport = F.getViewport();

            if (!orig && current.isDom && element.is(':visible')) {
                orig = element.find('img:first');

                if (!orig.length) {
                    orig = element;
                }
            }

            if (isQuery(orig)) {
                pos = orig.offset();

                if (orig.is('img')) {
                    width = orig.outerWidth();
                    height = orig.outerHeight();
                }

            } else {
                pos.top = viewport.y + (viewport.h - height) * current.topRatio;
                pos.left = viewport.x + (viewport.w - width) * current.leftRatio;
            }

            if (F.wrap.css('position') === 'fixed' || current.locked) {
                pos.top -= viewport.y;
                pos.left -= viewport.x;
            }

            pos = {
                top: getValue(pos.top - hPadding * current.topRatio),
                left: getValue(pos.left - wPadding * current.leftRatio),
                width: getValue(width + wPadding),
                height: getValue(height + hPadding)
            };

            return pos;
        },

        step: function (now, fx) {
            var ratio,
                padding,
                value,
                prop = fx.prop,
                current = F.current,
                wrapSpace = current.wrapSpace,
                skinSpace = current.skinSpace;

            if (prop === 'width' || prop === 'height') {
                ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);

                if (F.isClosing) {
                    ratio = 1 - ratio;
                }

                padding = prop === 'width' ? current.wPadding : current.hPadding;
                value = now - padding;

                F.skin[prop](getScalar(prop === 'width' ? value : value - (wrapSpace * ratio)));
                F.inner[prop](getScalar(prop === 'width' ? value : value - (wrapSpace * ratio) - (skinSpace * ratio)));
            }
        },

        zoomIn: function () {
            var current = F.current,
                startPos = current.pos,
                effect = current.openEffect,
                elastic = effect === 'elastic',
                endPos = $.extend({ opacity: 1 }, startPos);

            // Remove "position" property that breaks older IE
            delete endPos.position;

            if (elastic) {
                startPos = this.getOrigPosition();

                if (current.openOpacity) {
                    startPos.opacity = 0.1;
                }

            } else if (effect === 'fade') {
                startPos.opacity = 0.1;
            }

            F.wrap.css(startPos).animate(endPos, {
                duration: effect === 'none' ? 0 : current.openSpeed,
                easing: current.openEasing,
                step: elastic ? this.step : null,
                complete: F._afterZoomIn
            });
        },

        zoomOut: function () {
            var current = F.current,
                effect = current.closeEffect,
                elastic = effect === 'elastic',
                endPos = { opacity: 0.1 };

            if (elastic) {
                endPos = this.getOrigPosition();

                if (current.closeOpacity) {
                    endPos.opacity = 0.1;
                }
            }

            F.wrap.animate(endPos, {
                duration: effect === 'none' ? 0 : current.closeSpeed,
                easing: current.closeEasing,
                step: elastic ? this.step : null,
                complete: F._afterZoomOut
            });
        },

        changeIn: function () {
            var current = F.current,
                effect = current.nextEffect,
                startPos = current.pos,
                endPos = { opacity: 1 },
                direction = F.direction,
                distance = 200,
                field;

            startPos.opacity = 0.1;

            if (effect === 'elastic') {
                field = direction === 'down' || direction === 'up' ? 'top' : 'left';

                if (direction === 'down' || direction === 'right') {
                    startPos[field] = getValue(getScalar(startPos[field]) - distance);
                    endPos[field] = '+=' + distance + 'px';

                } else {
                    startPos[field] = getValue(getScalar(startPos[field]) + distance);
                    endPos[field] = '-=' + distance + 'px';
                }
            }

            // Workaround for http://bugs.jquery.com/ticket/12273
            if (effect === 'none') {
                F._afterZoomIn();

            } else {
                F.wrap.css(startPos).animate(endPos, {
                    duration: current.nextSpeed,
                    easing: current.nextEasing,
                    complete: F._afterZoomIn
                });
            }
        },

        changeOut: function () {
            var previous = F.previous,
                effect = previous.prevEffect,
                endPos = { opacity: 0.1 },
                direction = F.direction,
                distance = 200;

            if (effect === 'elastic') {
                endPos[direction === 'down' || direction === 'up' ? 'top' : 'left'] = (direction === 'up' || direction === 'left' ? '-' : '+') + '=' + distance + 'px';
            }

            previous.wrap.animate(endPos, {
                duration: effect === 'none' ? 0 : previous.prevSpeed,
                easing: previous.prevEasing,
                complete: function () {
                    $(this).trigger('onReset').remove();
                }
            });
        }
    };

    /*
     *	Overlay helper
     */

    F.helpers.overlay = {
        defaults: {
            closeClick: true,      // if true, fancyBox will be closed when user clicks on the overlay
            speedOut: 200,       // duration of fadeOut animation
            showEarly: true,      // indicates if should be opened immediately or wait until the content is ready
            css: {},        // custom CSS properties
            locked: !isTouch,  // if true, the content will be locked into overlay
            fixed: true       // if false, the overlay CSS position property will not be set to "fixed"
        },

        overlay: null,      // current handle
        fixed: false,     // indicates if the overlay has position "fixed"
        el: $('html'), // element that contains "the lock"

        // Public methods
        create: function (opts) {
            var parent;

            opts = $.extend({}, this.defaults, opts);

            if (this.overlay) {
                this.close();
            }

            parent = F.coming ? F.coming.parent : opts.parent;

            this.overlay = $('<div class="fancybox-overlay"></div>').appendTo(parent && parent.length ? parent : 'body');
            this.fixed = false;

            if (opts.fixed && F.defaults.fixed) {
                this.overlay.addClass('fancybox-overlay-fixed');

                this.fixed = true;
            }
        },

        open: function (opts) {
            var that = this;

            opts = $.extend({}, this.defaults, opts);

            if (this.overlay) {
                this.overlay.unbind('.overlay').width('auto').height('auto');

            } else {
                this.create(opts);
            }

            if (!this.fixed) {
                W.bind('resize.overlay', $.proxy(this.update, this));

                this.update();
            }

            if (opts.closeClick) {
                this.overlay.bind('click.overlay', function (e) {
                    if ($(e.target).hasClass('fancybox-overlay')) {
                        if (F.isActive) {
                            F.close();
                        } else {
                            that.close();
                        }

                        return false;
                    }
                });
            }

            this.overlay.css(opts.css).show();
        },

        close: function () {
            W.unbind('resize.overlay');

            if (this.el.hasClass('fancybox-lock')) {
                $('.fancybox-margin').removeClass('fancybox-margin');

                this.el.removeClass('fancybox-lock');

                W.scrollTop(this.scrollV).scrollLeft(this.scrollH);
            }

            $('.fancybox-overlay').remove().hide();

            $.extend(this, {
                overlay: null,
                fixed: false
            });
        },

        // Private, callbacks

        update: function () {
            var width = '100%', offsetWidth;

            // Reset width/height so it will not mess
            this.overlay.width(width).height('100%');

            // jQuery does not return reliable result for IE
            if (IE) {
                offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);

                if (D.width() > offsetWidth) {
                    width = D.width();
                }

            } else if (D.width() > W.width()) {
                width = D.width();
            }

            this.overlay.width(width).height(D.height());
        },

        // This is where we can manipulate DOM, because later it would cause iframes to reload
        onReady: function (opts, obj) {
            var overlay = this.overlay;

            $('.fancybox-overlay').stop(true, true);

            if (!overlay) {
                this.create(opts);
            }

            if (opts.locked && this.fixed && obj.fixed) {
                obj.locked = this.overlay.append(obj.wrap);
                obj.fixed = false;
            }

            if (opts.showEarly === true) {
                this.beforeShow.apply(this, arguments);
            }
        },

        beforeShow: function (opts, obj) {
            if (obj.locked && !this.el.hasClass('fancybox-lock')) {
                if (this.fixPosition !== false) {
                    $('*:not(object)').filter(function () {
                        return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-overlay") && !$(this).hasClass("fancybox-wrap"));
                    }).addClass('fancybox-margin');
                }

                this.el.addClass('fancybox-margin');

                this.scrollV = W.scrollTop();
                this.scrollH = W.scrollLeft();

                this.el.addClass('fancybox-lock');

                W.scrollTop(this.scrollV).scrollLeft(this.scrollH);
            }

            this.open(opts);
        },

        onUpdate: function () {
            if (!this.fixed) {
                this.update();
            }
        },

        afterClose: function (opts) {
            // Remove overlay if exists and fancyBox is not opening
            // (e.g., it is not being open using afterClose callback)
            if (this.overlay && !F.coming) {
                this.overlay.fadeOut(opts.speedOut, $.proxy(this.close, this));
            }
        }
    };

    /*
     *	Title helper
     */

    F.helpers.title = {
        defaults: {
            type: 'float', // 'float', 'inside', 'outside' or 'over',
            position: 'bottom' // 'top' or 'bottom'
        },

        beforeShow: function (opts) {
            var current = F.current,
                text = current.title,
                type = opts.type,
                title,
                target;

            if ($.isFunction(text)) {
                text = text.call(current.element, current);
            }

            if (!isString(text) || $.trim(text) === '') {
                return;
            }

            title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');

            switch (type) {
                case 'inside':
                    target = F.skin;
                    break;

                case 'outside':
                    target = F.wrap;
                    break;

                case 'over':
                    target = F.inner;
                    break;

                default: // 'float'
                    target = F.skin;

                    title.appendTo('body');

                    if (IE) {
                        title.width(title.width());
                    }

                    title.wrapInner('<span class="child"></span>');

                    //Increase bottom margin so this title will also fit into viewport
                    F.current.margin[2] += Math.abs(getScalar(title.css('margin-bottom')));
                    break;
            }

            title[(opts.position === 'top' ? 'prependTo' : 'appendTo')](target);
        }
    };

    // jQuery plugin initialization
    $.fn.fancybox = function (options) {
        var index,
            that = $(this),
            selector = this.selector || '',
            run = function (e) {
                var what = $(this).blur(), idx = index, relType, relVal;

                if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
                    relType = options.groupAttr || 'data-fancybox-group';
                    relVal = what.attr(relType);

                    if (!relVal) {
                        relType = 'rel';
                        relVal = what.get(0)[relType];
                    }

                    if (relVal && relVal !== '' && relVal !== 'nofollow') {
                        what = selector.length ? $(selector) : that;
                        what = what.filter('[' + relType + '="' + relVal + '"]');
                        idx = what.index(this);
                    }

                    options.index = idx;

                    // Stop an event from bubbling if everything is fine
                    if (F.open(what, options) !== false) {
                        e.preventDefault();
                    }
                }
            };

        options = options || {};
        index = options.index || 0;

        if (!selector || options.live === false) {
            that.unbind('click.fb-start').bind('click.fb-start', run);

        } else {
            D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
        }

        this.filter('[data-fancybox-start=1]').trigger('click');

        return this;
    };

    // Tests that need a body at doc ready
    D.ready(function () {
        var w1, w2;

        if ($.scrollbarWidth === undefined) {
            // http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
            $.scrollbarWidth = function () {
                var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
                    child = parent.children(),
                    width = child.innerWidth() - child.height(99).innerWidth();

                parent.remove();

                return width;
            };
        }

        if ($.support.fixedPosition === undefined) {
            $.support.fixedPosition = (function () {
                var elem = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
                    fixed = (elem[0].offsetTop === 20 || elem[0].offsetTop === 15);

                elem.remove();

                return fixed;
            }());
        }

        $.extend(F.defaults, {
            scrollbarWidth: $.scrollbarWidth(),
            fixed: $.support.fixedPosition,
            parent: $('body')
        });

        //Get real width of page scroll-bar
        w1 = $(window).width();

        H.addClass('fancybox-lock-test');

        w2 = $(window).width();

        H.removeClass('fancybox-lock-test');

        $("<style type='text/css'>.fancybox-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
    });

}(window, document, jQuery));

+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    $(document).ready(function () {
        if ($('body').hasClass('rtl')) {
            var keys = $.fancybox && $.fancybox.defaults && $.fancybox.defaults.keys || {};
            var prev = keys.prev || [];
            var next = keys.next || [];
            var directions = [prev, next];

            keys.prev = next;
            keys.next = prev;
        }

        +(function () {
            var bpValues = window.redesignConstants && window.redesignConstants.bpValues || [];

            $('.fancybox').fancybox({
                openEffect: 'none',
                afterShow: function () {
                    var body = $('body');

                    if (!body.hasClass('stop-scroll')) {
                        // body.addClass('stop-scroll');
                    }
                },
                beforeClose: function () {
                    var body = $('body');

                    if (body.hasClass('stop-scroll')) {
                        // body.removeClass('stop-scroll');
                    }
                },
                beforeLoad: function () {
                    if (window.redesign && window.redesign.disableScroll) {
                        window.redesign.disableScroll();
                    }
                },
                afterClose: function () {
                    if (window.redesign && window.redesign.enableScroll) {
                        window.redesign.enableScroll();
                    }
                }
            });




            function getClosestValueCeil(value, values) {
                /* Helpers */
                var higherMinValue = null;
                var lowerMaxValue = null;
                var targetValue;

                for (var i = 0; i < values.length; i++) {
                    if (values[i] >= value && (higherMinValue === null || values[i] < higherMinValue)) { higherMinValue = values[i]; }

                    if (values[i] < value && (lowerMaxValue === null || values[i] > lowerMaxValue)) { lowerMaxValue = values[i]; }
                }

                /* Ceil */
                if (higherMinValue !== null) { targetValue = higherMinValue; }
                else { targetValue = lowerMaxValue; }

                return targetValue;
            }

            function vw() {
                var w = window,
                    d = document,
                    e = d.documentElement,
                    g = d.getElementsByTagName('body')[0],
                    x = w.innerWidth || e.clientWidth || g.clientWidth,
                    y = w.innerHeight || e.clientHeight || g.clientHeight;

                return x;
            }

        })();

    });

}();

/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2015
 */

!function (root, name, definition) {
    if (typeof module != 'undefined' && module.exports) module.exports = definition()
    else if (typeof define == 'function' && define.amd) define(name, definition)
    else root[name] = definition()
}(this, 'bowser', function () {
    /**
      * See useragents.js for examples of navigator.userAgent
      */

    var t = true

    function detect(ua) {

        function getFirstMatch(regex) {
            var match = ua.match(regex);
            return (match && match.length > 1 && match[1]) || '';
        }

        function getSecondMatch(regex) {
            var match = ua.match(regex);
            return (match && match.length > 1 && match[2]) || '';
        }

        var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
            , likeAndroid = /like android/i.test(ua)
            , android = !likeAndroid && /android/i.test(ua)
            , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
            , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
            , chromeos = /CrOS/.test(ua)
            , silk = /silk/i.test(ua)
            , sailfish = /sailfish/i.test(ua)
            , tizen = /tizen/i.test(ua)
            , webos = /(web|hpw)os/i.test(ua)
            , windowsphone = /windows phone/i.test(ua)
            , samsungBrowser = /SamsungBrowser/i.test(ua)
            , windows = !windowsphone && /windows/i.test(ua)
            , mac = !iosdevice && !silk && /macintosh/i.test(ua)
            , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
            , edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i)
            , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
            , tablet = /tablet/i.test(ua)
            , mobile = !tablet && /[^-]mobi/i.test(ua)
            , xbox = /xbox/i.test(ua)
            , result

        if (/opera/i.test(ua)) {
            //  an old Opera
            result = {
                name: 'Opera'
                , opera: t
                , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
            }
        } else if (/opr|opios/i.test(ua)) {
            // a new Opera
            result = {
                name: 'Opera'
                , opera: t
                , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
            }
        }
        else if (/SamsungBrowser/i.test(ua)) {
            result = {
                name: 'Samsung Internet for Android'
                , samsungBrowser: t
                , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
            }
        }
        else if (/coast/i.test(ua)) {
            result = {
                name: 'Opera Coast'
                , coast: t
                , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
            }
        }
        else if (/yabrowser/i.test(ua)) {
            result = {
                name: 'Yandex Browser'
                , yandexbrowser: t
                , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
            }
        }
        else if (/ucbrowser/i.test(ua)) {
            result = {
                name: 'UC Browser'
                , ucbrowser: t
                , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
            }
        }
        else if (/mxios/i.test(ua)) {
            result = {
                name: 'Maxthon'
                , maxthon: t
                , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
            }
        }
        else if (/epiphany/i.test(ua)) {
            result = {
                name: 'Epiphany'
                , epiphany: t
                , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
            }
        }
        else if (/puffin/i.test(ua)) {
            result = {
                name: 'Puffin'
                , puffin: t
                , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
            }
        }
        else if (/sleipnir/i.test(ua)) {
            result = {
                name: 'Sleipnir'
                , sleipnir: t
                , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
            }
        }
        else if (/k-meleon/i.test(ua)) {
            result = {
                name: 'K-Meleon'
                , kMeleon: t
                , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
            }
        }
        else if (windowsphone) {
            result = {
                name: 'Windows Phone'
                , windowsphone: t
            }
            if (edgeVersion) {
                result.msedge = t
                result.version = edgeVersion
            }
            else {
                result.msie = t
                result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
            }
        }
        else if (/msie|trident/i.test(ua)) {
            result = {
                name: 'Internet Explorer'
                , msie: t
                , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
            }
        } else if (chromeos) {
            result = {
                name: 'Chrome'
                , chromeos: t
                , chromeBook: t
                , chrome: t
                , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
            }
        } else if (/chrome.+? edge/i.test(ua)) {
            result = {
                name: 'Microsoft Edge'
                , msedge: t
                , version: edgeVersion
            }
        }
        else if (/vivaldi/i.test(ua)) {
            result = {
                name: 'Vivaldi'
                , vivaldi: t
                , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
            }
        }
        else if (sailfish) {
            result = {
                name: 'Sailfish'
                , sailfish: t
                , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
            }
        }
        else if (/seamonkey\//i.test(ua)) {
            result = {
                name: 'SeaMonkey'
                , seamonkey: t
                , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
            }
        }
        else if (/firefox|iceweasel|fxios/i.test(ua)) {
            result = {
                name: 'Firefox'
                , firefox: t
                , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
            }
            if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
                result.firefoxos = t
            }
        }
        else if (silk) {
            result = {
                name: 'Amazon Silk'
                , silk: t
                , version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
            }
        }
        else if (/phantom/i.test(ua)) {
            result = {
                name: 'PhantomJS'
                , phantom: t
                , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
            }
        }
        else if (/slimerjs/i.test(ua)) {
            result = {
                name: 'SlimerJS'
                , slimer: t
                , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
            }
        }
        else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
            result = {
                name: 'BlackBerry'
                , blackberry: t
                , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
            }
        }
        else if (webos) {
            result = {
                name: 'WebOS'
                , webos: t
                , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
            };
            /touchpad\//i.test(ua) && (result.touchpad = t)
        }
        else if (/bada/i.test(ua)) {
            result = {
                name: 'Bada'
                , bada: t
                , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
            };
        }
        else if (tizen) {
            result = {
                name: 'Tizen'
                , tizen: t
                , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
            };
        }
        else if (/qupzilla/i.test(ua)) {
            result = {
                name: 'QupZilla'
                , qupzilla: t
                , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
            }
        }
        else if (/chromium/i.test(ua)) {
            result = {
                name: 'Chromium'
                , chromium: t
                , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
            }
        }
        else if (/chrome|crios|crmo/i.test(ua)) {
            result = {
                name: 'Chrome'
                , chrome: t
                , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
            }
        }
        else if (android) {
            result = {
                name: 'Android'
                , version: versionIdentifier
            }
        }
        else if (/safari|applewebkit/i.test(ua)) {
            result = {
                name: 'Safari'
                , safari: t
            }
            if (versionIdentifier) {
                result.version = versionIdentifier
            }
        }
        else if (iosdevice) {
            result = {
                name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
            }
            // WTF: version is not part of user agent in web apps
            if (versionIdentifier) {
                result.version = versionIdentifier
            }
        }
        else if (/googlebot/i.test(ua)) {
            result = {
                name: 'Googlebot'
                , googlebot: t
                , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
            }
        }
        else {
            result = {
                name: getFirstMatch(/^(.*)\/(.*) /),
                version: getSecondMatch(/^(.*)\/(.*) /)
            };
        }

        // set webkit or gecko flag for browsers based on these engines
        if (!result.msedge && /(apple)?webkit/i.test(ua)) {
            if (/(apple)?webkit\/537\.36/i.test(ua)) {
                result.name = result.name || "Blink"
                result.blink = t
            } else {
                result.name = result.name || "Webkit"
                result.webkit = t
            }
            if (!result.version && versionIdentifier) {
                result.version = versionIdentifier
            }
        } else if (!result.opera && /gecko\//i.test(ua)) {
            result.name = result.name || "Gecko"
            result.gecko = t
            result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
        }

        // set OS flags for platforms that have multiple browsers
        if (!result.windowsphone && !result.msedge && (android || result.silk)) {
            result.android = t
        } else if (!result.windowsphone && !result.msedge && iosdevice) {
            result[iosdevice] = t
            result.ios = t
        } else if (mac) {
            result.mac = t
        } else if (xbox) {
            result.xbox = t
        } else if (windows) {
            result.windows = t
        } else if (linux) {
            result.linux = t
        }

        // OS version extraction
        var osVersion = '';
        if (result.windowsphone) {
            osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
        } else if (iosdevice) {
            osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
            osVersion = osVersion.replace(/[_\s]/g, '.');
        } else if (android) {
            osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
        } else if (result.webos) {
            osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
        } else if (result.blackberry) {
            osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
        } else if (result.bada) {
            osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
        } else if (result.tizen) {
            osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
        }
        if (osVersion) {
            result.osversion = osVersion;
        }

        // device type extraction
        var osMajorVersion = osVersion.split('.')[0];
        if (
            tablet
            || nexusTablet
            || iosdevice == 'ipad'
            || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
            || result.silk
        ) {
            result.tablet = t
        } else if (
            mobile
            || iosdevice == 'iphone'
            || iosdevice == 'ipod'
            || android
            || nexusMobile
            || result.blackberry
            || result.webos
            || result.bada
        ) {
            result.mobile = t
        }

        // Graded Browser Support
        // http://developer.yahoo.com/yui/articles/gbs
        if (result.msedge ||
            (result.msie && result.version >= 10) ||
            (result.yandexbrowser && result.version >= 15) ||
            (result.vivaldi && result.version >= 1.0) ||
            (result.chrome && result.version >= 20) ||
            (result.samsungBrowser && result.version >= 4) ||
            (result.firefox && result.version >= 20.0) ||
            (result.safari && result.version >= 6) ||
            (result.opera && result.version >= 10.0) ||
            (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
            (result.blackberry && result.version >= 10.1)
            || (result.chromium && result.version >= 20)
        ) {
            result.a = t;
        }
        else if ((result.msie && result.version < 10) ||
            (result.chrome && result.version < 20) ||
            (result.firefox && result.version < 20.0) ||
            (result.safari && result.version < 6) ||
            (result.opera && result.version < 10.0) ||
            (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
            || (result.chromium && result.version < 20)
        ) {
            result.c = t
        } else result.x = t

        return result
    }

    var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')

    bowser.test = function (browserList) {
        for (var i = 0; i < browserList.length; ++i) {
            var browserItem = browserList[i];
            if (typeof browserItem === 'string') {
                if (browserItem in bowser) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Get version precisions count
     *
     * @example
     *   getVersionPrecision("1.10.3") // 3
     *
     * @param  {string} version
     * @return {number}
     */
    function getVersionPrecision(version) {
        return version.split(".").length;
    }

    /**
     * Array::map polyfill
     *
     * @param  {Array} arr
     * @param  {Function} iterator
     * @return {Array}
     */
    function map(arr, iterator) {
        var result = [], i;
        if (Array.prototype.map) {
            return Array.prototype.map.call(arr, iterator);
        }
        for (i = 0; i < arr.length; i++) {
            result.push(iterator(arr[i]));
        }
        return result;
    }

    /**
     * Calculate browser version weight
     *
     * @example
     *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
     *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
     *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
     *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
     *
     * @param  {Array<String>} versions versions to compare
     * @return {Number} comparison result
     */
    function compareVersions(versions) {
        // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
        var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
        var chunks = map(versions, function (version) {
            var delta = precision - getVersionPrecision(version);

            // 2) "9" -> "9.0" (for precision = 2)
            version = version + new Array(delta + 1).join(".0");

            // 3) "9.0" -> ["000000000"", "000000009"]
            return map(version.split("."), function (chunk) {
                return new Array(20 - chunk.length).join("0") + chunk;
            }).reverse();
        });

        // iterate in reverse order by reversed chunks array
        while (--precision >= 0) {
            // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
            if (chunks[0][precision] > chunks[1][precision]) {
                return 1;
            }
            else if (chunks[0][precision] === chunks[1][precision]) {
                if (precision === 0) {
                    // all version chunks are same
                    return 0;
                }
            }
            else {
                return -1;
            }
        }
    }

    /**
     * Check if browser is unsupported
     *
     * @example
     *   bowser.isUnsupportedBrowser({
     *     msie: "10",
     *     firefox: "23",
     *     chrome: "29",
     *     safari: "5.1",
     *     opera: "16",
     *     phantom: "534"
     *   });
     *
     * @param  {Object}  minVersions map of minimal version to browser
     * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
     * @param  {String}  [ua] user agent string
     * @return {Boolean}
     */
    function isUnsupportedBrowser(minVersions, strictMode, ua) {
        var _bowser = bowser;

        // make strictMode param optional with ua param usage
        if (typeof strictMode === 'string') {
            ua = strictMode;
            strictMode = void (0);
        }

        if (strictMode === void (0)) {
            strictMode = false;
        }
        if (ua) {
            _bowser = detect(ua);
        }

        var version = "" + _bowser.version;
        for (var browser in minVersions) {
            if (minVersions.hasOwnProperty(browser)) {
                if (_bowser[browser]) {
                    if (typeof minVersions[browser] !== 'string') {
                        throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
                    }

                    // browser version and min supported version.
                    return compareVersions([version, minVersions[browser]]) < 0;
                }
            }
        }

        return strictMode; // not found
    }

    /**
     * Check if browser is supported
     *
     * @param  {Object} minVersions map of minimal version to browser
     * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
     * @param  {String}  [ua] user agent string
     * @return {Boolean}
     */
    function check(minVersions, strictMode, ua) {
        return !isUnsupportedBrowser(minVersions, strictMode, ua);
    }

    bowser.isUnsupportedBrowser = isUnsupportedBrowser;
    bowser.compareVersions = compareVersions;
    bowser.check = check;

    /*
     * Set our detect method to the main bowser object so we can
     * reuse it to test other user agents.
     * This is needed to implement future tests.
     */
    bowser._detect = detect;

    return bowser
});

+function () {
    // window.consolestop = false;

    window.redesign = {};

    window.redesignConstants = {
        bpValues: [320, 640, 768, 1200] // img breakpoints
    }

    // modal callbacks object
    window.redesignModalCallbacks = {};

    $(document).ready(function () {
        var browser = bowser.name;

        if (browser) {
            browser = browser.replace(/\s/g, "-");
            document.body.classList.add('bowser-' + browser.toLowerCase());
        }
    });

}();

+function () {
    // window.consolestop = false;

    if (window.redesign) {

        var isResX2 = function () {
            return isResXx(2);
        };

        var isResX3 = function () {
            return isResXx(3);
        };

        var isResX4 = function () {
            return isResXx(4);
        };

        var isResXx = function (dpi, pixelRatio) {
            var dpi = pixelRatio * 96;
            pixelRatio = pixelRatio - 0.75;
            return !!((window.matchMedia
                && (window.matchMedia('only screen and (min-resolution: ' + dpi + 'dpi), only screen and (min-resolution: 2dppx), only screen and (min-resolution: ' + (dpi / 2.54) + 'dpcm)').matches
                    || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: ' + pixelRatio + '), only screen and (-o-min-device-pixel-ratio: ' + (pixelRatio * 4) + '/4), only screen and (min--moz-device-pixel-ratio: ' + pixelRatio + '), only screen and (min-device-pixel-ratio: ' + pixelRatio + ')').matches))
                || (window.devicePixelRatio && window.devicePixelRatio >= pixelRatio));
        };

        var escapePressed = function (evt) {
            if (!evt) {
                evt = {};
                console.error('Missing event object');
            }

            var isPressed = false;
            if (evt.key) {
                isPressed = (evt.key == "Escape" || evt.key == "Esc");
            }
            else {
                isPressed = (evt.which == 27 || evt.keyCode == 27);
            }

            return isPressed;
        };

        var tabPressed = function (evt) {
            if (!evt) {
                evt = {};
                console.error('Missing event object');
            }

            var isPressed = false;
            if (evt.key) {
                isPressed = evt.key == "Tab";
            }
            else {
                isPressed = (evt.which == 9 || evt.keyCode == 9);
            }

            return isPressed;
        };

        var arrUpPressed = function (evt) {
            if (!evt) {
                evt = {};
                console.error('Missing event object');
            }

            var isPressed = false;
            if (evt.key) {
                isPressed = evt.key == "ArrowUp";
            }
            else {
                isPressed = (evt.which == 38 || evt.keyCode == 38);
            }

            return isPressed;
        };

        var arrDownPressed = function (evt) {
            if (!evt) {
                evt = {};
                console.error('Missing event object');
            }

            var isPressed = false;
            if (evt.key) {
                isPressed = evt.key == "ArrowDown";
            }
            else {
                isPressed = (evt.which == 40 || evt.keyCode == 40);
            }

            return isPressed;
        };

        var enterPressed = function (evt) {
            if (!evt) {
                evt = {};
                console.error('Missing event object');
            }

            var isPressed = false;
            if (evt.key) {
                isPressed = evt.key == "Enter";
            }
            else {
                isPressed = (evt.which == 13 || evt.keyCode == 13);
            }

            return isPressed;
        };

        var documentHeight = function () {
            var body = document.documentElement || document.body.parentNode || document.body;
            var html = document.documentElement;

            var height = Math.max(body.scrollHeight, body.offsetHeight,
                html.clientHeight, html.scrollHeight, html.offsetHeight);

            return height;
        };

        var viewPortHeight = function () {
            return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        };

        var getUrlParameterByName = function (name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        };

        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : sParameterName[1];
                }
            }
        };

        var createLoader = function (element) {
            var loader = {
                element: $('<div class="o-loading"><div class="o-loading__icon"></div></div>'),
                start: function () {
                    this.element.addClass('o-loading--visible');
                },
                stop: function () {
                    this.element.removeClass('o-loading--visible');
                }
            };

            var loadingContainer = null;
            if (!element) {
                loadingContainer = $('body')
            }
            else {
                var loadingContainers = element.parents('.o-loading-container');

                if (loadingContainers.length) {
                    loadingContainer = $(loadingContainers[0]);
                }

            }

            if (loadingContainer && loadingContainer.children('.o-loading').length === 0) {
                loadingContainer.append(loader.element)
            }
            else {
                loader.element = $(loadingContainer.children('.o-loading')[0]);
            }

            return loader;
        };

        var urlExists = function (url, callback) {
            xhr = new XMLHttpRequest();

            xhr.addEventListener("loadend", function () {
                callback(this.status);
            });

            xhr.open("GET", url, true);
            xhr.send();
        };

        var removeDisabled = function (selector) {
            $(selector).removeClass('o-button--muted').prop('disabled', false);
        };

        var setDisabled = function (selector) {
            $(selector).addClass('o-button--muted').prop('disabled', true);
        };

        var replaceQueryParam = function (param, paramVal, url) {
            var parts = url.split('?');
            var baseUrl = parts[0];
            var oldQueryString = parts[1];
            var newParameters = [];
            if (oldQueryString) {
                var oldParameters = oldQueryString.split('&');
                for (var i = 0; i < oldParameters.length; i++) {
                    if (oldParameters[i].split('=')[0] != param) {
                        newParameters.push(oldParameters[i]);
                    }
                }
            }
            if (paramVal !== '' && paramVal !== null && typeof paramVal !== 'undefined') {
                newParameters.push(param + '=' + encodeURI(paramVal));
            }
            if (newParameters.length > 0) {
                return baseUrl + '?' + newParameters.join('&');
            } else {
                return baseUrl;
            }
        };

        window.redesign.isResX2 = isResX2;
        window.redesign.isResX3 = isResX3;
        window.redesign.isResX4 = isResX4;
        window.redesign.escapePressed = escapePressed; window.redesign.tabPressed = tabPressed;
        window.redesign.arrUpPressed = arrUpPressed;
        window.redesign.arrDownPressed = arrDownPressed;
        window.redesign.enterPressed = enterPressed;
        window.redesign.documentHeight = documentHeight;
        window.redesign.viewPortHeight = viewPortHeight;
        window.redesign.getUrlParameterByName = getUrlParameterByName;
        window.redesign.getUrlParameter = getUrlParameter;
        window.redesign.createLoader = createLoader;
        window.redesign.urlExists = urlExists;
        window.redesign.removeDisabled = removeDisabled;
        window.redesign.setDisabled = setDisabled;
        window.redesign.replaceQueryParam = replaceQueryParam;
    }

}();

+function () {

    $(document).ready(function () {

        +(function () {

            $(document).on('click', '.js-academy-article-slider-nav', function () {
                var el = $(this);
                var parent = el.parents('.js-academy-article-slick-slider');
                var items = $('.js-academy-article-slider-item', parent);
                var numOfItems = items.length;
                var next = el.hasClass('js-academy-article-slider-nav--next');
                var currentItem = $('.js-academy-article-slider-item.is-present', parent);
                var currentItemIndex = !isNaN(parseInt(currentItem.attr('data-item-index'))) ? parseInt(currentItem.attr('data-item-index')) : 0;

                var nextIndex = null;
                if (next) {
                    nextIndex = currentItemIndex + 1;

                    if (nextIndex == numOfItems) {
                        nextIndex = 0;
                    }
                }
                else {
                    nextIndex = currentItemIndex - 1;

                    if (nextIndex < 0) {
                        nextIndex = numOfItems - 1;
                    }
                }

                var nextItem = $('.js-academy-article-slider-item[data-item-index="' + nextIndex + '"]', parent);

                currentItem.removeClass('is-visible');

                setTimeout(function () {
                    currentItem.removeClass('is-visible');
                    currentItem.removeClass('is-present');

                    nextItem.addClass('is-present');

                    setTimeout(function () {
                        nextItem.addClass('is-visible');
                    });

                }, 400);


                // for(var i = 0; i < items.)


            });

        })();

    });

}();


+function () {

    $(document).ready(function () {

        +(function () {
            var filters = $('.js-api-switch');
            var iframes = $('.js-api-iframe');

            filters.on('click', function () {
                var el = $(this);

                filters.removeClass('is-active');
                el.addClass('is-active');

                var iframeId = el.attr('data-iframe-id');
                var iframe = $('#' + iframeId);

                for (var i = 0; i < iframes.length; i++) {
                    var ifrm = $(iframes[i]);
                    if (!ifrm.hasClass('o-api-iframe__iframe--hidden')) {
                        ifrm.addClass('o-api-iframe__iframe--hidden');
                    }
                }

                iframe.removeClass('o-api-iframe__iframe--hidden');

                if (window.redesign_apiIframeLoaded) {
                    // window.redesign_apiIframeLoaded(iframeId);
                }

            });

        })();

    });

}();


+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    var openMenu = function (el) {
        var menu = el;
        var links = $('.o-collapsed-desktop-menu__link', menu);

        el.addClass('o-collapsed-desktop-menu--opened');

        var linkIndexPreselected = null;

        $document.on('click.outOfMenuClickListener', closeIfClickedOutside);

        $(document).on('keydown.menukeydown', function (evt) {
            if (window.redesign) {
                var escPressed = !!window.redesign.escapePressed && window.redesign.escapePressed(evt);
                var tabPressed = !!window.redesign.tabPressed && window.redesign.tabPressed(evt);
                var arrUpPressed = !!window.redesign.arrUpPressed && window.redesign.arrUpPressed(evt);
                var arrDownPressed = !!window.redesign.arrDownPressed && window.redesign.arrDownPressed(evt);
                var enterPressed = !!window.redesign.enterPressed && window.redesign.enterPressed(evt);

                if (escPressed || tabPressed) {
                    if (menu.length) {
                        closeMenu(menu)
                    }
                }
                else if (arrUpPressed) {
                    evt.preventDefault();
                    linkIndexPreselected = linkIndexPreselected ? linkIndexPreselected - 1 : 0;

                    preselectLink(linkIndexPreselected, links);
                }
                else if (arrDownPressed) {
                    evt.preventDefault();

                    if (linkIndexPreselected || linkIndexPreselected == 0) {
                        if (links.length - 1 > linkIndexPreselected) {
                            linkIndexPreselected = linkIndexPreselected + 1;
                        }
                    }
                    else {
                        linkIndexPreselected = 0;
                    }

                    preselectLink(linkIndexPreselected, links);
                }
                else if (enterPressed) {
                    if (linkIndexPreselected != null) {
                        var link = $(links[linkIndexPreselected]);
                        links[linkIndexPreselected].click();
                    }
                }

            }

        });
    };

    var preselectLink = function (index, links) {
        links.removeClass('o-collapsed-desktop-menu__link--preselected');

        if (index !== null) {
            var link = $(links[index]);

            link.addClass('o-collapsed-desktop-menu__link--preselected');
        }
    };

    var closeMenu = function (el) {
        el.removeClass('o-collapsed-desktop-menu--opened');


        $(document).off('keydown.menukeydown');
        $document.off('click.outOfMenuClickListener');
        preselectLink(null, el);
    };

    var toggleMenu = function (el) {
        if (el.hasClass('o-collapsed-desktop-menu--opened')) {
            closeMenu(el);
        }
        else {
            openMenu(el);
        }
    };

    var closeIfClickedOutside = function (event) {
        var menu = $('.o-collapsed-desktop-menu.o-collapsed-desktop-menu--opened', redeignedSelector);
        if (menu.length && $(event.target).closest(".o-collapsed-desktop-menu__link-container").length == 0 && $(event.target).closest(".o-collapsed-desktop-menu").length == 0) {
            closeMenu(menu);
        }
    };

    var $document = $(document);
    $document.ready(function () {

        $document.on('click', '.o-collapsed-desktop-menu__link-container', function (evt) {
            evt.stopPropagation();
        });

        $(document).on('click', '.o-collapsed-desktop-menu', function () {
            toggleMenu($(this));
        });
    });

}();

+function () {
    $(document).ready(function () {
        var imgClass = "o-compare-selector__item-img";
        var imgClassActive = "o-compare-selector__item-img--active";

        var highlightImg = function (elem) {
            var currentImg = $(elem).attr("src");
            var hoverImg = $(elem).attr("data-hover-image");
            if (typeof (hoverImg) === undefined) return;
            $(elem).attr("src", hoverImg);
        }

        var resetImgs = function () {
            $("." + imgClass).each(function (elem) {
                $(this).removeClass(imgClassActive).attr("src", $(this).attr("data-normal-img"));
            });
        }

        var setActive = function (elem) {
            highlightImg(elem);
            $(elem).addClass(imgClassActive);
        }

        $("." + imgClass)
            .each(function () {
                $(this).attr("data-normal-img", $(this).attr("src"));
            })
            // .on("mouseenter", function(){
            //     highlightImg(this);
            // })
            // .on("mouseleave", function(){
            //     if($(this).hasClass(imgClassActive)) return;
            //     $(this).attr("src", $(this).attr("data-normal-img"));
            // })
            .on("click", function () {
                resetImgs();
                setActive(this);
                var link = $(this).attr("data-link");
                $(".js-comparison-select").has("option[value='" + link + "']").val(link).trigger("change"); //mobile
                $('.js-comparison-dropdown-option[data-value="' + link + '"]')[0].click(); //desktop
            });

        var defaultValue = $('.js-comparison-select:eq(0)').val();
        var defaultElem = $("." + imgClass + "[data-link='" + defaultValue + "']");
        defaultElem.addClass(imgClassActive);
        highlightImg(defaultElem);

        $(".o-compare-selector").on("change", function () {
            resetImgs();
            setActive($("." + imgClass + "[data-link='" + $(this).val() + "']"));
        });
    });
}();

+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    $(document).ready(function () {
        var changeRow = function (dataOptionValue) {
            $('.js-comparing-product').removeClass('is-active');
            $('.js-comparing-product[data-option-value=' + dataOptionValue + ']').addClass('is-active');
            $('.o-compare-selector').val(dataOptionValue).trigger("change");
        };

        $(document).on('click', '.js-comparison-dropdown-option', function () {
            var el = $(this);
            changeRow(el.attr('data-value'));

            var comparisonLogo = $('.js-comparison-logo', redeignedSelector);

            comparisonLogo.attr('src', comparisonLogo.attr('data-base-src-path') + el.attr('data-image'));
            setTimeout(function () {
                $('.js-comparison-dropdown-option').removeClass('o-dropdown__option--selected');
                $('.js-comparison-dropdown-option[data-value=' + el.attr('data-value') + ']').addClass('o-dropdown__option--selected');
            });
        });

        $('.js-comparison-select').on('change', function () {
            var el = $(this);
            changeRow(el.val());

            var backgroundImage = '/img/redesign/' + el.find(":selected").attr('data-image');
            $('.o-comparison-table-select', redeignedSelector).css('background-image', 'url(' + backgroundImage + ')');
            $('.js-comparison-select').val(el.val());
        });


        // check for pre selected comparison

        if (window.redesign && window.redesign.getUrlParameterByName) {
            var compare = window.redesign.getUrlParameterByName('compare');

            if (compare) {
                var options = $('.o-dropdown__option.js-comparison-dropdown-option');

                for (i = 0; i < options.length; i++) {
                    var option = $(options[i]);

                    if (option.attr('data-value') === compare) {
                        option.trigger('click');
                        break;
                    }

                }
            }
        }


    });

}();

+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    var shouldShowCookies = function () {
        return !!(document.cookie.replace(/(?:(?:^|.*;\s*)redesignedCookiesHidden\s*\=\s*([^;]*).*$)|^.*$/, "$1") !== "true");
    };

    var cookiesContainerHeight = function () {
        var visibleCookiesContainer = document.getElementsByClassName('o-cookies is-visible');
        var cookiesHeight = null;

        if (visibleCookiesContainer.length) {
            var container = visibleCookiesContainer[0];
            var containerHeight = parseInt(container.scrollHeight);
            if (!isNaN(containerHeight)) {
                cookiesHeight = containerHeight;
            }
        }

        return cookiesHeight;
    };

    window.redesign.shouldShowCookies = shouldShowCookies;
    window.redesign.cookiesContainerHeight = cookiesContainerHeight;

    $(document).ready(function () {

        (function () {

            if (shouldShowCookies()) {
                var initialBodyPaddingBottom = parseInt($('body').css('padding-bottom'));
                var cookiesContainer = $('.o-cookies', redeignedSelector);
                cookiesContainer.addClass('is-visible');

                $('body').css('padding-bottom', (cookiesContainerHeight() || 0));

                $(document).on('click', '.js-cookie-continue', function () {
                    document.cookie = "redesignedCookiesHidden=true; expires=Fri, 31 Dec 9999 23:59:59 GMT;path=/";

                    cookiesContainer.addClass('is-fading-out');

                    setTimeout(function () {
                        cookiesContainer.removeClass('is-visible').removeClass('is-fading-out');

                        $('body').css('padding-bottom', initialBodyPaddingBottom);

                        if (window.redesign && window.redesign.initRedesignZopim) {
                            window.redesign.initRedesignZopim();
                        }

                    }, 500);

                });

            }

        })();
    });

}();

+function () {

    $(document).ready(function () {

        +(function () {
            var links = $('.js-download-guides-menu-link');
            var items = $('.o-download-group-card__item');

            links.on('click', function () {
                var el = $(this);
                var dataLevelsAttr = el.attr('data-levels');
                var dataLevelsArr = dataLevelsAttr.split(';');

                links.removeClass('is-active');
                el.addClass('is-active');

                for (var i = 0; i < items.length; i++) {
                    var item = $(items[i]);
                    var itemLevel = item.attr('data-level');

                    if (dataLevelsArr.indexOf(itemLevel) > -1) {
                        item.removeClass('o-download-group-card__item--hidden');
                    }
                    else {
                        item.addClass('o-download-group-card__item--hidden');
                    }

                }

            });

        })();

    });

}();


+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    var initDropdowns = function () {
        var dropdowns = $('.o-dropdown.js-init-by-select', redeignedSelector);

        for (var i = 0; i < dropdowns.length; i++) {
            var dropdown = $(dropdowns[i]);
            var selectSibling = dropdown.siblings('.o-select');
            var select = selectSibling.length ? $('select', selectSibling) : null;

            var selectVal = select.val();
            if (selectVal) {
                var dropdownOption = $('.o-dropdown__option[data-value="' + selectVal + '"]', dropdown);
                if (dropdownOption.length) {
                    dropdownOption.trigger('click');
                }
            }
        }

    };

    var adjustContainerHeight = function (container) {
        if (container.length) {
            var options = $('.o-dropdown__option', container);
            if (options.length > 4) {
                var maxHeight = 0;
                for (j = 4; j >= 0; j--) {
                    var option = options[j];
                    maxHeight += (option.offsetHeight / (j ? 1 : 2));
                }

                var containerTopBorder = parseInt(container.css('border-top-width'));
                var containerBottomBorder = parseInt(container.css('border-bottom-width'));

                if (!isNaN(containerTopBorder)) {
                    maxHeight += containerTopBorder;
                }

                if (!isNaN(containerBottomBorder)) {
                    maxHeight += containerBottomBorder;
                }

                maxHeight = Math.round(maxHeight);

                container.css('max-height', maxHeight);
            }
        }

    };

    var openDropdown = function (el) {
        var dropdown = el;
        var options = $('.o-dropdown__option', dropdown);
        var searchField = $('.js-dropdown-search-field', el);

        el.addClass('o-dropdown--opened');

        var optionContainer = $('.o-dropdown__option-container', el);
        adjustContainerHeight(optionContainer);

        if (searchField.length) {
            searchField.addClass('is-active');
            searchField.focus();
        }


        var optionIndexPreselected = null;

        $document.on('click.outOfDropdownClickListener', closeIfClickedOutside);

        $(document).on('keydown.dropdownkeydown', function (evt) {
            if (window.redesign) {
                var escPressed = !!window.redesign.escapePressed && window.redesign.escapePressed(evt);
                var tabPressed = !!window.redesign.tabPressed && window.redesign.tabPressed(evt);
                var arrUpPressed = !!window.redesign.arrUpPressed && window.redesign.arrUpPressed(evt);
                var arrDownPressed = !!window.redesign.arrDownPressed && window.redesign.arrDownPressed(evt);
                var enterPressed = !!window.redesign.enterPressed && window.redesign.enterPressed(evt);

                if (escPressed || tabPressed) {
                    if (dropdown.length) {
                        closeDropdown(dropdown)
                    }
                }
                else if (arrUpPressed) {
                    evt.preventDefault();
                    optionIndexPreselected = optionIndexPreselected ? optionIndexPreselected - 1 : 0;

                    preselectOption(optionIndexPreselected, options);
                }
                else if (arrDownPressed) {
                    evt.preventDefault();

                    if (optionIndexPreselected || optionIndexPreselected == 0) {
                        if (filterVisibleOptions(options).length - 1 > optionIndexPreselected) {
                            optionIndexPreselected = optionIndexPreselected + 1;
                        }
                    }
                    else {
                        optionIndexPreselected = 0;
                    }

                    preselectOption(optionIndexPreselected, options);
                }
                else if (enterPressed) {
                    if (optionIndexPreselected != null) {
                        var option = filterVisibleOptions(options)[optionIndexPreselected];
                        option.trigger('click');
                    }
                }

            }




        });
    };

    var filterVisibleOptions = function (opts) {
        var filteredOpts = [];
        for (var optI = 0; optI < opts.length; optI++) {
            var opt = $(opts[optI]);
            if (!opt.hasClass('o-dropdown__option--hidden')) {
                filteredOpts.push(opt);
            }
        }

        return filteredOpts;
    };

    var preselectOption = function (index, options) {
        options.removeClass('o-dropdown__option--preselected');

        options = filterVisibleOptions(options);

        if (index !== null) {
            var option = $(options[index]);

            option.addClass('o-dropdown__option--preselected');
        }
    };

    var closeDropdown = function (el) {
        var searchField = $('.js-dropdown-search-field', el);

        el.removeClass('o-dropdown--opened');

        if (searchField.length) {
            searchField.removeClass('is-active');
            searchField.val('');
            $('.o-dropdown__option', el).removeClass('o-dropdown__option--hidden');
        }

        $(document).off('keydown.dropdownkeydown');
        $(document).off('click.outOfDropdownClickListener');
        preselectOption(null, el);
    };

    var toggleDropdown = function (el) {
        if (el.hasClass('o-dropdown--opened')) {
            closeDropdown(el);
        }
        else {
            openDropdown(el);
        }
    };

    var updateSelectVal = function (select, val) {
        if (val) {
            select.val(val);
            select.trigger('change');
        }
    };

    var updateDropdown = function (optionElement) {
        var optionHtml = optionElement.html(),
            dropdown = optionElement.parents('.o-dropdown');

        dropdown.removeClass('not-empty');
        if (jQuery.trim(optionHtml) != '') {
            dropdown.addClass('not-empty');
        }

        dropdown.find('.o-dropdown__title').html(optionHtml);

        $('.o-dropdown__option--selected').removeClass('o-dropdown__option--selected');

        optionElement.addClass('o-dropdown__option--selected');

    };

    var closeIfClickedOutside = function (event) {
        var dropdown = $('.o-dropdown.o-dropdown--opened', redeignedSelector);
        if (dropdown.length && $(event.target).closest(".o-dropdown__option-container").length == 0 && $(event.target).closest(".o-dropdown").length == 0) {
            closeDropdown(dropdown);
        }
    };

    var $document = $(document);
    $document.ready(function () {

        setTimeout(function () {
            initDropdowns();
        });

        $('.o-select__element--flag').each(function () {
            setSelectFlagImage($(this));
        }).on("change", function () {
            setSelectFlagImage($(this));
        });

        function setSelectFlagImage(el) {
            var val = el.val();
            if (val !== "") {
                $(el).css('background-image', 'url(/img/redesign/svg/storage-' + val.toLowerCase() + '.svg)');
            }
        }

        $document.on('click', '.o-dropdown__option-container', function (evt) {
            evt.stopPropagation();
        });

        $document.on('click', '.o-dropdown__option', function () {
            var el = $(this),
                elParent = el.parents('.o-dropdown');
            var selectSibling = elParent.siblings('.o-select');
            var select = selectSibling.length ? $('select', selectSibling) : null;

            updateDropdown(el);

            closeDropdown($('.o-dropdown--opened'));

            if (select) {
                updateSelectVal(select, el.attr('data-value'));
            }

        });

        $('.o-select select').change(function () {
            var el = $(this),
                elParent = el.parents('.o-select');
            var dropdownSibling = elParent.siblings('.o-dropdown');
            var currentValue = el.val();
            var dropdownOption = dropdownSibling.length ? $('.o-dropdown__option[data-value="' + currentValue + '"]', dropdownSibling) : null;

            if (dropdownOption) {
                updateDropdown(dropdownOption);
            }
        });

        $(document).on('click', '.o-dropdown:not(.o-dropdown--disabled)', function () {
            toggleDropdown($(this));
        });

        $(document).on("keydown", ".o-dropdown", function (e) {
            if (e.key === "ArrowDown" && !$(this).hasClass("o-dropdown--opened")) {
                openDropdown($(this));
                e.preventDefault();
            }
        });

        $('.js-dropdown-search-field').on('keyup', function () {
            var el = $(this);

            var parent = el.parent('.o-dropdown');

            var options = $('.o-dropdown__option', parent);

            for (var i = 0; i < options.length; i++) {
                var option = $(options[i]);
                option.removeClass('o-dropdown__option--hidden');

                if (option.text().trim().latinise().toLowerCase().indexOf(el.val().latinise().toLowerCase()) === -1) {
                    option.addClass('o-dropdown__option--hidden');
                }

            }

        });

    });

    $(document).on("focus", ".o-select__element", function () {
        $(this).parent().addClass("is-focused");
    }).on("focusout", ".o-select__element", function () {
        $(this).parent().removeClass("is-focused");
    });
}();

+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    var scrollHandler = (function () {
        var documentBody = document.documentElement || document.body.parentNode || document.body;

        var lastScrolledPos = null;
        var lastScrolledDiff = null;
        var scrolled = 0; // -1 = down ; 0 = no scroll ; 1 = up
        var lastScrolledDirection = 0;

        return {
            scrolled: function () {
                var scrollTop = window.pageYOffset || documentBody.scrollTop;
                lastScrolledDirection = scrolled;
                scrolled = 0;

                if (lastScrolledPos != null) {
                    if (lastScrolledPos < scrollTop) {
                        scrolled = -1
                    }
                    else if (lastScrolledPos > scrollTop) {
                        scrolled = 1;
                    }
                }

                lastScrolledDiff = Math.abs(lastScrolledPos - scrollTop);
                lastScrolledPos = scrollTop;
            },
            wasScrolled: function () {
                return lastScrolledPos === null ? false : true;
            },
            lastScrolled: function () {
                return scrolled;
            },
            wasScrolledUp: function () {
                return scrolled === 1 ? true : false;
            },
            wasScrolledDown: function () {
                return scrolled === -1 ? true : false;
            },
            wasChangedScrollDirection: function () {
                return !(lastScrolledDirection === scrolled);
            },
            getLastScrolledDiff: function () {
                return lastScrolledDiff;
            }
        }

    })();

    $(document).ready(function () {
        $('.o-floater', redeignedSelector).addClass('o-floater--visible');

        var floaterPxFromHeader = 30;

        var floater = $('.js-floater__content', redeignedSelector);
        var mainHeader = $('.o-header .o-header__main', redeignedSelector);
        var mainHeaderHeight = parseInt(mainHeader.height());
        var footer = $(".js-floater-footer, .o-try-it-free__box, .o-footer").eq(0);
        var _floaterHeight = {
            initTime: null,
            value: null
        };
        var floaterHeight = function () {
            if (_floaterHeight.value) {
                return _floaterHeight.value;
            }

            if (!_floaterHeight.initTime) {
                _floaterHeight.initTime = (new Date()).getTime();
            }

            var now = (new Date()).getTime();

            var floaterH = floater.height();

            if (now > _floaterHeight.initTime + 5000) {
                _floaterHeight.value = floaterH;
            }

            return floaterH;
        };
        var documentBody = document.documentElement || document.body.parentNode || document.body;
        var viewPortHeight = window.redesign && window.redesign.viewPortHeight && window.redesign.viewPortHeight();

        var subMenuHeight = function () {
            var subMenu = $('.o-header .o-header__sub-menu.is-active', redeignedSelector).not('.o-sub-menu--hidden');
            var height = parseInt(subMenu.height());
            return isNaN(height) ? 0 : height;
        };

        var pinToTop = function (topDiff) {
            var topPos = mainHeaderHeight + floaterPxFromHeader + subMenuHeight();
            topDiff = topDiff || 0;
            var newTop = topPos - topDiff;
            var spaceToBottom = viewPortHeight - (newTop + floaterHeight());

            if (spaceToBottom > floaterPxFromHeader && newTop < topPos) {
                newTop = newTop + (spaceToBottom - floaterPxFromHeader);
            }

            if (newTop > topPos) {
                newTop = topPos;
            }

            if (parseInt(floater.css('top')) != newTop) {
                floater.css('bottom', 'initial');
                floater.css('top', newTop);
            }
        };

        var pinToBottom = function () {
            var vh = window.innerHeight;
            var footerOffsetTop = footer.offset().top;
            var scrollTop = window.pageYOffset || documentBody.scrollTop;
            var pxFromFooter = scrollTop + vh - footerOffsetTop + floaterPxFromHeader;

            floater.css('top', 'initial');
            floater.css('bottom', pxFromFooter);
        };

        var lockedFloaterOffsetTop = null;
        var pinFloater = function (event, init) {
            if (init === true) {
                pinToTop();
                return;
            }
            scrollHandler.scrolled();

            var topPos = mainHeaderHeight + floaterPxFromHeader + subMenuHeight();

            var floaterPxFromTop = floater[0].getBoundingClientRect().top;
            var floaterPxFromBottom = viewPortHeight - (floaterPxFromTop + floaterHeight());
            var footerTopPxFromBottom = viewPortHeight - (footer[0].getBoundingClientRect().top);
            var scrollTop = window.pageYOffset || documentBody.scrollTop;

            if (scrollTop < 0) {
                return;
            }

            if (window.redesign) {
                var docHeight = window.redesign.documentHeight && window.redesign.documentHeight() || 0;

                if (viewPortHeight + scrollTop > docHeight) {
                    return;
                }
            }

            lockedFloaterOffsetTop = lockedFloaterOffsetTop != null ? lockedFloaterOffsetTop : scrollTop;

            if (floaterPxFromBottom < footerTopPxFromBottom || floaterPxFromBottom - footerTopPxFromBottom <= floaterPxFromHeader + scrollHandler.getLastScrolledDiff() && (floaterPxFromTop <= topPos || (floater[0].style.top === 'initial' && scrollHandler.wasScrolledDown()))) {
                lockedFloaterOffsetTop = scrollTop;
                pinToBottom();
            }
            else if (floaterPxFromTop < topPos && floaterPxFromBottom < 0) {
                topDiff = ((topPos - parseInt(floater.css('top'))) - (lockedFloaterOffsetTop - scrollTop));
                lockedFloaterOffsetTop = scrollTop;
                pinToTop(topDiff);
            }
            else {
                var topDiff = 0;

                if (scrollHandler.wasScrolledDown()) {
                    if (floaterPxFromBottom - floaterPxFromHeader < 0) {
                        topDiff = ((topPos - parseInt(floaterPxFromTop)) - (lockedFloaterOffsetTop - scrollTop));
                        pinToTop(topDiff);
                    }
                    else {
                        lockedFloaterOffsetTop = scrollTop;
                    }
                }
                else if (scrollHandler.wasScrolledUp()) {

                    if (floater[0].getBoundingClientRect().top < topPos) {
                        topDiff = ((topPos - parseInt(floaterPxFromTop)) - (lockedFloaterOffsetTop - scrollTop));
                    }
                    else {
                        lockedFloaterOffsetTop = scrollTop;
                    }
                    pinToTop(topDiff);

                }

            }
        };

        if (floater.length) {
            pinFloater(null, true);

            $(window).on('scroll', pinFloater);
        }

    });
}();

+function () {
    // window.consolestop = false;

    $(document).ready(function () {

        +(function () {
            var checkInputValueLabel = $('.js-check-input-value-label');
            if (checkInputValueLabel.length) {
                $('.js-form-input', checkInputValueLabel).each(function (i, el) {
                    checkValue($(el));
                });
            }
        })();

        $(document).on('focus', '.js-form-input', function () {
            $(this).parents('.o-form__label').addClass('o-form__label--focused');
        });

        $(document).on('blur', '.js-form-input', function () {
            checkValue($(this));
            $(this).parents('.o-form__label').removeClass('o-form__label--focused');
        });
    });

    var checkValue = function (el) {
        el.removeClass('not-empty');

        if (jQuery.trim(el.val()) != '') {
            el.addClass('not-empty');
        }
        else {
            el.val(null);
        }
    }
}();

+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    $(document).ready(function () {
        var documentBody = document.documentElement || document.body.parentNode || document.body;
        var bodySelector = $('body');

        var closeHamburgerMenu = function () {
            if ($('.o-mobile-menu__nav', redeignedSelector).hasClass('opened')) {
                sbsShouldClose = false;
                $('.o-header__hamburger', redeignedSelector).trigger('click', true);
            }
        };

        var closeLanguages = function (_sbsShouldClose) {
            var langButton = $('.o-header__action-link.language', redeignedSelector);
            if (langButton.hasClass('opened')) {
                sbsShouldClose = _sbsShouldClose || false;
                langButton.trigger('click');
            }
        };

        /**
         * Stop Body Scroll (sbs)
         */
        var sbsPrevScrollTop = 0;
        var sbsShouldClose = true;

        var sbsAdd = function () {
            if (!bodySelector.hasClass('stop-scroll')) {
                var scrollTop = window.pageYOffset || documentBody.scrollTop;

                sbsPrevScrollTop = scrollTop;

                bodySelector.css('top', '-' + scrollTop + 'px');
                bodySelector.addClass('stop-scroll');
            }
        };

        var sbsRemove = function () {
            bodySelector.css('top', 'auto');
            bodySelector.removeClass('stop-scroll');

            window.scrollTo(0, sbsPrevScrollTop);
            sbsPrevScrollTop = 0;
        };

        // Main menu click

        var mainMenuItemClicked = false;

        // $(document).on('click', '.o-main-menu__link', function(evt) {
        //   var dataMenu = $(this).attr('data-menu');
        //
        //   if(dataMenu){
        //     mainMenuItemClicked = true;
        //     evt.preventDefault();
        //
        //     $('.home-page').removeClass('home-page');
        //
        //     if(dataMenu) {
        //       var submenu = $('.o-header__sub-menu[data-menu="' + dataMenu + '"]');
        //       if (submenu.length && !submenu.hasClass('o-sub-menu--opened')) {
        //         if (submenu.hasClass('o-sub-menu--hidden') && !submenu.hasClass('js-scrolled')) {
        //           submenu.removeClass('o-sub-menu--hidden');
        //         }
        //
        //         var isSubMenuOpened = false;
        //
        //         if($('.o-header__sub-menu.is-active, .o-header__sub-menu.o-sub-menu--opened, .o-header__sub-menu.o-sub-menu--opened-no-slidedown').length){
        //           isSubMenuOpened = true;
        //         }
        //
        //         $('.o-header__sub-menu').removeClass('o-sub-menu--opened').removeClass('o-sub-menu--opened-no-slidedown');
        //
        //         if(isSubMenuOpened){
        //           submenu.addClass('o-sub-menu--opened-no-slidedown');
        //         }
        //         else {
        //           submenu.addClass('o-sub-menu--opened');
        //         }
        //       }
        //
        //       if (submenu.length && !submenu.hasClass('is-active')) {
        //         $('.o-header__sub-menu.is-active').addClass('o-sub-menu--hidden');
        //       }
        //     }
        //   }
        //
        // });

        // Mobile menu collapse
        var jsCollapseMobile = $('.js-collapse-mobile', redeignedSelector);
        var jsCollapseMobileMenu = $('.js-collapse-mobile-menu', redeignedSelector);

        $(document).on('click', '.js-collapse-mobile', function () {
            var el = $(this);

            var openedMenus = $('.js-collapse-mobile.opened', redeignedSelector).not(el);
            openedMenus.each(function () {
                var openedElement = $(this);
                var openedElementMenu = openedElement.siblings('.js-collapse-mobile-menu');

                openedElement.removeClass('opened');
                openedElementMenu.removeClass('opened');

                if (openedElementMenu.length) {
                    openedElementMenu.css('max-height', '');
                }

            });

            var shouldClose = !!el.hasClass('opened');
            jsCollapseMobile.removeClass('opened');
            jsCollapseMobileMenu.removeClass('opened');


            var elMenu = el.siblings('.js-collapse-mobile-menu');
            if (!shouldClose) {
                el.addClass('opened');
                elMenu.addClass('opened');
            }
            elMenu.css('max-height', elMenu.length && !shouldClose ? elMenu[0].scrollHeight : '');
        });

        // Hamburger menu
        $(document).on('click', '.o-header__hamburger', function () {
            var el = $(this);
            var mobileMenuNav = $('.o-mobile-menu__nav', redeignedSelector);
            var header = $('.o-header', redeignedSelector);
            var shouldClose = !!mobileMenuNav.hasClass('opened');

            header.removeClass('hamburger-opened');
            el.removeClass('o-header__hamburger--opened');
            if (!el.hasClass('o-header__hamburger--closed')) {
                el.addClass('o-header__hamburger--closed');
            }
            // bodySelector.removeClass('overflow-y-hidden-until-desktop');
            mobileMenuNav.removeClass('opened');

            if (!shouldClose) {
                closeLanguages();
                sbsAdd();

                $('.o-mobile-menu__nav', redeignedSelector).addClass('opened');
                // $('body').addClass('overflow-y-hidden-until-desktop');
                header.addClass('hamburger-opened');

                if (!el.hasClass('o-header__hamburger--opened')) {
                    el.addClass('o-header__hamburger--opened');
                }
                if (el.hasClass('o-header__hamburger--closed')) {
                    el.removeClass('o-header__hamburger--closed');
                }
            }
            else {
                if (sbsShouldClose) {
                    sbsRemove();
                }
                sbsShouldClose = true;
            }
        });

        // Languages

        var lastOpenedSubmenu = null;

        (function () {
            var domainLink = null;
            var langLink = null;
            var submitButton = $('.o-header__language-submit', redeignedSelector);

            var checkUrl = function () {
                if (domainLink && langLink) {
                    var url = domainLink + langLink;

                    if (!submitButton.hasClass('is-active')) {
                        submitButton.addClass('is-active');
                        submitButton.attr('href', url);
                    }
                }
            };

            $(document).on('click', '.o-header__action-link.language', function () {
                var el = $(this);
                var languageContainer = $('.o-header__language-container', redeignedSelector);
                var mainMenuHeight = $('.o-header__main', redeignedSelector);

                setTimeout(function () {
                    el.toggleClass('opened');
                });
                languageContainer.toggleClass('opened');
                $('.o-sub-menu.is-active', redeignedSelector).toggleClass('o-sub-menu--hidden');

                if (languageContainer.hasClass('opened')) {
                    $(document).on('keydown.languagesEscEvent', function (evt) {

                        if (window.redesign && window.redesign.escapePressed && window.redesign.escapePressed()) {
                            closeLanguages();
                        }
                    });

                    sbsAdd();
                }
                else {
                    $(document).off('.languagesEscEvent');

                    if (sbsShouldClose) {
                        sbsRemove();
                    }
                    sbsShouldClose = true;
                }

                closeHamburgerMenu();

                var openedSubmenu = $('.o-sub-menu.o-sub-menu--opened', redeignedSelector);
                if (openedSubmenu.length) {
                    openedSubmenu.toggleClass('max-height-0');
                }

            });

            $(document).on('click', function (event, forcePrevent) {
                forcePrevent = forcePrevent || false;
                var languageContainer = $('.o-header__language-container.opened', redeignedSelector);
                if (!forcePrevent && languageContainer.length &&
                    $(event.target).closest(".o-header__language-container").length == 0 &&
                    $(event.target).closest(".o-header__action-link.language").length == 0) {
                    closeLanguages(true);
                }
                else if ($(event.target).closest(".o-header__language-close-button").length) {
                    closeLanguages(true);
                }
            });

            $(document).on('click', '.js-lang-country-link', function (evt) {
                var el = $(this);

                $('.js-lang-country-link').removeClass('is-active');
                el.addClass('is-active');
            });

            $(document).on('click', '.js-lang-language-link', function (evt) {
                var el = $(this);

                $('.js-lang-language-link').removeClass('is-active');
                el.addClass('is-active');
            });

        })();

        // Show submenu on homepage

        (function () {
            var isScrolledIntoView = function (elem) {
                var headerHeight = $('.o-header .o-header__main').height();
                var docViewTop = $(window).scrollTop();
                var docViewBottom = docViewTop + $(window).height();

                var elemTop = $(elem).offset().top;
                var elemBottom = elemTop + $(elem).height();

                return !(elemBottom <= (docViewTop + headerHeight));
            };

            var carousel = $('.o-homepage__carousel', redeignedSelector);
            var submenu = $('.o-sub-menu[data-menu="product"]', redeignedSelector);
            var hideTimeout = null;

            $(window).on('scroll', function (evt) {
                if (carousel.length && !mainMenuItemClicked) {
                    if (!isScrolledIntoView(carousel)) {

                        if (hideTimeout) {
                            clearTimeout(hideTimeout);
                        }

                        if (!$('.o-sub-menu', redeignedSelector).hasClass('o-sub-menu--opened')) {
                            submenu.addClass('o-sub-menu--opened');
                        }
                    }
                    else if (submenu.hasClass('o-sub-menu--opened')) {
                        submenu.addClass('max-height-0');

                        hideTimeout = setTimeout(function () {
                            submenu.removeClass('o-sub-menu--opened');
                        }, 400);

                        setTimeout(function () {
                            submenu.removeClass('max-height-0');
                        }, 400);
                    }
                }
            });
        })();

    });
}();

+function () {
    // window.consolestop = false;

    var scrollIfError = function () {
        var errLine = $('.error-line');
        if ($('.error-line').length) {
            $('html,body').animate({
                scrollTop: errLine.offset().top - 250
            });
        }
    };

    $(document).ready(function () {

        scrollIfError();

        $(document).on('click', '.js-value-adjuster button', function (evt) {
            evt.preventDefault();

            var el = $(this);
            var parent = el.parents('.js-value-adjuster');
            var input = $('input', parent);
            var value = parseInt(input.val());
            var prevValue = value;
            var minVal = parseInt(input.attr('data-min-val'));
            var maxVal = parseInt(input.attr('data-max-val'));
            var valueStep = input.attr('data-value-step') ? parseInt(input.attr('data-value-step')) : 1;
            var direction = el.attr('data-direction');

            if (direction === "up") {
                value += valueStep;
            }
            else {
                value -= valueStep;
            }

            value = value >= 0 ? value : 0;

            if (value > 0 && !isNaN(minVal) && value < minVal) {
                value = minVal;
            }

            if (value > 0 && !isNaN(maxVal) && value > maxVal) {
                value = maxVal;
            }

            if (parent.hasClass('js-value-adjuster-num-of-users')) {
                var adjusters = $('.js-value-adjuster');

                for (var i = 0; i < adjusters.length; i++) {
                    var adjuster = $(adjusters[i]);
                    var adjusterParent = adjuster.parents('.js-customize-card-footer-add-addon');
                    var checkbox = $('.js-pricing-customize__cb', adjusterParent);

                    if (!adjuster.hasClass('js-adjusted-manually') && checkbox.is(':checked')) {
                        $('input', adjuster).val(value);
                    }
                }
            }

            input.val(value);
            if (prevValue !== value) {
                input.trigger('change');
            }
        });


        $('.js-value-adjuster input').on('keyup', function (e) {
            var el = $(this);
            var value = parseInt(el.val());

            if (isNaN(value)) {
                el.val('');
                e.stopPropagation();
                return false;
            }

        }).on('change input keyup', function () {
            var el = $(this);
            var minVal = !isNaN(parseInt(el.attr('data-min-val'))) ? parseInt(el.attr('data-min-val')) : 1;
            var value = parseInt(el.val());
            var parent = el.parents('.js-value-adjuster');
            var cardFooterAddon = parent.parent('.js-customize-card-footer-add-addon');
            var checkbox = cardFooterAddon.length ? $('.js-pricing-customize__cb', cardFooterAddon) : null;
            checkbox = checkbox && checkbox.length ? checkbox : null;

            if (!parent.hasClass('js-value-adjuster-num-of-users') && !parent.hasClass('js-adjusted-manually')) {
                parent.addClass('js-adjusted-manually');
            }

            if (checkbox) {
                if (value < minVal && checkbox.is(':checked')) {
                    parent.removeClass('js-adjusted-manually');
                    checkbox.trigger('click');
                }
                else if (value >= minVal && !checkbox.is(':checked')) {
                    parent.addClass('js-adjusted-manually');
                    checkbox.trigger('click');
                }
            }

        });

    });
}();

(function () {
    $(document).ready(function () {
        const prefixes = window.prefixes;

        if (!$("body").hasClass("pricing-avangate")) return;

        $('#quote-country').on('change', function () {
            let iso = $('#quote-country').val();
            if (!$.isEmptyObject(prefixes)) {
                $('#mobile-prefix').html(prefixes[iso]);
                $('#phone_prefix').val(prefixes[iso]);
            }
        })

        $('.user-count-pricing').inputFilter(function (value) {
            return /^\d*$/.test(value);    // Allow digits only, using a RegExp
        });

        $('[data-usercontrol]').on('click', function (event) {
            event.stopPropagation();
            event.preventDefault();

            let operand = $(this).data('usercontrol');
            let input = $(this).closest('.user-count-wrapper').find('input');
            let currentValue = parseInt(input.val());
            let newValue = 10;

            if (operand == 1) {
                newValue = currentValue + 5;
            } else {
                newValue = currentValue - 5;
            }

            if (newValue < 10) {
                newValue = 10;
            }

            input.val(newValue);
        })

        $('.user-count-pricing').keyup(function () {
            $(this).attr("value", $(this).val());
        }).on('focusout', function () {
            if ($(this).val() < 10) {
                $(this).val(10);
            }
        }).on('focus', function (event) {
            event.stopPropagation();
            event.preventDefault();
        })
    });

    // Restricts input for the set of matched elements to the given inputFilter function.
    (function ($) {
        $.fn.inputFilter = function (inputFilter) {
            return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function () {
                if (inputFilter(this.value)) {
                    this.oldValue = this.value;
                    this.oldSelectionStart = this.selectionStart;
                    this.oldSelectionEnd = this.selectionEnd;
                } else if (this.hasOwnProperty("oldValue")) {
                    this.value = this.oldValue;
                    this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                } else {
                    this.value = "";
                }
            });
        };
    }(jQuery));
})();

jQuery(document).ready(function () {

    jQuery('.planDetailsCollapse').click(function () {
        var href = jQuery(this).attr('data-href');
        jQuery(href).slideToggle('fast');
        jQuery(this).find('span').toggleClass('down up');

    });

    jQuery('.pricing-make-cloud-plan-head-box-left').click(function () {
        jQuery(this).find('.pricing-make-cloud-quote-plan-check').toggleClass('is-active');
        jQuery(this).closest('.pricing-make-cloud-plan').toggleClass('is-active');
    });

});

(function ($, undefined) {
    'use strict';
    var defaults = {
        item: 3,
        autoWidth: false,
        slideMove: 1,
        slideMargin: 10,
        addClass: '',
        mode: 'slide',
        useCSS: true,
        cssEasing: 'ease', //'cubic-bezier(0.25, 0, 0.25, 1)',
        easing: 'linear', //'for jquery animation',//
        speed: 400, //ms'
        auto: false,
        pauseOnHover: false,
        loop: false,
        slideEndAnimation: true,
        pause: 2000,
        keyPress: false,
        controls: false,
        prevHtml: '',
        nextHtml: '',
        rtl: false,
        adaptiveHeight: false,
        vertical: false,
        verticalHeight: 500,
        vThumbWidth: 100,
        thumbItem: 10,
        pager: true,
        gallery: false,
        galleryMargin: 5,
        thumbMargin: 5,
        currentPagerPosition: 'middle',
        enableTouch: true,
        enableDrag: true,
        freeMove: true,
        swipeThreshold: 40,
        responsive: [],
        /* jshint ignore:start */
        onBeforeStart: function ($el) { },
        onSliderLoad: function ($el) { },
        onBeforeSlide: function ($el, scene) { },
        onAfterSlide: function ($el, scene) { },
        onBeforeNextSlide: function ($el, scene) { },
        onBeforePrevSlide: function ($el, scene) { }
        /* jshint ignore:end */
    };
    $.fn.lightSlider = function (options) {
        if (this.length === 0) {
            return this;
        }

        if (this.length > 1) {
            this.each(function () {
                $(this).lightSlider(options);
            });
            return this;
        }

        var plugin = {},
            settings = $.extend(true, {}, defaults, options),
            settingsTemp = {},
            $el = this;
        plugin.$el = this;

        if (settings.mode === 'fade') {
            settings.vertical = false;
        }
        var $children = $el.children(),
            windowW = $(window).width(),
            breakpoint = null,
            resposiveObj = null,
            length = 0,
            w = 0,
            on = false,
            elSize = 0,
            $slide = '',
            scene = 0,
            property = (settings.vertical === true) ? 'height' : 'width',
            gutter = (settings.vertical === true) ? 'margin-bottom' : 'margin-right',
            slideValue = 0,
            pagerWidth = 0,
            slideWidth = 0,
            thumbWidth = 0,
            interval = null,
            isTouch = ('ontouchstart' in document.documentElement);
        var refresh = {};

        refresh.chbreakpoint = function () {
            windowW = $(window).width();
            if (settings.responsive.length) {
                var item;
                if (settings.autoWidth === false) {
                    item = settings.item;
                }
                if (windowW < settings.responsive[0].breakpoint) {
                    for (var i = 0; i < settings.responsive.length; i++) {
                        if (windowW < settings.responsive[i].breakpoint) {
                            breakpoint = settings.responsive[i].breakpoint;
                            resposiveObj = settings.responsive[i];
                        }
                    }
                }
                if (typeof resposiveObj !== 'undefined' && resposiveObj !== null) {
                    for (var j in resposiveObj.settings) {
                        if (resposiveObj.settings.hasOwnProperty(j)) {
                            if (typeof settingsTemp[j] === 'undefined' || settingsTemp[j] === null) {
                                settingsTemp[j] = settings[j];
                            }
                            settings[j] = resposiveObj.settings[j];
                        }
                    }
                }
                if (!$.isEmptyObject(settingsTemp) && windowW > settings.responsive[0].breakpoint) {
                    for (var k in settingsTemp) {
                        if (settingsTemp.hasOwnProperty(k)) {
                            settings[k] = settingsTemp[k];
                        }
                    }
                }
                if (settings.autoWidth === false) {
                    if (slideValue > 0 && slideWidth > 0) {
                        if (item !== settings.item) {
                            scene = Math.round(slideValue / ((slideWidth + settings.slideMargin) * settings.slideMove));
                        }
                    }
                }
            }
        };

        refresh.calSW = function () {
            if (settings.autoWidth === false) {
                slideWidth = (elSize - ((settings.item * (settings.slideMargin)) - settings.slideMargin)) / settings.item;
            }
        };

        refresh.calWidth = function (cln) {
            var ln = cln === true ? $slide.find('.lslide').length : $children.length;
            if (settings.autoWidth === false) {
                w = ln * (slideWidth + settings.slideMargin);
            } else {
                w = 0;
                for (var i = 0; i < ln; i++) {
                    w += (parseInt($children.eq(i).width()) + settings.slideMargin);
                }
            }
            return w;
        };
        plugin = {
            doCss: function () {
                var support = function () {
                    var transition = ['transition', 'MozTransition', 'WebkitTransition', 'OTransition', 'msTransition', 'KhtmlTransition'];
                    var root = document.documentElement;
                    for (var i = 0; i < transition.length; i++) {
                        if (transition[i] in root.style) {
                            return true;
                        }
                    }
                };
                if (settings.useCSS && support()) {
                    return true;
                }
                return false;
            },
            keyPress: function () {
                if (settings.keyPress) {
                    $(document).on('keyup.lightslider', function (e) {
                        if (!$(':focus').is('input, textarea')) {
                            if (e.preventDefault) {
                                e.preventDefault();
                            } else {
                                e.returnValue = false;
                            }
                            if (e.keyCode === 37) {
                                $el.goToPrevSlide();
                            } else if (e.keyCode === 39) {
                                $el.goToNextSlide();
                            }
                        }
                    });
                }
            },
            controls: function () {
                if (settings.controls) {
                    $el.after('<div class="lSAction"><a class="lSPrev">' + settings.prevHtml + '</a><a class="lSNext">' + settings.nextHtml + '</a></div>');
                    if (!settings.autoWidth) {
                        if (length <= settings.item) {
                            $slide.find('.lSAction').hide();
                        }
                    } else {
                        if (refresh.calWidth(false) < elSize) {
                            $slide.find('.lSAction').hide();
                        }
                    }
                    $slide.find('.lSAction a').on('click', function (e) {
                        if (e.preventDefault) {
                            e.preventDefault();
                        } else {
                            e.returnValue = false;
                        }
                        if ($(this).attr('class') === 'lSPrev') {
                            $el.goToPrevSlide();
                        } else {
                            $el.goToNextSlide();
                        }
                        return false;
                    });
                }
            },
            initialStyle: function () {
                var $this = this;
                if (settings.mode === 'fade') {
                    settings.autoWidth = false;
                    settings.slideEndAnimation = false;
                }
                if (settings.auto) {
                    settings.slideEndAnimation = false;
                }
                if (settings.autoWidth) {
                    settings.slideMove = 1;
                    settings.item = 1;
                }
                if (settings.loop) {
                    settings.slideMove = 1;
                    settings.freeMove = false;
                }
                settings.onBeforeStart.call(this, $el);
                refresh.chbreakpoint();
                $el.addClass('lightSlider').wrap('<div class="lSSlideOuter ' + settings.addClass + '"><div class="lSSlideWrapper"></div></div>');
                $slide = $el.parent('.lSSlideWrapper');
                if (settings.rtl === true) {
                    $slide.parent().addClass('lSrtl');
                }
                if (settings.vertical) {
                    $slide.parent().addClass('vertical');
                    elSize = settings.verticalHeight;
                    $slide.css('height', elSize + 'px');
                } else {
                    elSize = $el.outerWidth();
                }
                $children.addClass('lslide');
                if (settings.loop === true && settings.mode === 'slide') {
                    refresh.calSW();
                    refresh.clone = function () {
                        if (refresh.calWidth(true) > elSize) {
                            /**/
                            var tWr = 0,
                                tI = 0;
                            for (var k = 0; k < $children.length; k++) {
                                tWr += (parseInt($el.find('.lslide').eq(k).width()) + settings.slideMargin);
                                tI++;
                                if (tWr >= (elSize + settings.slideMargin)) {
                                    break;
                                }
                            }
                            var tItem = settings.autoWidth === true ? tI : settings.item;

                            /**/
                            if (tItem < $el.find('.clone.left').length) {
                                for (var i = 0; i < $el.find('.clone.left').length - tItem; i++) {
                                    $children.eq(i).remove();
                                }
                            }
                            if (tItem < $el.find('.clone.right').length) {
                                for (var j = $children.length - 1; j > ($children.length - 1 - $el.find('.clone.right').length); j--) {
                                    scene--;
                                    $children.eq(j).remove();
                                }
                            }
                            /**/
                            for (var n = $el.find('.clone.right').length; n < tItem; n++) {
                                $el.find('.lslide').eq(n).clone().removeClass('lslide').addClass('clone right').appendTo($el);
                                scene++;
                            }
                            for (var m = $el.find('.lslide').length - $el.find('.clone.left').length; m > ($el.find('.lslide').length - tItem); m--) {
                                $el.find('.lslide').eq(m - 1).clone().removeClass('lslide').addClass('clone left').prependTo($el);
                            }
                            $children = $el.children();
                        } else {
                            if ($children.hasClass('clone')) {
                                $el.find('.clone').remove();
                                $this.move($el, 0);
                            }
                        }
                    };
                    refresh.clone();
                }
                refresh.sSW = function () {
                    length = $children.length;
                    if (settings.rtl === true && settings.vertical === false) {
                        gutter = 'margin-left';
                    }
                    if (settings.autoWidth === false) {
                        $children.css(property, slideWidth + 'px');
                    }
                    $children.css(gutter, settings.slideMargin + 'px');
                    w = refresh.calWidth(false);
                    $el.css(property, w + 'px');
                    if (settings.loop === true && settings.mode === 'slide') {
                        if (on === false) {
                            scene = $el.find('.clone.left').length;
                        }
                    }
                };
                refresh.calL = function () {
                    $children = $el.children();
                    length = $children.length;
                };
                if (this.doCss()) {
                    $slide.addClass('usingCss');
                }
                refresh.calL();
                if (settings.mode === 'slide') {
                    refresh.calSW();
                    refresh.sSW();
                    if (settings.loop === true) {
                        slideValue = $this.slideValue();
                        this.move($el, slideValue);
                    }
                    if (settings.vertical === false) {
                        this.setHeight($el, false);
                    }

                } else {
                    this.setHeight($el, true);
                    $el.addClass('lSFade');
                    if (!this.doCss()) {
                        $children.fadeOut(0);
                        $children.eq(scene).fadeIn(0);
                    }
                }
                if (settings.loop === true && settings.mode === 'slide') {
                    $children.eq(scene).addClass('active');
                } else {
                    $children.first().addClass('active');
                }
            },
            pager: function () {
                var $this = this;
                refresh.createPager = function () {
                    thumbWidth = (elSize - ((settings.thumbItem * (settings.thumbMargin)) - settings.thumbMargin)) / settings.thumbItem;
                    var $children = $slide.find('.lslide');
                    var length = $slide.find('.lslide').length;
                    var i = 0,
                        pagers = '',
                        v = 0;
                    for (i = 0; i < length; i++) {
                        if (settings.mode === 'slide') {
                            // calculate scene * slide value
                            if (!settings.autoWidth) {
                                v = i * ((slideWidth + settings.slideMargin) * settings.slideMove);
                            } else {
                                v += ((parseInt($children.eq(i).width()) + settings.slideMargin) * settings.slideMove);
                            }
                        }
                        var thumb = $children.eq(i * settings.slideMove).attr('data-thumb');
                        if (settings.gallery === true) {
                            pagers += '<li style="width:100%;' + property + ':' + thumbWidth + 'px;' + gutter + ':' + settings.thumbMargin + 'px"><a href="#"><img src="' + thumb + '" /></a></li>';
                        } else {
                            pagers += '<li><a href="#">' + (i + 1) + '</a></li>';
                        }
                        if (settings.mode === 'slide') {
                            if ((v) >= w - elSize - settings.slideMargin) {
                                i = i + 1;
                                var minPgr = 2;
                                if (settings.autoWidth) {
                                    pagers += '<li><a href="#">' + (i + 1) + '</a></li>';
                                    minPgr = 1;
                                }
                                if (i < minPgr) {
                                    pagers = null;
                                    $slide.parent().addClass('noPager');
                                } else {
                                    $slide.parent().removeClass('noPager');
                                }
                                break;
                            }
                        }
                    }
                    var $cSouter = $slide.parent();
                    $cSouter.find('.lSPager').html(pagers);
                    if (settings.gallery === true) {
                        if (settings.vertical === true) {
                            // set Gallery thumbnail width
                            $cSouter.find('.lSPager').css('width', settings.vThumbWidth + 'px');
                        }
                        pagerWidth = (i * (settings.thumbMargin + thumbWidth)) + 0.5;
                        $cSouter.find('.lSPager').css({
                            property: pagerWidth + 'px',
                            'transition-duration': settings.speed + 'ms'
                        });
                        if (settings.vertical === true) {
                            $slide.parent().css('padding-right', (settings.vThumbWidth + settings.galleryMargin) + 'px');
                        }
                        $cSouter.find('.lSPager').css(property, pagerWidth + 'px');
                    }
                    var $pager = $cSouter.find('.lSPager').find('li');
                    $pager.first().addClass('active');
                    $pager.on('click', function () {
                        if (settings.loop === true && settings.mode === 'slide') {
                            scene = scene + ($pager.index(this) - $cSouter.find('.lSPager').find('li.active').index());
                        } else {
                            scene = $pager.index(this);
                        }
                        $el.mode(false);
                        if (settings.gallery === true) {
                            $this.slideThumb();
                        }
                        return false;
                    });
                };
                if (settings.pager) {
                    var cl = 'lSpg';
                    if (settings.gallery) {
                        cl = 'lSGallery';
                    }
                    $slide.after('<ul class="lSPager ' + cl + '"></ul>');
                    var gMargin = (settings.vertical) ? 'margin-left' : 'margin-top';
                    $slide.parent().find('.lSPager').css(gMargin, settings.galleryMargin + 'px');
                    refresh.createPager();
                }

                setTimeout(function () {
                    refresh.init();
                }, 0);
            },
            setHeight: function (ob, fade) {
                var obj = null,
                    $this = this;
                if (settings.loop) {
                    obj = ob.children('.lslide ').first();
                } else {
                    obj = ob.children().first();
                }
                var setCss = function () {
                    var tH = obj.outerHeight(),
                        tP = 0,
                        tHT = tH;
                    if (fade) {
                        tH = 0;
                        tP = ((tHT) * 100) / elSize;
                    }
                    ob.css({
                        'height': tH + 'px',
                        'padding-bottom': tP + '%'
                    });
                };
                setCss();
                if (obj.find('img').length) {
                    if (obj.find('img')[0].complete) {
                        setCss();
                        if (!interval) {
                            $this.auto();
                        }
                    } else {
                        obj.find('img').on('load', function () {
                            setTimeout(function () {
                                setCss();
                                if (!interval) {
                                    $this.auto();
                                }
                            }, 100);
                        });
                    }
                } else {
                    if (!interval) {
                        $this.auto();
                    }
                }
            },
            active: function (ob, t) {
                if (this.doCss() && settings.mode === 'fade') {
                    $slide.addClass('on');
                }
                var sc = 0;
                if (scene * settings.slideMove < length) {
                    ob.removeClass('active');
                    if (!this.doCss() && settings.mode === 'fade' && t === false) {
                        ob.fadeOut(settings.speed);
                    }
                    if (t === true) {
                        sc = scene;
                    } else {
                        sc = scene * settings.slideMove;
                    }
                    //t === true ? sc = scene : sc = scene * settings.slideMove;
                    var l, nl;
                    if (t === true) {
                        l = ob.length;
                        nl = l - 1;
                        if (sc + 1 >= l) {
                            sc = nl;
                        }
                    }
                    if (settings.loop === true && settings.mode === 'slide') {
                        //t === true ? sc = scene - $el.find('.clone.left').length : sc = scene * settings.slideMove;
                        if (t === true) {
                            sc = scene - $el.find('.clone.left').length;
                        } else {
                            sc = scene * settings.slideMove;
                        }
                        if (t === true) {
                            l = ob.length;
                            nl = l - 1;
                            if (sc + 1 === l) {
                                sc = nl;
                            } else if (sc + 1 > l) {
                                sc = 0;
                            }
                        }
                    }

                    if (!this.doCss() && settings.mode === 'fade' && t === false) {
                        ob.eq(sc).fadeIn(settings.speed);
                    }
                    ob.eq(sc).addClass('active');
                } else {
                    ob.removeClass('active');
                    ob.eq(ob.length - 1).addClass('active');
                    if (!this.doCss() && settings.mode === 'fade' && t === false) {
                        ob.fadeOut(settings.speed);
                        ob.eq(sc).fadeIn(settings.speed);
                    }
                }
            },
            move: function (ob, v) {
                if (settings.rtl === true) {
                    v = -v;
                }
                if (this.doCss()) {
                    if (settings.vertical === true) {
                        ob.css({
                            'transform': 'translate3d(0px, ' + (-v) + 'px, 0px)',
                            '-webkit-transform': 'translate3d(0px, ' + (-v) + 'px, 0px)'
                        });
                    } else {
                        ob.css({
                            'transform': 'translate3d(' + (-v) + 'px, 0px, 0px)',
                            '-webkit-transform': 'translate3d(' + (-v) + 'px, 0px, 0px)',
                        });
                    }
                } else {
                    if (settings.vertical === true) {
                        ob.css('position', 'relative').animate({
                            top: -v + 'px'
                        }, settings.speed, settings.easing);
                    } else {
                        ob.css('position', 'relative').animate({
                            left: -v + 'px'
                        }, settings.speed, settings.easing);
                    }
                }
                var $thumb = $slide.parent().find('.lSPager').find('li');
                this.active($thumb, true);
            },
            fade: function () {
                this.active($children, false);
                var $thumb = $slide.parent().find('.lSPager').find('li');
                this.active($thumb, true);
            },
            slide: function () {
                var $this = this;
                refresh.calSlide = function () {
                    if (w > elSize) {
                        slideValue = $this.slideValue();
                        $this.active($children, false);
                        if ((slideValue) > w - elSize - settings.slideMargin) {
                            slideValue = w - elSize - settings.slideMargin;
                        } else if (slideValue < 0) {
                            slideValue = 0;
                        }
                        $this.move($el, slideValue);
                        if (settings.loop === true && settings.mode === 'slide') {
                            if (scene >= (length - ($el.find('.clone.left').length / settings.slideMove))) {
                                $this.resetSlide($el.find('.clone.left').length);
                            }
                            if (scene === 0) {
                                $this.resetSlide($slide.find('.lslide').length);
                            }
                        }
                    }
                };
                refresh.calSlide();
            },
            resetSlide: function (s) {
                var $this = this;
                $slide.find('.lSAction a').addClass('disabled');
                setTimeout(function () {
                    scene = s;
                    $slide.css('transition-duration', '0ms');
                    slideValue = $this.slideValue();
                    $this.active($children, false);
                    plugin.move($el, slideValue);
                    setTimeout(function () {
                        $slide.css('transition-duration', settings.speed + 'ms');
                        $slide.find('.lSAction a').removeClass('disabled');
                    }, 50);
                }, settings.speed + 100);
            },
            slideValue: function () {
                var _sV = 0;
                if (settings.autoWidth === false) {
                    _sV = scene * ((slideWidth + settings.slideMargin) * settings.slideMove);
                } else {
                    _sV = 0;
                    for (var i = 0; i < scene; i++) {
                        _sV += (parseInt($children.eq(i).width()) + settings.slideMargin);
                    }
                }
                return _sV;
            },
            slideThumb: function () {
                var position;
                switch (settings.currentPagerPosition) {
                    case 'left':
                        position = 0;
                        break;
                    case 'middle':
                        position = (elSize / 2) - (thumbWidth / 2);
                        break;
                    case 'right':
                        position = elSize - thumbWidth;
                }
                var sc = scene - $el.find('.clone.left').length;
                var $pager = $slide.parent().find('.lSPager');
                if (settings.mode === 'slide' && settings.loop === true) {
                    if (sc >= $pager.children().length) {
                        sc = 0;
                    } else if (sc < 0) {
                        sc = $pager.children().length;
                    }
                }
                var thumbSlide = sc * ((thumbWidth + settings.thumbMargin)) - (position);
                if ((thumbSlide + elSize) > pagerWidth) {
                    thumbSlide = pagerWidth - elSize - settings.thumbMargin;
                }
                if (thumbSlide < 0) {
                    thumbSlide = 0;
                }
                this.move($pager, thumbSlide);
            },
            auto: function () {
                if (settings.auto) {
                    clearInterval(interval);
                    interval = setInterval(function () {
                        $el.goToNextSlide();
                    }, settings.pause);
                }
            },
            pauseOnHover: function () {
                var $this = this;
                if (settings.auto && settings.pauseOnHover) {
                    $slide.on('mouseenter', function () {
                        $(this).addClass('ls-hover');
                        $el.pause();
                        settings.auto = true;
                    });
                    $slide.on('mouseleave', function () {
                        $(this).removeClass('ls-hover');
                        if (!$slide.find('.lightSlider').hasClass('lsGrabbing')) {
                            $this.auto();
                        }
                    });
                }
            },
            touchMove: function (endCoords, startCoords) {
                $slide.css('transition-duration', '0ms');
                if (settings.mode === 'slide') {
                    var distance = endCoords - startCoords;
                    var swipeVal = slideValue - distance;
                    if ((swipeVal) >= w - elSize - settings.slideMargin) {
                        if (settings.freeMove === false) {
                            swipeVal = w - elSize - settings.slideMargin;
                        } else {
                            var swipeValT = w - elSize - settings.slideMargin;
                            swipeVal = swipeValT + ((swipeVal - swipeValT) / 5);

                        }
                    } else if (swipeVal < 0) {
                        if (settings.freeMove === false) {
                            swipeVal = 0;
                        } else {
                            swipeVal = swipeVal / 5;
                        }
                    }
                    this.move($el, swipeVal);
                }
            },

            touchEnd: function (distance) {
                $slide.css('transition-duration', settings.speed + 'ms');
                if (settings.mode === 'slide') {
                    var mxVal = false;
                    var _next = true;
                    if (settings.rtl === true) { distance = -distance; }
                    slideValue = slideValue - distance;
                    if ((slideValue) > w - elSize - settings.slideMargin) {
                        slideValue = w - elSize - settings.slideMargin;
                        if (settings.autoWidth === false) {
                            mxVal = true;
                        }
                    } else if (slideValue < 0) {
                        slideValue = 0;
                    }
                    var gC = function (next) {
                        var ad = 0;
                        if (!mxVal) {
                            if (next) {
                                ad = 1;
                            }
                        }
                        if (!settings.autoWidth) {
                            var num = slideValue / ((slideWidth + settings.slideMargin) * settings.slideMove);
                            scene = parseInt(num) + ad;
                            if (slideValue >= (w - elSize - settings.slideMargin)) {
                                if (num % 1 !== 0) {
                                    scene++;
                                }
                            }
                        } else {
                            var tW = 0;
                            for (var i = 0; i < $children.length; i++) {
                                tW += (parseInt($children.eq(i).width()) + settings.slideMargin);
                                scene = i + ad;
                                if (tW >= slideValue) {
                                    break;
                                }
                            }
                        }
                    };
                    if (distance >= settings.swipeThreshold) {
                        gC(false);
                        _next = false;
                    } else if (distance <= -settings.swipeThreshold) {
                        gC(true);
                        _next = false;
                    }
                    $el.mode(_next);
                    this.slideThumb();
                } else {
                    if (distance >= settings.swipeThreshold) {
                        $el.goToPrevSlide();
                    } else if (distance <= -settings.swipeThreshold) {
                        $el.goToNextSlide();
                    }
                }
            },



            enableDrag: function () {
                var $this = this;
                if (!isTouch) {
                    var startCoords = 0,
                        endCoords = 0,
                        isDraging = false;
                    $slide.find('.lightSlider').addClass('lsGrab');
                    $slide.on('mousedown', function (e) {
                        if (w < elSize) {
                            if (w !== 0) {
                                return false;
                            }
                        }
                        if ($(e.target).attr('class') !== ('lSPrev') && $(e.target).attr('class') !== ('lSNext')) {
                            startCoords = (settings.vertical === true) ? e.pageY : e.pageX;
                            isDraging = true;
                            if (e.preventDefault) {
                                e.preventDefault();
                            } else {
                                e.returnValue = false;
                            }
                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
                            $slide.scrollLeft += 1;
                            $slide.scrollLeft -= 1;
                            // *
                            $slide.find('.lightSlider').removeClass('lsGrab').addClass('lsGrabbing');
                            clearInterval(interval);
                        }
                    });
                    $(window).on('mousemove', function (e) {
                        if (isDraging) {
                            endCoords = (settings.vertical === true) ? e.pageY : e.pageX;
                            $this.touchMove(endCoords, startCoords);
                            if (settings.rtl === true) {
                                $this.touchMove(startCoords, endCoords);
                            } else {
                                $this.touchMove(endCoords, startCoords);
                            }
                        }
                    });
                    $(window).on('mouseup', function (e) {
                        if (isDraging) {
                            $slide.find('.lightSlider').removeClass('lsGrabbing').addClass('lsGrab');
                            isDraging = false;
                            endCoords = (settings.vertical === true) ? e.pageY : e.pageX;
                            var distance = endCoords - startCoords;
                            if (Math.abs(distance) >= settings.swipeThreshold) {
                                $(window).on('click.ls', function (e) {
                                    if (e.preventDefault) {
                                        e.preventDefault();
                                    } else {
                                        e.returnValue = false;
                                    }
                                    e.stopImmediatePropagation();
                                    e.stopPropagation();
                                    $(window).off('click.ls');
                                });
                            }

                            $this.touchEnd(distance);

                        }
                    });
                }
            },




            enableTouch: function () {
                var $this = this;
                if (isTouch) {
                    var startCoords = {},
                        endCoords = {};
                    $slide.on('touchstart', function (e) {
                        endCoords = e.originalEvent.targetTouches[0];
                        startCoords.pageX = e.originalEvent.targetTouches[0].pageX;
                        startCoords.pageY = e.originalEvent.targetTouches[0].pageY;
                        clearInterval(interval);
                    });
                    $slide.on('touchmove', function (e) {
                        if (w < elSize) {
                            if (w !== 0) {
                                return false;
                            }
                        }
                        var orig = e.originalEvent;
                        endCoords = orig.targetTouches[0];
                        var xMovement = Math.abs(endCoords.pageX - startCoords.pageX);
                        var yMovement = Math.abs(endCoords.pageY - startCoords.pageY);
                        if (settings.vertical === true) {
                            if ((yMovement * 3) > xMovement) {
                                e.preventDefault();
                            }
                            $this.touchMove(endCoords.pageY, startCoords.pageY);
                        } else {
                            if ((xMovement * 3) > yMovement) {
                                e.preventDefault();
                            }
                            $this.touchMove(endCoords.pageX, startCoords.pageX);
                        }

                    });
                    $slide.on('touchend', function () {
                        if (w < elSize) {
                            if (w !== 0) {
                                return false;
                            }
                        }
                        var distance;
                        if (settings.vertical === true) {
                            distance = endCoords.pageY - startCoords.pageY;
                        } else {
                            distance = endCoords.pageX - startCoords.pageX;
                        }
                        $this.touchEnd(distance);
                    });
                }
            },
            build: function () {
                var $this = this;
                $this.initialStyle();
                if (this.doCss()) {

                    if (settings.enableTouch === true) {
                        $this.enableTouch();
                    }
                    if (settings.enableDrag === true) {
                        $this.enableDrag();
                    }
                }

                $(window).on('focus', function () {
                    $this.auto();
                });

                $(window).on('blur', function () {
                    clearInterval(interval);
                });

                $this.pager();
                $this.pauseOnHover();
                $this.controls();
                $this.keyPress();
            }
        };
        plugin.build();
        refresh.init = function () {
            refresh.chbreakpoint();
            if (settings.vertical === true) {
                if (settings.item > 1) {
                    elSize = settings.verticalHeight;
                } else {
                    elSize = $children.outerHeight();
                }
                $slide.css('height', elSize + 'px');
            } else {
                elSize = $slide.outerWidth();
            }
            if (settings.loop === true && settings.mode === 'slide') {
                refresh.clone();
            }
            refresh.calL();
            if (settings.mode === 'slide') {
                $el.removeClass('lSSlide');
            }
            if (settings.mode === 'slide') {
                refresh.calSW();
                refresh.sSW();
            }
            setTimeout(function () {
                if (settings.mode === 'slide') {
                    $el.addClass('lSSlide');
                }
            }, 1000);
            if (settings.pager) {
                refresh.createPager();
            }
            if (settings.adaptiveHeight === true && settings.vertical === false) {
                $el.css('height', $children.eq(scene).outerHeight(true));
            }
            if (settings.adaptiveHeight === false) {
                if (settings.mode === 'slide') {
                    if (settings.vertical === false) {
                        plugin.setHeight($el, false);
                    } else {
                        plugin.auto();
                    }
                } else {
                    plugin.setHeight($el, true);
                }
            }
            if (settings.gallery === true) {
                plugin.slideThumb();
            }
            if (settings.mode === 'slide') {
                plugin.slide();
            }
            if (settings.autoWidth === false) {
                if ($children.length <= settings.item) {
                    $slide.find('.lSAction').hide();
                } else {
                    $slide.find('.lSAction').show();
                }
            } else {
                if ((refresh.calWidth(false) < elSize) && (w !== 0)) {
                    $slide.find('.lSAction').hide();
                } else {
                    $slide.find('.lSAction').show();
                }
            }
        };
        $el.goToPrevSlide = function () {
            if (scene > 0) {
                settings.onBeforePrevSlide.call(this, $el, scene);
                scene--;
                $el.mode(false);
                if (settings.gallery === true) {
                    plugin.slideThumb();
                }
            } else {
                if (settings.loop === true) {
                    settings.onBeforePrevSlide.call(this, $el, scene);
                    if (settings.mode === 'fade') {
                        var l = (length - 1);
                        scene = parseInt(l / settings.slideMove);
                    }
                    $el.mode(false);
                    if (settings.gallery === true) {
                        plugin.slideThumb();
                    }
                } else if (settings.slideEndAnimation === true) {
                    $el.addClass('leftEnd');
                    setTimeout(function () {
                        $el.removeClass('leftEnd');
                    }, 400);
                }
            }
        };
        $el.goToNextSlide = function () {
            var nextI = true;
            if (settings.mode === 'slide') {
                var _slideValue = plugin.slideValue();
                nextI = _slideValue < w - elSize - settings.slideMargin;
            }
            if (((scene * settings.slideMove) < length - settings.slideMove) && nextI) {
                settings.onBeforeNextSlide.call(this, $el, scene);
                scene++;
                $el.mode(false);
                if (settings.gallery === true) {
                    plugin.slideThumb();
                }
            } else {
                if (settings.loop === true) {
                    settings.onBeforeNextSlide.call(this, $el, scene);
                    scene = 0;
                    $el.mode(false);
                    if (settings.gallery === true) {
                        plugin.slideThumb();
                    }
                } else if (settings.slideEndAnimation === true) {
                    $el.addClass('rightEnd');
                    setTimeout(function () {
                        $el.removeClass('rightEnd');
                    }, 400);
                }
            }
        };
        $el.mode = function (_touch) {
            if (settings.adaptiveHeight === true && settings.vertical === false) {
                $el.css('height', $children.eq(scene).outerHeight(true));
            }
            if (on === false) {
                if (settings.mode === 'slide') {
                    if (plugin.doCss()) {
                        $el.addClass('lSSlide');
                        if (settings.speed !== '') {
                            $slide.css('transition-duration', settings.speed + 'ms');
                        }
                        if (settings.cssEasing !== '') {
                            $slide.css('transition-timing-function', settings.cssEasing);
                        }
                    }
                } else {
                    if (plugin.doCss()) {
                        if (settings.speed !== '') {
                            $el.css('transition-duration', settings.speed + 'ms');
                        }
                        if (settings.cssEasing !== '') {
                            $el.css('transition-timing-function', settings.cssEasing);
                        }
                    }
                }
            }
            if (!_touch) {
                settings.onBeforeSlide.call(this, $el, scene);
            }
            if (settings.mode === 'slide') {
                plugin.slide();
            } else {
                plugin.fade();
            }
            if (!$slide.hasClass('ls-hover')) {
                plugin.auto();
            }
            setTimeout(function () {
                if (!_touch) {
                    settings.onAfterSlide.call(this, $el, scene);
                }
            }, settings.speed);
            on = true;
        };
        $el.play = function () {
            $el.goToNextSlide();
            settings.auto = true;
            plugin.auto();
        };
        $el.pause = function () {
            settings.auto = false;
            clearInterval(interval);
        };
        $el.refresh = function () {
            refresh.init();
        };
        $el.getCurrentSlideCount = function () {
            var sc = scene;
            if (settings.loop) {
                var ln = $slide.find('.lslide').length,
                    cl = $el.find('.clone.left').length;
                if (scene <= cl - 1) {
                    sc = ln + (scene - cl);
                } else if (scene >= (ln + cl)) {
                    sc = scene - ln - cl;
                } else {
                    sc = scene - cl;
                }
            }
            return sc + 1;
        };
        $el.getTotalSlideCount = function () {
            return $slide.find('.lslide').length;
        };
        $el.goToSlide = function (s) {
            if (settings.loop) {
                scene = (s + $el.find('.clone.left').length - 1);
            } else {
                scene = s;
            }
            $el.mode(false);
            if (settings.gallery === true) {
                plugin.slideThumb();
            }
        };
        $el.destroy = function () {
            if ($el.lightSlider) {
                $el.goToPrevSlide = function () { };
                $el.goToNextSlide = function () { };
                $el.mode = function () { };
                $el.play = function () { };
                $el.pause = function () { };
                $el.refresh = function () { };
                $el.getCurrentSlideCount = function () { };
                $el.getTotalSlideCount = function () { };
                $el.goToSlide = function () { };
                $el.lightSlider = null;
                refresh = {
                    init: function () { }
                };
                $el.parent().parent().find('.lSAction, .lSPager').remove();
                $el.removeClass('lightSlider lSFade lSSlide lsGrab lsGrabbing leftEnd right').removeAttr('style').unwrap().unwrap();
                $el.children().removeAttr('style');
                $children.removeClass('lslide active');
                $el.find('.clone').remove();
                $children = null;
                interval = null;
                on = false;
                scene = 0;
            }

        };
        setTimeout(function () {
            settings.onSliderLoad.call(this, $el);
        }, 10);
        $(window).on('resize orientationchange', function (e) {
            setTimeout(function () {
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                }
                refresh.init();
            }, 200);
        });
        return this;
    };
}(jQuery));

$(document).ready(function () {
    $('.slider-down-button span').click(function () {

        $('html, body').animate({
            scrollTop: $('#features').offset().top
        }, 600);

    });

    $('.boxes-section .boxes-container .box').click(function () {

        let url = $(this).find('.box-button').attr('href');
        window.location.href = url;

    });
});

+function () {
    // window.consolestop = false;

    $(document).ready(function () {

        if (document.getElementsByClassName('js-compare-table__header').length) {
            var jsCompareTableCollapse = document.getElementsByClassName('js-compare-table__collapse'),
                i,
                jsPlanTable = document.getElementsByClassName('js-plan-table')[0],
                jsCompareTable = document.getElementsByClassName('js-compare-table')[0],
                jsChooseUserButtons = document.getElementsByClassName('js-choose-users-buttons'),
                jsCompareTableHeader = document.getElementsByClassName('js-compare-table__header')[0],
                jsCompareTableBody = document.getElementsByClassName('js-compare-table__body')[0],
                compareTableRow = document.querySelectorAll('.js-compare-table__body .o-compare-table__row:last-child')[0],
                documentBody = document.documentElement || document.body.parentNode || document.body,
                hasOffset = window.pageYOffset !== undefined,
                previousState = 0,  // 1 - down, 2 - up
                previousStateAbs = 0,  // 1 - down, 2 - up
                spacer = 0,
                scrollTop,
                countColumnsPlanTable = document.querySelectorAll('.js-plan-table .o-plan-table__row:not(.o-plan-table__row--current) .o-plan-table__col:not(.o-plan-table__col--current)').length;

            $('#userSelect').on('change', function () {
                var val = $(this).val();
                var price = $(this).find('option[value="' + val + '"]').attr('data-price');
                var prices = price.split(',');

                var pricesLength = prices.length;
                for (var i = 0; i < pricesLength; i++) {
                    $('.js-plan-table__price-' + (i + 1)).text(prices[i]);
                }
            });

            for (i = 0; i < jsChooseUserButtons.length; ++i) {
                jsChooseUserButtons[i].addEventListener('click', function () {
                    var dataHideColumn = this.getAttribute('data-hide-column'),
                        dataPrice = this.getAttribute('data-price');

                    // set empty array or split string to array
                    dataHideColumn = dataHideColumn ? dataHideColumn.split(',') : [];
                    dataPrice = dataPrice ? dataPrice.split(',') : [];

                    // convert string to number
                    for (var hc = 0; hc < dataHideColumn.length; ++hc) {
                        dataHideColumn[hc] = parseInt(dataHideColumn[hc]);
                    }

                    // if we show again overview/default, return everything to default state
                    if (countColumnsPlanTable - dataHideColumn.length < 3) {
                        jsPlanTable.classList.add('o-plan-table--separate');
                        jsCompareTable.classList.add('o-compare-table--separate');
                    }
                    else {
                        jsPlanTable.classList.remove('o-plan-table--separate');
                        jsCompareTable.classList.remove('o-compare-table--separate');
                    }

                    // remove active on all buttons and add on current button
                    for (var t = 0; t < jsChooseUserButtons.length; ++t) {
                        jsChooseUserButtons[t].classList.remove('is-active');
                    }
                    this.classList.add('is-active');

                    // add/remove hidden from all cols
                    for (y = 1; y <= countColumnsPlanTable; ++y) {
                        if (hasValue(y, dataHideColumn)) {
                            var hideElements = document.getElementsByClassName('js-plan-table__col-' + y);

                            for (var h = 0; h < hideElements.length; ++h) {
                                hideElements[h].classList.add('is-hidden');
                            }

                            hideElements = null;
                        }
                        else {
                            var showElements = document.getElementsByClassName('js-plan-table__col-' + y);

                            for (var s = 0; s < showElements.length; ++s) {
                                showElements[s].classList.remove('is-hidden');
                            }

                            showElements = null;
                        }

                        // change prices for all price elements per column
                        var priceElement = document.getElementsByClassName('js-plan-table__price-' + y);
                        for (var p = 0; p < priceElement.length; ++p) {
                            priceElement[p].innerHTML = dataPrice[y - 1]; // -1 because dataPrice start with zero index
                        }

                        priceElement = null;
                    }
                });
            }

            var bodyPadding = function () {
                var bodyPaddingTop = parseInt(window.getComputedStyle(document.body).paddingTop);
                if (document.getElementsByClassName('o-sub-menu--hidden').length) {
                    return bodyPaddingTop - 100;
                }

                return bodyPaddingTop;
            };

            var jsCompareTableBottom = compareTableBottom();

            compareTableCollapse(jsCompareTableCollapse, jsCompareTableBottom);

            window.onscroll = function (e) {
                var oHeaderInner = document.getElementsByClassName('o-header__inner')[0];

                // cross-browser compatible scrollTop.
                scrollTop = hasOffset ? window.pageYOffset : documentBody.scrollTop;

                if (jsCompareTableBody.getBoundingClientRect().top - jsCompareTableHeader.offsetHeight - bodyPadding() <= 0) {
                    if (previousState === 0 || previousState === 2) {
                        jsCompareTableHeader.style.bottom = 'initial';
                        jsCompareTableHeader.classList.toggle('is-fixed');
                        jsCompareTableBody.classList.toggle('is-fixed');
                        previousState = 1;
                    }

                    if (!jsCompareTableHeader.classList.contains('is-absoluted')) {
                        jsCompareTableHeader.style.top = oHeaderInner.offsetHeight + 'px';
                    }

                    if (previousState === 1 && jsCompareTableBody.getBoundingClientRect().bottom <= jsCompareTableHeader.offsetHeight + 150 + bodyPadding()) {
                        if (previousStateAbs === 0 || previousStateAbs === 2) {
                            jsCompareTableHeader.classList.toggle('is-absoluted');
                            jsCompareTableHeader.style.top = 'initial';
                            jsCompareTableHeader.style.bottom = '98px';
                            previousStateAbs = 1;
                        }
                    }
                    else {
                        if (previousStateAbs === 1) {
                            jsCompareTableHeader.classList.toggle('is-absoluted');
                            jsCompareTableHeader.style.top = 0;
                            jsCompareTableHeader.style.bottom = 'initial';
                            previousStateAbs = 0;
                        }
                    }
                } else {
                    if (previousState === 1) {
                        jsCompareTableHeader.classList.toggle('is-fixed');
                        jsCompareTableBody.classList.toggle('is-fixed');
                        previousState = 2;
                    }
                }
            };

        }
        else if (document.getElementsByClassName('js-compare-table__collapse').length) {
            compareTableCollapse(document.getElementsByClassName('js-compare-table__collapse'));
        }

        function outerHeight(elem) {
            var curStyle = elem.currentStyle || window.getComputedStyle(elem);
            var outerHeight = elem.offsetHeight;
            outerHeight += parseInt(curStyle.marginTop);
            outerHeight += parseInt(curStyle.marginBottom);

            return outerHeight;
        }

        function compareTableBottom() {
            var oHeader = document.getElementsByClassName('o-header')[0];
            return $(jsCompareTableBody).offset().top + spacer + jsCompareTableBody.offsetHeight - compareTableRow.offsetHeight - jsCompareTableHeader.offsetHeight - oHeader.offsetHeight;
        }

        function compareTableCollapse(elCollapse, bottom) {
            for (i = 0; i < elCollapse.length; ++i) {
                elCollapse[i].addEventListener('click', function () {
                    this.classList.toggle('is-collapsed');
                    this.nextElementSibling.classList.toggle('is-collapsed');

                    if (bottom) {
                        bottom = compareTableBottom();
                    }
                });
            }
        }

        function hasValue(val, arr) {
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] === val) return true;
            }
            return false;
        }

    });

}();




+ (function () {
    // window.consolestop = false;
    // Check https://jquery.com/ for the current version
    var redeignedSelector = $("#redesigned");

    $(document).ready(function () {


        $("#downloads-main-order_id").on('change input', $.debounce(1000, function () {
            let value = $(this).val();
            let id = $(this).attr("id");
            let url = $(this).data("url");
            validateInput(value, id, url);
        }));

        function validateInput(value, id, url) {
            console.log('xy', url);
            if (value.length > 0) {
                let data = {};
                data["order_id"] = value;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    beforeSend: function () {
                        $("#downloads-main-button-submit").prop("disabled", true);
                        $("#downloads-main-input-success").addClass("hidden");
                        $("#downloads-main-input-loader").removeClass("hidden");
                    },
                    success: function (data) {
                        $("#downloads-main-input-loader").addClass("hidden");

                        if (data.status === 0) {
                            $("#downloads-main-button-submit").prop("disabled", true);
                            $("#downloads-main-input-error").removeClass("hidden");
                        }
                        if (data.status === 1) {
                            $("#downloads-main-button-submit").prop("disabled", false);
                            $("#downloads-main-input-error").addClass("hidden");
                            $("#downloads-main-input-success").removeClass("hidden");
                        }
                    },
                    error: function () {
                        $("#downloads-main-input-loader").addClass("hidden");
                        $("#downloads-main-button-submit").prop("disabled", true);
                    },
                });
            }
        }

        $("#downloads-main-button-submit").click(function () {
            let value = $("#downloads-main-order_id").val();
            let url = $(this).data("url") + value;
            console.log(url);
            window.location.href = url;
        });

        (function () {
            var setAnchorHref = function (value) {
                var el = $(this);
                var parentItem = el.parents(".js-download-card__item");
                var anchor = $(".js-download-link", parentItem);

                anchor.attr("href", value);
            };

            $(".js-download-select", redeignedSelector).on("change", function () {
                var value = $(this).val();
                setAnchorHref.call(this, value);
            });

            $(".js-download-o-dropdown__option", redeignedSelector).on(
                "click",
                function () {
                    var value = $(this).attr("data-value");
                    setAnchorHref.call(this, value);
                }
            );

            (function () {
                var items = $(".js-download-card__item", redeignedSelector);

                for (var i = 0; i < items.length; i++) {
                    var item = $(items[i]);

                    var firstSelect = $($(".js-download-select", item)[0]);
                    var value = firstSelect.val();
                    var dataValue = firstSelect.attr("data-value");
                    if (value == "#" && dataValue && dataValue != "#") {
                        value = dataValue;
                    }

                    var anchor = $(".js-download-link", item);

                    anchor.attr("href", value);
                }
            })();
        })();
    });
})();

'use strict';
async function renderStripe(token, chosenDcId) {
    const stripe = Stripe(token);
    //   const options = {
    //       mode: 'payment',
    //       amount: 1099,
    //       currency: 'usd',
    //       // Fully customizable with appearance API.
    // 			appearance: {
    // 				theme: 'stripe',

    // 				rules: {
    // 					'.Input': {
    // 						color: '#7E5FF1',
    // 						fontSize: '16px',
    // 						padding: '8px 12px',
    // 						backgroundColor: 'transparent',
    // 						boxShadow: 'none',
    // 						border: 'none',
    // 						borderBottom: '2px solid #7E5FF1',
    // 						borderRadius: '0px',
    // 						marginBottom: '10px',
    // 					},

    // 					'.Input::placeholder': {
    // 						color: '#7E5FF1',
    // 					},

    // 					'.Input--invalid': {
    // 						boxShadow: 'none',
    // 					},

    // 					'.Input:focus': {
    // 						boxShadow: 'none',
    // 						borderColor: '#7E5FF1',
    // 					},

    // 					'.Label': {
    // 						lineHeight: '0px',
    // 						color: '#F8F9FA',
    // 					}
    // 				},
    // 			}
    //   };

    const response = await fetch("/pricing/create-stripe-checkout-session?dc=" + chosenDcId, {
        method: "POST",
    });

    const { clientSecret, csession } = await response.json();

    const checkout = await stripe.initEmbeddedCheckout({
        clientSecret,
    });



    // Mount Checkout
    checkout.mount('#checkout');

    window.csession = csession;


    //   // Set up Stripe.js and Elements to use in checkout form
    //   const elements = stripe.elements(options);

    //   // Create and mount the Payment Element
    //   const paymentElement = elements.create('payment');
    //   paymentElement.mount('#payment-element');

    //   const form = document.getElementById('payment-form');
    //   const submitBtn = document.getElementById('stripeSubmit');

    //   const handleError = (error) => {
    //     const messageContainer = document.querySelector('#error-message');
    //     messageContainer.textContent = error.message;
    //     submitBtn.disabled = false;
    //   }

    // 	// Validate input of the card elements
    // 	paymentElement.on('change', function(event) {
    // 		if (event.complete) {
    // 			stripeSubmitButtonEnable();
    // 		} else {
    // 			stripeSubmitButtonDisable();
    // 		}
    // 	});

    // 	form.addEventListener('submit', async (event) => {
    // 		// We don't want to let default form submission happen here,
    // 		// which would refresh the page.
    // 		event.preventDefault();

    // 		// Prevent multiple form submissions
    // 		if (submitBtn.disabled) {
    // 			return;
    // 		}

    // 		// Disable form submission while loading
    // 		submitBtn.disabled = true;

    // 		// Trigger form validation and wallet collection
    // 		const {error: submitError} = await elements.submit();
    // 		if (submitError) {
    // 			handleError(submitError);
    // 			return;
    // 		}

    // 		// Create the PaymentIntent and obtain clientSecret
    // 		const res = await fetch("/pricing/create-stripe-intent?dc="+ chosenDcId, {
    // 			method: "POST",
    // 		});

    // 		const {client_secret: clientSecret, id: id} = await res.json();
    // 		// Confirm the PaymentIntent using the details collected by the Payment Element
    // 		const {error, ...rest} = await stripe.confirmPayment({
    // 			elements,
    // 			clientSecret,
    // 			confirmParams: {
    // 				return_url: 'https://google.com/', // TODO change url
    // 			},
    // 			redirect: 'if_required'
    // 		});
    // 		alert(rest);
    // 		alert(id)

    // 		if (error) {
    // 			alert('Payment failed');
    // 			// This point is only reached if there's an immediate error when
    // 			// confirming the payment. Show the error to your customer (for example, payment details incomplete)
    // 			handleError(error);
    // 		} else {

    // 			$.ajax({
    // 					url: "/pricing/handle-card-details-new",
    // 					data: $("#frm-onboardingForm").serialize(),
    // 					type: 'POST',
    // 					success: function(resp){
    // 							dataLayer.push({'event': 'cloud order'});
    // 							console.log('event cloud order')
    // 							if(resp.redirect) {
    // 									window.location.href = (resp.redirect);
    // 							}
    // 					},
    // 					error: function(resp){
    // 							console.log(resp);
    // 					}
    // 			});

    // 			alert(clientSecret);
    // 			// Your customer is redirected to your `return_url`. For some payment
    // 			// methods like iDEAL, your customer is redirected to an intermediate
    // 			// site first to authorize the payment, then redirected to the `return_url`.
    // 			// TODO submit here
    // 		}
    // 	});
}

function stripeSubmitButtonEnable() {
    $('#stripeSubmit').removeAttr('disabled').addClass('active');
}

function stripeSubmitButtonDisable() {
    $('#stripeSubmit').attr('disabled', 'disabled').removeClass('active');
}

+function () {
    var bpValues = window.redesignConstants && window.redesignConstants.bpValues || [];

    $(document).ready(function () {
        $(document).on('click', '.js-o-apps__gallery-thumb', function (evt) {
            var el = $(this);
            var parent = el.parents('.js-apps__gallery');
            var imageUrl = el.attr('data-image-url');
            var imageAlt = el.attr('data-image-alt');
            var imageTitle = el.attr('data-image-title');

            $('.js-o-apps__gallery-thumb', parent).removeClass('is-active');
            el.addClass('is-active');

            var galleryMainImg = parent.find('.o-apps__gallery-main .o-apps__gallery-image');

            galleryMainImg.attr('src', imageUrl);
        });

        $('.o-apps__gallery-main').click(function (e) {
            let imageUrl = $(this).find('.js-o-apps__gallery-main').attr('src');

            // Run the fancybox modal gallery
            $('.fancybox[href="' + imageUrl + '"]').trigger('click');
        });

        $(document).on('click', '.js-swapper', function (e) {
            var el = $(this);
            el.addClass('o-clicked')
                .next()
                .find('input')
                .focus();

            $('.js-show-on-swapping').addClass('o-show-block');
        });
        if ($('.js-swapper.active').length > 0) {
            $('.js-swapper').trigger('click');
        }

        $(document).on('click', '.js-loader', function (e) {
            var $this = $(this);
            if ($this.hasClass('disabled')) {
                e.preventDefault();
            } else {
                $this.buttonLoader('loading');
            }
        });

    });

}();

$(document).ready(function () {

    $(".accordion > .accordion-header").on("click", function () {
        if ($(this).hasClass("active")) {
            $(this).removeClass("active");
            $(this)
                .siblings(".accordion-content")
                .slideUp(200);
            $(".accordion > .accordion-header span").text('+');
        } else {
            $(".accordion > .accordion-header span").text('+');
            $(this)
                .find("span").html('&ndash;');
            $(".accordion > .accordion-header").removeClass("active");
            $(this).addClass("active");
            $(".accordion-content").slideUp(200);
            $(this)
                .siblings(".accordion-content")
                .slideDown(200);
        }
    });

    $('.scroll-down-button, .scroll-to').click(function () {
        let scrollTo = $(this).attr('data-scroll-to');

        $('html, body').animate({
            scrollTop: $('.' + scrollTo).offset().top - 50
        }, 600);
    });

    $('.scroll-top-button').click(function () {
        let scrollTo = $(this).attr('data-scroll-to');

        $('html, body').animate({
            scrollTop: $('.' + scrollTo).offset().top - 150
        }, 800);
    });
});

+function () {
    // window.consolestop = false;

    var redeignedSelector = $('#redesigned');

    var loadAllFloterImgs = function () {
        if (window.innerWidth >= 768) {
            var floaterImgs = $('.js-hidden-floater-img', redeignedSelector);

            for (var i = 0; i < floaterImgs.length; i++) {
                var img = $(floaterImgs[i]);

                img.attr('src', img.attr('data-floater-img-src'));
            }
        }

    };

    $(document).ready(function () {

        loadAllFloterImgs();

        var numOfUsersInput = $('.js-value-adjuster-num-of-users input', redeignedSelector);

        numOfUsersInput.on('keyup', function () {
            var el = $(this);
            var val = parseInt(el.val());

            if (isNaN(val)) {
                el.val('');
                return;
            }

            var inputTopContainer = el.parents('.js-value-adjuster-num-of-users').parents('.o-pricing-customize__number-of-users-content');

            if (inputTopContainer.length) {
                if (val < 10) {
                    inputTopContainer.addClass('o-pricing-customize__number-of-users-content--error');
                }
                else {
                    inputTopContainer.removeClass('o-pricing-customize__number-of-users-content--error');
                }
            }

        });

        numOfUsersInput.on('change', function () {
            var el = $(this);
            var val = parseInt(el.val());

            var inputTopContainer = el.parents('.js-value-adjuster-num-of-users').parents('.o-pricing-customize__number-of-users-content');
            inputTopContainer.removeClass('o-pricing-customize__number-of-users-content--error');

            if (isNaN(val) || val < 10) {
                el.val(10);
            }
        });

        $(document).on('focus click', '.js-pricing-customize__cb', function () {
            var el = $(this);
            var parent = el.parents('.o-pricing-customize__card');

            var valueInput = $('.js-value-adjuster input', parent);
            var val = !isNaN(parseInt(valueInput.val())) ? parseInt(valueInput.val()) : 0;

            if (el.is(':checked')) {
                $('.summary-' + el.attr('id')).removeClass('hidden');
                parent.addClass('is-active');

                if (valueInput.length && val === 0 && numOfUsersInput.length && numOfUsersInput.val()) {
                    valueInput.val(numOfUsersInput.val());
                }
                else if (valueInput.length && val === 0 && !isNaN(valueInput.attr('data-min-val'))) {
                    valueInput.val(valueInput.attr('data-min-val'));
                }

            }
            else {
                $('.summary-' + el.attr('id')).addClass('hidden');
                parent.removeClass('is-active');

                if (valueInput.length) {
                    if (!isNaN(valueInput.attr('data-min-val'))) {
                        valueInput.val(valueInput.attr('data-min-val'));
                    }
                    else {
                        valueInput.val(0);
                    }
                }
            }
        });

        var jsPricingCustomizeImageWrap = document.getElementsByClassName('js-pricing-customize__image-wrap')[0],
            jsPricingCustomizeImageFloater = document.getElementsByClassName('js-pricing-customize__floater')[0],
            documentBody = document.documentElement || document.body.parentNode || document.body;
        var footer = $('.o-footer', redeignedSelector);
        var floater = $('.js-pricing-customize__floater', redeignedSelector);
        var image = $('.o-pricing-customize__image', redeignedSelector);
        var pricingCustomizeCards = $('.o-pricing-customize__card', redeignedSelector);
        var oHeader = document.getElementsByClassName('o-header')[0];
        var wasAbsoluted = false;

        (function () {
            setTimeout(function () {
                for (var i = 0; i < pricingCustomizeCards.length; i++) {
                    var card = $(pricingCustomizeCards[i]);
                    var img = new Image();
                    img.src = card.attr('data-svg-url');
                }
            });
        })();

        var pinDisplay = function () {
            var divider = 30;

            if (jsPricingCustomizeImageFloater.getBoundingClientRect().top <= oHeader.offsetHeight + divider) {
                var footerOffsetTop = footer.offset().top;
                var imageHeight = $(jsPricingCustomizeImageWrap).height();
                var scrollTop = window.pageYOffset || documentBody.scrollTop;

                if (scrollTop + imageHeight + divider + divider + oHeader.offsetHeight >= footerOffsetTop) {
                    if (!wasAbsoluted) {
                        jsPricingCustomizeImageWrap.style.top = footerOffsetTop - (imageHeight + divider) - floater.offset().top + 'px';
                        jsPricingCustomizeImageWrap.classList.remove('is-fixed');

                        wasAbsoluted = true;
                    }
                }
                else {
                    // pin to top
                    jsPricingCustomizeImageWrap.style.bottom = 'auto';
                    jsPricingCustomizeImageWrap.style.top = divider + oHeader.offsetHeight + 'px';
                    jsPricingCustomizeImageWrap.classList.add('is-fixed');

                    wasAbsoluted = false;
                }
            }
            else {
                jsPricingCustomizeImageWrap.style.top = 'auto';
                jsPricingCustomizeImageWrap.classList.remove('is-fixed');
            }
        };

        var showCurrentImage = function () {
            var activeCard = null;

            var svgCardIndex = 0;
            for (var i = 0; i < pricingCustomizeCards.length; i++) {
                var card = $(pricingCustomizeCards[i]);

                if (card.attr('data-svg-url')) {
                    var absFromTop = Math.abs(card[0].getBoundingClientRect().top - oHeader.offsetHeight);
                    var activeAbsFromTop = activeCard ? Math.abs(activeCard[0].getBoundingClientRect().top - oHeader.offsetHeight) : null;
                    if (!activeCard || activeAbsFromTop > absFromTop) {
                        if (pricingCustomizeCards[1].getBoundingClientRect().top - oHeader.offsetHeight > 30) {
                            var currentImageUrl = image.attr('src');
                            var imageDefault = image.attr('data-default-img');
                            if (currentImageUrl != imageDefault) {
                                image.attr('src', imageDefault);
                            }

                            return;
                        }
                        else {
                            activeCard = card;
                        }
                    }
                    svgCardIndex++;
                }
            }

            var activeCardDataUrl = activeCard.attr('data-svg-url');
            var currentImageUrl = image.attr('src');

            if (currentImageUrl != activeCardDataUrl) {
                image.attr('src', activeCardDataUrl);
            }

        };

        if (jsPricingCustomizeImageWrap) {
            pinDisplay();

            $(window).on('scroll', function (e) {
                // cross-browser compatible scrollTop.

                if (window.innerWidth >= 768) {
                    pinDisplay();
                    showCurrentImage();
                }
            });
        }

    });
}();

+function () {

    $(document).ready(function () {

        +(function () {


            var updateFloterPosition = function (forElement) {
                var el = $(forElement);
                var elValue = el.val();

                var hiddenContentEl = el.siblings('.js-onice-input-value');
                var domainFloater = el.siblings('.js-onice-domain-floater');

                var val = null;
                if (elValue) {
                    val = elValue;
                }
                // else {
                //     var placeholder = $('.js-onice-imput-placeholder');
                //     var placeholderValue = placeholder.text();
                //
                //     val = placeholderValue;
                // }

                if (elValue || el.is(':focus')) {
                    if (!domainFloater.hasClass('o-form__input-domain-floater--visible')) {
                        domainFloater.addClass('o-form__input-domain-floater--visible');
                    }
                }
                else {
                    domainFloater.removeClass('o-form__input-domain-floater--visible');
                }

                var inputWidth = el.parent().width() - domainFloater.width();
                if (el.css('width') != inputWidth) {
                    el.css('width', inputWidth + 'px');
                }

                hiddenContentEl.html(val);
                var hiddenContentElementOuterWidth = hiddenContentEl.outerWidth();
                domainFloater.css('left', (hiddenContentElementOuterWidth < inputWidth - 17 ? hiddenContentElementOuterWidth : inputWidth - 17) + 'px');
            };

            var inputs = $('.o-form__label--onice-domain .js-form-input');


            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];

                updateFloterPosition(input);

            }

            inputs.on('change input keydown keyup focus blur', function () {
                updateFloterPosition(this);
            });
        })();

    });

}();


!function (root, factory) {
    "function" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set
        define([], function () {
            return root.svg4everybody = factory();
        }) : "object" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but
            // only CommonJS-like environments that support module.exports,
            // like Node.
            module.exports = factory() : root.svg4everybody = factory();
}(this, function () {
    /*! svg4everybody v2.1.5 | github.com/jonathantneal/svg4everybody */
    function embed(parent, svg, target) {
        // if the target exists
        if (target) {
            // create a document fragment to hold the contents of the target
            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute("viewBox") && target.getAttribute("viewBox");
            // conditionally set the viewBox on the svg
            viewBox && svg.setAttribute("viewBox", viewBox);
            // copy the contents of the clone into the fragment
            for (// clone the target
                var clone = target.cloneNode(!0); clone.childNodes.length;) {
                fragment.appendChild(clone.firstChild);
            }
            // append the fragment into the svg
            parent.appendChild(fragment);
        }
    }
    function loadreadystatechange(xhr) {
        // listen to changes in the request
        xhr.onreadystatechange = function () {
            // if the request is ready
            if (4 === xhr.readyState) {
                // get the cached html document
                var cachedDocument = xhr._cachedDocument;
                // ensure the cached html document based on the xhr response
                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""),
                    cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
                    xhr._embeds.splice(0).map(function (item) {
                        // get the cached target
                        var target = xhr._cachedTarget[item.id];
                        // ensure the cached target
                        target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)),
                            // embed the target into the svg
                            embed(item.parent, item.svg, target);
                    });
            }
        }, // test the ready state change immediately
            xhr.onreadystatechange();
    }
    function svg4everybody(rawopts) {
        function oninterval() {
            // while the index exists in the live <use> collection
            for (// get the cached <use> index
                var index = 0; index < uses.length;) {
                // get the current <use>
                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent);
                if (svg) {
                    var src = use.getAttribute("xlink:href") || use.getAttribute("href");
                    if (polyfill) {
                        if (!opts.validate || opts.validate(src, svg, use)) {
                            // remove the <use> element
                            parent.removeChild(use);
                            // parse the src and get the url and id
                            var srcSplit = src.split("#"), url = srcSplit.shift(), id = srcSplit.join("#");
                            // if the link is external
                            if (url.length) {
                                // get the cached xhr request
                                var xhr = requests[url];
                                // ensure the xhr request exists
                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(),
                                    xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
                                    xhr._embeds.push({
                                        parent: parent,
                                        svg: svg,
                                        id: id
                                    }), // prepare the xhr ready state change event
                                    loadreadystatechange(xhr);
                            } else {
                                // embed the local id into the svg
                                embed(parent, document.getElementById(id));
                            }
                        } else {
                            // increase the index when the previous value was not "valid"
                            ++index, ++numberOfSvgUseElementsToBypass;
                        }
                    }
                } else {
                    // increase the index when the previous value was not "valid"
                    ++index;
                }
            }
            // continue the interval
            uses.length - numberOfSvgUseElementsToBypass > 0 && requestAnimationFrame(oninterval, 67);
        }
        var polyfill, opts = Object(rawopts), newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/, webkitUA = /\bAppleWebKit\/(\d+)\b/, olderEdgeUA = /\bEdge\/12\.(\d+)\b/, edgeUA = /\bEdge\/.(\d+)\b/, inIframe = window.top !== window.self;
        polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;
        // create xhr requests object
        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName("use"), numberOfSvgUseElementsToBypass = 0;
        // conditionally start the interval if the polyfill is active
        polyfill && oninterval();
    }
    function getSVGAncestor(node) {
        for (var svg = node; "svg" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode);) { }
        return svg;
    }
    return svg4everybody;
});
+function () {
    // window.consolestop = false;

    $(document).ready(function () {
        var body = $('body');
        var documentBody = document.documentElement || document.body.parentNode || document.body;
        var prevScrollTop = 0;
        var jsModalIds = [];
        var jsModalTimeouts = {};

        var modalOpenCallback = function (el) {
            var cbName = el.attr('data-on-open');

            modalCallback(cbName);
        };

        var modalCloseCallback = function (el) {
            var cbName = el.attr('data-on-close');

            modalCallback(cbName);
        };

        var modalCallback = function (cbName) {
            var cb = window.redesignModalCallbacks[cbName];
            if (cb && typeof cb === "function") {
                cb();
            }
        };

        var modalOpen = function (modalId, modalDuration) {
            var jsModal = $('#' + modalId);
            jsModal.css('z-index', (parseInt(jsModal.css('z-index')) + jsModalIds.length));
            jsModal.addClass('is-open');
            jsModalIds.push(modalId);

            if (modalDuration) {
                var duration = modalDurationConvert(modalDuration);

                if (duration) {
                    jsModalTimeouts[modalId] = setTimeout(function () {
                        modalClose(modalId);
                        clearTimeout(jsModalTimeouts[modalId]);
                        jsModalTimeouts[modalId] = null;
                    }, duration);
                }
            }

            if (jsModalIds.length === 1) {
                var scrollTop = window.pageYOffset || documentBody.scrollTop;
                prevScrollTop = scrollTop;

                body.css('top', '-' + scrollTop + 'px');
                body.addClass('stop-scroll');

                $(document).on('click.closeModalOutside touchstart.closeModalOutside', function (evt) {
                    if (!$(evt.target).closest('.o-modal__main').length) {
                        jsModal = $(evt.target).closest('.js-modal');

                        modalClose(jsModal.attr('id'));

                        return false;
                    }
                }).on('click.closeModal', '.js-modal-close, .js-modal-submit', function (evt) {
                    jsModal = $(this).closest('.js-modal');

                    modalClose(jsModal.attr('id'));
                }).on('keydown.closeModal', function (e) {
                    var key = e.which;

                    if (jsModalIds.length > 0) {
                        var lastModalId = jsModalIds[jsModalIds.length - 1];

                        if (key === 13) { // enter
                            $('#' + lastModalId + ' .js-modal-submit').click();    // close modal by enter only if we have modal-submit
                            return false;
                        }
                        else if (key === 27) { // esc
                            modalClose(lastModalId);    // close everytime
                            return false;
                        }
                    }

                });
            }

            modalOpenCallback(jsModal);
        };

        var modalClose = function (modalId) {
            var jsModal = $('#' + modalId);
            jsModal.removeClass('is-open');
            removeFromArray(modalId, jsModalIds);

            if (jsModalTimeouts[modalId]) {
                clearTimeout(jsModalTimeouts[modalId]);
                jsModalTimeouts[modalId] = null;
            }

            var ytIframe = $('.js-yt-iframe', jsModal);
            if (ytIframe.length) {
                ytIframe.attr('src', '');
            }

            if (jsModalIds.length === 0) {
                body.css('top', 'auto');
                body.removeClass('stop-scroll');

                window.scrollTo(0, prevScrollTop);
                prevScrollTop = 0;

                $(document).off('click.closeModalOutside touchstart.closeModalOutside keydown.closeModal').off('click.closeModal', '.js-modal-close, .js-modal-submit');
            }

            modalCloseCallback(jsModal);
        };

        var modalDurationConvert = function (value) {
            var duration = parseInt(value.replace(/[^0-9]+/ig, ''));
            var unit = value.replace(/[^a-z,A-Z]+/ig, '');

            switch (unit) {
                case 'ms':
                    // nothing to do
                    break;
                case 's':
                    duration = duration * 1000;
                    break;
                case 'm':
                    duration = duration * 60 * 1000;
                    break;
                case 'h':
                    duration = duration * 60 * 60 * 1000;
                    break;
                default:
                    duration = 3000;
            }

            return duration;
        };

        var removeFromArray = function (value, array) {
            var index = null;

            for (var i = 0; i < array.length; i++) {
                if (array[i] === value) {
                    index = i;
                    break;
                }
            }

            array.splice(index, 1);
        };

        $(document).on('click', '.js-modal-open', function (evt) {
            var el = $(this);
            var modalId = el.attr('data-modal');
            var modalDuration = el.attr('data-modal-duration');
            var jsModal = $('#' + modalId);

            if (modalId == 'contact-us') {
                window.location.href = '/contact/contact-us/';
            }

            if (jsModal.length) {
                modalOpen(modalId, modalDuration);

                if (el.hasClass('js-modal-yt-video-open')) {
                    var dataUrl = el.attr('data-url');
                    $('.js-yt-iframe', jsModal).attr('src', dataUrl);
                }

            }
        });
    });
}();

+function () {
    $(document).ready(function () {
        $(document).on('click', '.js-buy-steps__own-domain', function (e) {
            $('.js-buy-steps__own-domain-wrap').one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function () {
                $(this).find('.js-form-input').focus();
            });
        });
    });
}();

var latin_map = {
    'Á': 'A', // LATIN CAPITAL LETTER A WITH ACUTE
    'Ă': 'A', // LATIN CAPITAL LETTER A WITH BREVE
    'Ắ': 'A', // LATIN CAPITAL LETTER A WITH BREVE AND ACUTE
    'Ặ': 'A', // LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW
    'Ằ': 'A', // LATIN CAPITAL LETTER A WITH BREVE AND GRAVE
    'Ẳ': 'A', // LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE
    'Ẵ': 'A', // LATIN CAPITAL LETTER A WITH BREVE AND TILDE
    'Ǎ': 'A', // LATIN CAPITAL LETTER A WITH CARON
    'Â': 'A', // LATIN CAPITAL LETTER A WITH CIRCUMFLEX
    'Ấ': 'A', // LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE
    'Ậ': 'A', // LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW
    'Ầ': 'A', // LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE
    'Ẩ': 'A', // LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE
    'Ẫ': 'A', // LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE
    'Ä': 'A', // LATIN CAPITAL LETTER A WITH DIAERESIS
    'Ǟ': 'A', // LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON
    'Ȧ': 'A', // LATIN CAPITAL LETTER A WITH DOT ABOVE
    'Ǡ': 'A', // LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON
    'Ạ': 'A', // LATIN CAPITAL LETTER A WITH DOT BELOW
    'Ȁ': 'A', // LATIN CAPITAL LETTER A WITH DOUBLE GRAVE
    'À': 'A', // LATIN CAPITAL LETTER A WITH GRAVE
    'Ả': 'A', // LATIN CAPITAL LETTER A WITH HOOK ABOVE
    'Ȃ': 'A', // LATIN CAPITAL LETTER A WITH INVERTED BREVE
    'Ā': 'A', // LATIN CAPITAL LETTER A WITH MACRON
    'Ą': 'A', // LATIN CAPITAL LETTER A WITH OGONEK
    'Å': 'A', // LATIN CAPITAL LETTER A WITH RING ABOVE
    'Ǻ': 'A', // LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE
    'Ḁ': 'A', // LATIN CAPITAL LETTER A WITH RING BELOW
    'Ⱥ': 'A', // LATIN CAPITAL LETTER A WITH STROKE
    'Ã': 'A', // LATIN CAPITAL LETTER A WITH TILDE
    'Ꜳ': 'AA', // LATIN CAPITAL LETTER AA
    'Æ': 'AE', // LATIN CAPITAL LETTER AE
    'Ǽ': 'AE', // LATIN CAPITAL LETTER AE WITH ACUTE
    'Ǣ': 'AE', // LATIN CAPITAL LETTER AE WITH MACRON
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER AFRICAN D' (Ɖ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER ALPHA' (Ɑ)
    'Ꜵ': 'AO', // LATIN CAPITAL LETTER AO
    'Ꜷ': 'AU', // LATIN CAPITAL LETTER AU
    'Ꜹ': 'AV', // LATIN CAPITAL LETTER AV
    'Ꜻ': 'AV', // LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR
    'Ꜽ': 'AY', // LATIN CAPITAL LETTER AY
    'Ḃ': 'B', // LATIN CAPITAL LETTER B WITH DOT ABOVE
    'Ḅ': 'B', // LATIN CAPITAL LETTER B WITH DOT BELOW
    'Ɓ': 'B', // LATIN CAPITAL LETTER B WITH HOOK
    'Ḇ': 'B', // LATIN CAPITAL LETTER B WITH LINE BELOW
    'Ƀ': 'B', // LATIN CAPITAL LETTER B WITH STROKE
    'Ƃ': 'B', // LATIN CAPITAL LETTER B WITH TOPBAR
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER BROKEN L' (Ꝇ)
    'Ć': 'C', // LATIN CAPITAL LETTER C WITH ACUTE
    'Č': 'C', // LATIN CAPITAL LETTER C WITH CARON
    'Ç': 'C', // LATIN CAPITAL LETTER C WITH CEDILLA
    'Ḉ': 'C', // LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE
    'Ĉ': 'C', // LATIN CAPITAL LETTER C WITH CIRCUMFLEX
    'Ċ': 'C', // LATIN CAPITAL LETTER C WITH DOT ABOVE
    'Ƈ': 'C', // LATIN CAPITAL LETTER C WITH HOOK
    'Ȼ': 'C', // LATIN CAPITAL LETTER C WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER CON' (Ꝯ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER CUATRILLO' (Ꜭ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER CUATRILLO WITH COMMA' (Ꜯ)
    'Ď': 'D', // LATIN CAPITAL LETTER D WITH CARON
    'Ḑ': 'D', // LATIN CAPITAL LETTER D WITH CEDILLA
    'Ḓ': 'D', // LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW
    'Ḋ': 'D', // LATIN CAPITAL LETTER D WITH DOT ABOVE
    'Ḍ': 'D', // LATIN CAPITAL LETTER D WITH DOT BELOW
    'Ɗ': 'D', // LATIN CAPITAL LETTER D WITH HOOK
    'Ḏ': 'D', // LATIN CAPITAL LETTER D WITH LINE BELOW
    'ǲ': 'D', // LATIN CAPITAL LETTER D WITH SMALL LETTER Z
    'ǅ': 'D', // LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
    'Đ': 'D', // LATIN CAPITAL LETTER D WITH STROKE
    'Ƌ': 'D', // LATIN CAPITAL LETTER D WITH TOPBAR
    'Ǳ': 'DZ', // LATIN CAPITAL LETTER DZ
    'Ǆ': 'DZ', // LATIN CAPITAL LETTER DZ WITH CARON
    'É': 'E', // LATIN CAPITAL LETTER E WITH ACUTE
    'Ĕ': 'E', // LATIN CAPITAL LETTER E WITH BREVE
    'Ě': 'E', // LATIN CAPITAL LETTER E WITH CARON
    'Ȩ': 'E', // LATIN CAPITAL LETTER E WITH CEDILLA
    'Ḝ': 'E', // LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE
    'Ê': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX
    'Ế': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE
    'Ệ': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW
    'Ề': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE
    'Ể': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE
    'Ễ': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE
    'Ḙ': 'E', // LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW
    'Ë': 'E', // LATIN CAPITAL LETTER E WITH DIAERESIS
    'Ė': 'E', // LATIN CAPITAL LETTER E WITH DOT ABOVE
    'Ẹ': 'E', // LATIN CAPITAL LETTER E WITH DOT BELOW
    'Ȅ': 'E', // LATIN CAPITAL LETTER E WITH DOUBLE GRAVE
    'È': 'E', // LATIN CAPITAL LETTER E WITH GRAVE
    'Ẻ': 'E', // LATIN CAPITAL LETTER E WITH HOOK ABOVE
    'Ȇ': 'E', // LATIN CAPITAL LETTER E WITH INVERTED BREVE
    'Ē': 'E', // LATIN CAPITAL LETTER E WITH MACRON
    'Ḗ': 'E', // LATIN CAPITAL LETTER E WITH MACRON AND ACUTE
    'Ḕ': 'E', // LATIN CAPITAL LETTER E WITH MACRON AND GRAVE
    'Ę': 'E', // LATIN CAPITAL LETTER E WITH OGONEK
    'Ɇ': 'E', // LATIN CAPITAL LETTER E WITH STROKE
    'Ẽ': 'E', // LATIN CAPITAL LETTER E WITH TILDE
    'Ḛ': 'E', // LATIN CAPITAL LETTER E WITH TILDE BELOW
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER EGYPTOLOGICAL AIN' (Ꜥ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF' (Ꜣ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER ENG' (Ŋ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER ESH' (Ʃ)
    'Ꝫ': 'ET', // LATIN CAPITAL LETTER ET
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER ETH' (Ð)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER EZH' (Ʒ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER EZH REVERSED' (Ƹ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER EZH WITH CARON' (Ǯ)
    'Ḟ': 'F', // LATIN CAPITAL LETTER F WITH DOT ABOVE
    'Ƒ': 'F', // LATIN CAPITAL LETTER F WITH HOOK
    'Ǵ': 'G', // LATIN CAPITAL LETTER G WITH ACUTE
    'Ğ': 'G', // LATIN CAPITAL LETTER G WITH BREVE
    'Ǧ': 'G', // LATIN CAPITAL LETTER G WITH CARON
    'Ģ': 'G', // LATIN CAPITAL LETTER G WITH CEDILLA
    'Ĝ': 'G', // LATIN CAPITAL LETTER G WITH CIRCUMFLEX
    'Ġ': 'G', // LATIN CAPITAL LETTER G WITH DOT ABOVE
    'Ɠ': 'G', // LATIN CAPITAL LETTER G WITH HOOK
    'Ḡ': 'G', // LATIN CAPITAL LETTER G WITH MACRON
    'Ǥ': 'G', // LATIN CAPITAL LETTER G WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER GAMMA' (Ɣ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER GLOTTAL STOP' (Ɂ)
    'Ḫ': 'H', // LATIN CAPITAL LETTER H WITH BREVE BELOW
    'Ȟ': 'H', // LATIN CAPITAL LETTER H WITH CARON
    'Ḩ': 'H', // LATIN CAPITAL LETTER H WITH CEDILLA
    'Ĥ': 'H', // LATIN CAPITAL LETTER H WITH CIRCUMFLEX
    'Ⱨ': 'H', // LATIN CAPITAL LETTER H WITH DESCENDER
    'Ḧ': 'H', // LATIN CAPITAL LETTER H WITH DIAERESIS
    'Ḣ': 'H', // LATIN CAPITAL LETTER H WITH DOT ABOVE
    'Ḥ': 'H', // LATIN CAPITAL LETTER H WITH DOT BELOW
    'Ħ': 'H', // LATIN CAPITAL LETTER H WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER HALF H' (Ⱶ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER HENG' (Ꜧ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER HWAIR' (Ƕ)
    'Í': 'I', // LATIN CAPITAL LETTER I WITH ACUTE
    'Ĭ': 'I', // LATIN CAPITAL LETTER I WITH BREVE
    'Ǐ': 'I', // LATIN CAPITAL LETTER I WITH CARON
    'Î': 'I', // LATIN CAPITAL LETTER I WITH CIRCUMFLEX
    'Ï': 'I', // LATIN CAPITAL LETTER I WITH DIAERESIS
    'Ḯ': 'I', // LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE
    'İ': 'I', // LATIN CAPITAL LETTER I WITH DOT ABOVE
    'Ị': 'I', // LATIN CAPITAL LETTER I WITH DOT BELOW
    'Ȉ': 'I', // LATIN CAPITAL LETTER I WITH DOUBLE GRAVE
    'Ì': 'I', // LATIN CAPITAL LETTER I WITH GRAVE
    'Ỉ': 'I', // LATIN CAPITAL LETTER I WITH HOOK ABOVE
    'Ȋ': 'I', // LATIN CAPITAL LETTER I WITH INVERTED BREVE
    'Ī': 'I', // LATIN CAPITAL LETTER I WITH MACRON
    'Į': 'I', // LATIN CAPITAL LETTER I WITH OGONEK
    'Ɨ': 'I', // LATIN CAPITAL LETTER I WITH STROKE
    'Ĩ': 'I', // LATIN CAPITAL LETTER I WITH TILDE
    'Ḭ': 'I', // LATIN CAPITAL LETTER I WITH TILDE BELOW
    'Ꝺ': 'D', // LATIN CAPITAL LETTER INSULAR D
    'Ꝼ': 'F', // LATIN CAPITAL LETTER INSULAR F
    'Ᵹ': 'G', // LATIN CAPITAL LETTER INSULAR G
    'Ꞃ': 'R', // LATIN CAPITAL LETTER INSULAR R
    'Ꞅ': 'S', // LATIN CAPITAL LETTER INSULAR S
    'Ꞇ': 'T', // LATIN CAPITAL LETTER INSULAR T
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER IOTA' (Ɩ)
    'Ꝭ': 'IS', // LATIN CAPITAL LETTER IS
    'Ĵ': 'J', // LATIN CAPITAL LETTER J WITH CIRCUMFLEX
    'Ɉ': 'J', // LATIN CAPITAL LETTER J WITH STROKE
    'Ḱ': 'K', // LATIN CAPITAL LETTER K WITH ACUTE
    'Ǩ': 'K', // LATIN CAPITAL LETTER K WITH CARON
    'Ķ': 'K', // LATIN CAPITAL LETTER K WITH CEDILLA
    'Ⱪ': 'K', // LATIN CAPITAL LETTER K WITH DESCENDER
    'Ꝃ': 'K', // LATIN CAPITAL LETTER K WITH DIAGONAL STROKE
    'Ḳ': 'K', // LATIN CAPITAL LETTER K WITH DOT BELOW
    'Ƙ': 'K', // LATIN CAPITAL LETTER K WITH HOOK
    'Ḵ': 'K', // LATIN CAPITAL LETTER K WITH LINE BELOW
    'Ꝁ': 'K', // LATIN CAPITAL LETTER K WITH STROKE
    'Ꝅ': 'K', // LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE
    'Ĺ': 'L', // LATIN CAPITAL LETTER L WITH ACUTE
    'Ƚ': 'L', // LATIN CAPITAL LETTER L WITH BAR
    'Ľ': 'L', // LATIN CAPITAL LETTER L WITH CARON
    'Ļ': 'L', // LATIN CAPITAL LETTER L WITH CEDILLA
    'Ḽ': 'L', // LATIN CAPITAL LETTER L WITH CIRCUMFLEX BELOW
    'Ḷ': 'L', // LATIN CAPITAL LETTER L WITH DOT BELOW
    'Ḹ': 'L', // LATIN CAPITAL LETTER L WITH DOT BELOW AND MACRON
    'Ⱡ': 'L', // LATIN CAPITAL LETTER L WITH DOUBLE BAR
    'Ꝉ': 'L', // LATIN CAPITAL LETTER L WITH HIGH STROKE
    'Ḻ': 'L', // LATIN CAPITAL LETTER L WITH LINE BELOW
    'Ŀ': 'L', // LATIN CAPITAL LETTER L WITH MIDDLE DOT
    'Ɫ': 'L', // LATIN CAPITAL LETTER L WITH MIDDLE TILDE
    'ǈ': 'L', // LATIN CAPITAL LETTER L WITH SMALL LETTER J
    'Ł': 'L', // LATIN CAPITAL LETTER L WITH STROKE
    'Ǉ': 'LJ', // LATIN CAPITAL LETTER LJ
    'Ḿ': 'M', // LATIN CAPITAL LETTER M WITH ACUTE
    'Ṁ': 'M', // LATIN CAPITAL LETTER M WITH DOT ABOVE
    'Ṃ': 'M', // LATIN CAPITAL LETTER M WITH DOT BELOW
    'Ɱ': 'M', // LATIN CAPITAL LETTER M WITH HOOK
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER MIDDLE-WELSH LL' (Ỻ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER MIDDLE-WELSH V' (Ỽ)
    'Ń': 'N', // LATIN CAPITAL LETTER N WITH ACUTE
    'Ň': 'N', // LATIN CAPITAL LETTER N WITH CARON
    'Ņ': 'N', // LATIN CAPITAL LETTER N WITH CEDILLA
    'Ṋ': 'N', // LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW
    'Ṅ': 'N', // LATIN CAPITAL LETTER N WITH DOT ABOVE
    'Ṇ': 'N', // LATIN CAPITAL LETTER N WITH DOT BELOW
    'Ǹ': 'N', // LATIN CAPITAL LETTER N WITH GRAVE
    'Ɲ': 'N', // LATIN CAPITAL LETTER N WITH LEFT HOOK
    'Ṉ': 'N', // LATIN CAPITAL LETTER N WITH LINE BELOW
    'Ƞ': 'N', // LATIN CAPITAL LETTER N WITH LONG RIGHT LEG
    'ǋ': 'N', // LATIN CAPITAL LETTER N WITH SMALL LETTER J
    'Ñ': 'N', // LATIN CAPITAL LETTER N WITH TILDE
    'Ǌ': 'NJ', // LATIN CAPITAL LETTER NJ
    'Ó': 'O', // LATIN CAPITAL LETTER O WITH ACUTE
    'Ŏ': 'O', // LATIN CAPITAL LETTER O WITH BREVE
    'Ǒ': 'O', // LATIN CAPITAL LETTER O WITH CARON
    'Ô': 'O', // LATIN CAPITAL LETTER O WITH CIRCUMFLEX
    'Ố': 'O', // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE
    'Ộ': 'O', // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW
    'Ồ': 'O', // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE
    'Ổ': 'O', // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE
    'Ỗ': 'O', // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE
    'Ö': 'O', // LATIN CAPITAL LETTER O WITH DIAERESIS
    'Ȫ': 'O', // LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON
    'Ȯ': 'O', // LATIN CAPITAL LETTER O WITH DOT ABOVE
    'Ȱ': 'O', // LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON
    'Ọ': 'O', // LATIN CAPITAL LETTER O WITH DOT BELOW
    'Ő': 'O', // LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
    'Ȍ': 'O', // LATIN CAPITAL LETTER O WITH DOUBLE GRAVE
    'Ò': 'O', // LATIN CAPITAL LETTER O WITH GRAVE
    'Ỏ': 'O', // LATIN CAPITAL LETTER O WITH HOOK ABOVE
    'Ơ': 'O', // LATIN CAPITAL LETTER O WITH HORN
    'Ớ': 'O', // LATIN CAPITAL LETTER O WITH HORN AND ACUTE
    'Ợ': 'O', // LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW
    'Ờ': 'O', // LATIN CAPITAL LETTER O WITH HORN AND GRAVE
    'Ở': 'O', // LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE
    'Ỡ': 'O', // LATIN CAPITAL LETTER O WITH HORN AND TILDE
    'Ȏ': 'O', // LATIN CAPITAL LETTER O WITH INVERTED BREVE
    'Ꝋ': 'O', // LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY
    'Ꝍ': 'O', // LATIN CAPITAL LETTER O WITH LOOP
    'Ō': 'O', // LATIN CAPITAL LETTER O WITH MACRON
    'Ṓ': 'O', // LATIN CAPITAL LETTER O WITH MACRON AND ACUTE
    'Ṑ': 'O', // LATIN CAPITAL LETTER O WITH MACRON AND GRAVE
    'Ɵ': 'O', // LATIN CAPITAL LETTER O WITH MIDDLE TILDE
    'Ǫ': 'O', // LATIN CAPITAL LETTER O WITH OGONEK
    'Ǭ': 'O', // LATIN CAPITAL LETTER O WITH OGONEK AND MACRON
    'Ø': 'O', // LATIN CAPITAL LETTER O WITH STROKE
    'Ǿ': 'O', // LATIN CAPITAL LETTER O WITH STROKE AND ACUTE
    'Õ': 'O', // LATIN CAPITAL LETTER O WITH TILDE
    'Ṍ': 'O', // LATIN CAPITAL LETTER O WITH TILDE AND ACUTE
    'Ṏ': 'O', // LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS
    'Ȭ': 'O', // LATIN CAPITAL LETTER O WITH TILDE AND MACRON
    'Ƣ': 'OI', // LATIN CAPITAL LETTER OI
    'Ꝏ': 'OO', // LATIN CAPITAL LETTER OO
    'Ɛ': 'E', // LATIN CAPITAL LETTER OPEN E
    'Ɔ': 'O', // LATIN CAPITAL LETTER OPEN O
    'Ȣ': 'OU', // LATIN CAPITAL LETTER OU
    'Ṕ': 'P', // LATIN CAPITAL LETTER P WITH ACUTE
    'Ṗ': 'P', // LATIN CAPITAL LETTER P WITH DOT ABOVE
    'Ꝓ': 'P', // LATIN CAPITAL LETTER P WITH FLOURISH
    'Ƥ': 'P', // LATIN CAPITAL LETTER P WITH HOOK
    'Ꝕ': 'P', // LATIN CAPITAL LETTER P WITH SQUIRREL TAIL
    'Ᵽ': 'P', // LATIN CAPITAL LETTER P WITH STROKE
    'Ꝑ': 'P', // LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER
    'Ꝙ': 'Q', // LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE
    'Ꝗ': 'Q', // LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER R ROTUNDA' (Ꝛ)
    'Ŕ': 'R', // LATIN CAPITAL LETTER R WITH ACUTE
    'Ř': 'R', // LATIN CAPITAL LETTER R WITH CARON
    'Ŗ': 'R', // LATIN CAPITAL LETTER R WITH CEDILLA
    'Ṙ': 'R', // LATIN CAPITAL LETTER R WITH DOT ABOVE
    'Ṛ': 'R', // LATIN CAPITAL LETTER R WITH DOT BELOW
    'Ṝ': 'R', // LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON
    'Ȑ': 'R', // LATIN CAPITAL LETTER R WITH DOUBLE GRAVE
    'Ȓ': 'R', // LATIN CAPITAL LETTER R WITH INVERTED BREVE
    'Ṟ': 'R', // LATIN CAPITAL LETTER R WITH LINE BELOW
    'Ɍ': 'R', // LATIN CAPITAL LETTER R WITH STROKE
    'Ɽ': 'R', // LATIN CAPITAL LETTER R WITH TAIL
    'Ꜿ': 'C', // LATIN CAPITAL LETTER REVERSED C WITH DOT
    'Ǝ': 'E', // LATIN CAPITAL LETTER REVERSED E
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER RUM ROTUNDA' (Ꝝ)
    'Ś': 'S', // LATIN CAPITAL LETTER S WITH ACUTE
    'Ṥ': 'S', // LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE
    'Š': 'S', // LATIN CAPITAL LETTER S WITH CARON
    'Ṧ': 'S', // LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE
    'Ş': 'S', // LATIN CAPITAL LETTER S WITH CEDILLA
    'Ŝ': 'S', // LATIN CAPITAL LETTER S WITH CIRCUMFLEX
    'Ș': 'S', // LATIN CAPITAL LETTER S WITH COMMA BELOW
    'Ṡ': 'S', // LATIN CAPITAL LETTER S WITH DOT ABOVE
    'Ṣ': 'S', // LATIN CAPITAL LETTER S WITH DOT BELOW
    'Ṩ': 'S', // LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER SALTILLO' (Ꞌ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER SCHWA' (Ə)
    'ẞ': 'SS', // LATIN CAPITAL LETTER SHARP S
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL' (Ɋ)
    'Ť': 'T', // LATIN CAPITAL LETTER T WITH CARON
    'Ţ': 'T', // LATIN CAPITAL LETTER T WITH CEDILLA
    'Ṱ': 'T', // LATIN CAPITAL LETTER T WITH CIRCUMFLEX BELOW
    'Ț': 'T', // LATIN CAPITAL LETTER T WITH COMMA BELOW
    'Ⱦ': 'T', // LATIN CAPITAL LETTER T WITH DIAGONAL STROKE
    'Ṫ': 'T', // LATIN CAPITAL LETTER T WITH DOT ABOVE
    'Ṭ': 'T', // LATIN CAPITAL LETTER T WITH DOT BELOW
    'Ƭ': 'T', // LATIN CAPITAL LETTER T WITH HOOK
    'Ṯ': 'T', // LATIN CAPITAL LETTER T WITH LINE BELOW
    'Ʈ': 'T', // LATIN CAPITAL LETTER T WITH RETROFLEX HOOK
    'Ŧ': 'T', // LATIN CAPITAL LETTER T WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER THORN' (Þ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER THORN WITH STROKE' (Ꝥ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER' (Ꝧ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER TONE FIVE' (Ƽ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER TONE SIX' (Ƅ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER TONE TWO' (Ƨ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER TRESILLO' (Ꜫ)
    'Ɐ': 'A', // LATIN CAPITAL LETTER TURNED A
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER TURNED INSULAR G' (Ꝿ)
    'Ꞁ': 'L', // LATIN CAPITAL LETTER TURNED L
    'Ɯ': 'M', // LATIN CAPITAL LETTER TURNED M
    'Ʌ': 'V', // LATIN CAPITAL LETTER TURNED V
    'Ꜩ': 'TZ', // LATIN CAPITAL LETTER TZ
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER U BAR' (Ʉ)
    'Ú': 'U', // LATIN CAPITAL LETTER U WITH ACUTE
    'Ŭ': 'U', // LATIN CAPITAL LETTER U WITH BREVE
    'Ǔ': 'U', // LATIN CAPITAL LETTER U WITH CARON
    'Û': 'U', // LATIN CAPITAL LETTER U WITH CIRCUMFLEX
    'Ṷ': 'U', // LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW
    'Ü': 'U', // LATIN CAPITAL LETTER U WITH DIAERESIS
    'Ǘ': 'U', // LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE
    'Ǚ': 'U', // LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON
    'Ǜ': 'U', // LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE
    'Ǖ': 'U', // LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON
    'Ṳ': 'U', // LATIN CAPITAL LETTER U WITH DIAERESIS BELOW
    'Ụ': 'U', // LATIN CAPITAL LETTER U WITH DOT BELOW
    'Ű': 'U', // LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
    'Ȕ': 'U', // LATIN CAPITAL LETTER U WITH DOUBLE GRAVE
    'Ù': 'U', // LATIN CAPITAL LETTER U WITH GRAVE
    'Ủ': 'U', // LATIN CAPITAL LETTER U WITH HOOK ABOVE
    'Ư': 'U', // LATIN CAPITAL LETTER U WITH HORN
    'Ứ': 'U', // LATIN CAPITAL LETTER U WITH HORN AND ACUTE
    'Ự': 'U', // LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW
    'Ừ': 'U', // LATIN CAPITAL LETTER U WITH HORN AND GRAVE
    'Ử': 'U', // LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE
    'Ữ': 'U', // LATIN CAPITAL LETTER U WITH HORN AND TILDE
    'Ȗ': 'U', // LATIN CAPITAL LETTER U WITH INVERTED BREVE
    'Ū': 'U', // LATIN CAPITAL LETTER U WITH MACRON
    'Ṻ': 'U', // LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS
    'Ų': 'U', // LATIN CAPITAL LETTER U WITH OGONEK
    'Ů': 'U', // LATIN CAPITAL LETTER U WITH RING ABOVE
    'Ũ': 'U', // LATIN CAPITAL LETTER U WITH TILDE
    'Ṹ': 'U', // LATIN CAPITAL LETTER U WITH TILDE AND ACUTE
    'Ṵ': 'U', // LATIN CAPITAL LETTER U WITH TILDE BELOW
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER UPSILON' (Ʊ)
    'Ꝟ': 'V', // LATIN CAPITAL LETTER V WITH DIAGONAL STROKE
    'Ṿ': 'V', // LATIN CAPITAL LETTER V WITH DOT BELOW
    'Ʋ': 'V', // LATIN CAPITAL LETTER V WITH HOOK
    'Ṽ': 'V', // LATIN CAPITAL LETTER V WITH TILDE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER VEND' (Ꝩ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER VISIGOTHIC Z' (Ꝣ)
    'Ꝡ': 'VY', // LATIN CAPITAL LETTER VY
    'Ẃ': 'W', // LATIN CAPITAL LETTER W WITH ACUTE
    'Ŵ': 'W', // LATIN CAPITAL LETTER W WITH CIRCUMFLEX
    'Ẅ': 'W', // LATIN CAPITAL LETTER W WITH DIAERESIS
    'Ẇ': 'W', // LATIN CAPITAL LETTER W WITH DOT ABOVE
    'Ẉ': 'W', // LATIN CAPITAL LETTER W WITH DOT BELOW
    'Ẁ': 'W', // LATIN CAPITAL LETTER W WITH GRAVE
    'Ⱳ': 'W', // LATIN CAPITAL LETTER W WITH HOOK
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER WYNN' (Ƿ)
    'Ẍ': 'X', // LATIN CAPITAL LETTER X WITH DIAERESIS
    'Ẋ': 'X', // LATIN CAPITAL LETTER X WITH DOT ABOVE
    'Ý': 'Y', // LATIN CAPITAL LETTER Y WITH ACUTE
    'Ŷ': 'Y', // LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
    'Ÿ': 'Y', // LATIN CAPITAL LETTER Y WITH DIAERESIS
    'Ẏ': 'Y', // LATIN CAPITAL LETTER Y WITH DOT ABOVE
    'Ỵ': 'Y', // LATIN CAPITAL LETTER Y WITH DOT BELOW
    'Ỳ': 'Y', // LATIN CAPITAL LETTER Y WITH GRAVE
    'Ƴ': 'Y', // LATIN CAPITAL LETTER Y WITH HOOK
    'Ỷ': 'Y', // LATIN CAPITAL LETTER Y WITH HOOK ABOVE
    'Ỿ': 'Y', // LATIN CAPITAL LETTER Y WITH LOOP
    'Ȳ': 'Y', // LATIN CAPITAL LETTER Y WITH MACRON
    'Ɏ': 'Y', // LATIN CAPITAL LETTER Y WITH STROKE
    'Ỹ': 'Y', // LATIN CAPITAL LETTER Y WITH TILDE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CAPITAL LETTER YOGH' (Ȝ)
    'Ź': 'Z', // LATIN CAPITAL LETTER Z WITH ACUTE
    'Ž': 'Z', // LATIN CAPITAL LETTER Z WITH CARON
    'Ẑ': 'Z', // LATIN CAPITAL LETTER Z WITH CIRCUMFLEX
    'Ⱬ': 'Z', // LATIN CAPITAL LETTER Z WITH DESCENDER
    'Ż': 'Z', // LATIN CAPITAL LETTER Z WITH DOT ABOVE
    'Ẓ': 'Z', // LATIN CAPITAL LETTER Z WITH DOT BELOW
    'Ȥ': 'Z', // LATIN CAPITAL LETTER Z WITH HOOK
    'Ẕ': 'Z', // LATIN CAPITAL LETTER Z WITH LINE BELOW
    'Ƶ': 'Z', // LATIN CAPITAL LETTER Z WITH STROKE
    'Ĳ': 'IJ', // LATIN CAPITAL LIGATURE IJ
    'Œ': 'OE', // LATIN CAPITAL LIGATURE OE
    // CANNOT FIND APPROXIMATION FOR 'LATIN CROSS' (✝)
    // CANNOT FIND APPROXIMATION FOR 'LATIN EPIGRAPHIC LETTER ARCHAIC M' (ꟿ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN EPIGRAPHIC LETTER I LONGA' (ꟾ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN EPIGRAPHIC LETTER INVERTED M' (ꟽ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN EPIGRAPHIC LETTER REVERSED F' (ꟻ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN EPIGRAPHIC LETTER REVERSED P' (ꟼ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER AIN' (ᴥ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER ALVEOLAR CLICK' (ǂ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER BIDENTAL PERCUSSIVE' (ʭ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER BILABIAL CLICK' (ʘ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER BILABIAL PERCUSSIVE' (ʬ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER DENTAL CLICK' (ǀ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER GLOTTAL STOP' (ʔ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER GLOTTAL STOP WITH STROKE' (ʡ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER INVERTED GLOTTAL STOP' (ʖ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER INVERTED GLOTTAL STOP WITH STROKE' (ƾ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER LATERAL CLICK' (ǁ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER PHARYNGEAL VOICED FRICATIVE' (ʕ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER RETROFLEX CLICK' (ǃ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER REVERSED ESH LOOP' (ƪ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE' (ʢ)
    'ᴀ': 'A', // LATIN LETTER SMALL CAPITAL A
    'ᴁ': 'AE', // LATIN LETTER SMALL CAPITAL AE
    'ʙ': 'B', // LATIN LETTER SMALL CAPITAL B
    'ᴃ': 'B', // LATIN LETTER SMALL CAPITAL BARRED B
    'ᴄ': 'C', // LATIN LETTER SMALL CAPITAL C
    'ᴅ': 'D', // LATIN LETTER SMALL CAPITAL D
    'ᴇ': 'E', // LATIN LETTER SMALL CAPITAL E
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER SMALL CAPITAL ETH' (ᴆ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER SMALL CAPITAL EZH' (ᴣ)
    'ꜰ': 'F', // LATIN LETTER SMALL CAPITAL F
    'ɢ': 'G', // LATIN LETTER SMALL CAPITAL G
    'ʛ': 'G', // LATIN LETTER SMALL CAPITAL G WITH HOOK
    'ʜ': 'H', // LATIN LETTER SMALL CAPITAL H
    'ɪ': 'I', // LATIN LETTER SMALL CAPITAL I
    'ʁ': 'R', // LATIN LETTER SMALL CAPITAL INVERTED R
    'ᴊ': 'J', // LATIN LETTER SMALL CAPITAL J
    'ᴋ': 'K', // LATIN LETTER SMALL CAPITAL K
    'ʟ': 'L', // LATIN LETTER SMALL CAPITAL L
    'ᴌ': 'L', // LATIN LETTER SMALL CAPITAL L WITH STROKE
    'ᴍ': 'M', // LATIN LETTER SMALL CAPITAL M
    'ɴ': 'N', // LATIN LETTER SMALL CAPITAL N
    'ᴏ': 'O', // LATIN LETTER SMALL CAPITAL O
    'ɶ': 'OE', // LATIN LETTER SMALL CAPITAL OE
    'ᴐ': 'O', // LATIN LETTER SMALL CAPITAL OPEN O
    'ᴕ': 'OU', // LATIN LETTER SMALL CAPITAL OU
    'ᴘ': 'P', // LATIN LETTER SMALL CAPITAL P
    'ʀ': 'R', // LATIN LETTER SMALL CAPITAL R
    'ᴎ': 'N', // LATIN LETTER SMALL CAPITAL REVERSED N
    'ᴙ': 'R', // LATIN LETTER SMALL CAPITAL REVERSED R
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER SMALL CAPITAL RUM' (ꝶ)
    'ꜱ': 'S', // LATIN LETTER SMALL CAPITAL S
    'ᴛ': 'T', // LATIN LETTER SMALL CAPITAL T
    'ⱻ': 'E', // LATIN LETTER SMALL CAPITAL TURNED E
    'ᴚ': 'R', // LATIN LETTER SMALL CAPITAL TURNED R
    'ᴜ': 'U', // LATIN LETTER SMALL CAPITAL U
    'ᴠ': 'V', // LATIN LETTER SMALL CAPITAL V
    'ᴡ': 'W', // LATIN LETTER SMALL CAPITAL W
    'ʏ': 'Y', // LATIN LETTER SMALL CAPITAL Y
    'ᴢ': 'Z', // LATIN LETTER SMALL CAPITAL Z
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER STRETCHED C' (ʗ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER TWO WITH STROKE' (ƻ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER VOICED LARYNGEAL SPIRANT' (ᴤ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER WYNN' (ƿ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN LETTER YR' (Ʀ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL CAPITAL LETTER I WITH STROKE' (ᵻ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL CAPITAL LETTER U WITH STROKE' (ᵾ)
    'á': 'a', // LATIN SMALL LETTER A WITH ACUTE
    'ă': 'a', // LATIN SMALL LETTER A WITH BREVE
    'ắ': 'a', // LATIN SMALL LETTER A WITH BREVE AND ACUTE
    'ặ': 'a', // LATIN SMALL LETTER A WITH BREVE AND DOT BELOW
    'ằ': 'a', // LATIN SMALL LETTER A WITH BREVE AND GRAVE
    'ẳ': 'a', // LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE
    'ẵ': 'a', // LATIN SMALL LETTER A WITH BREVE AND TILDE
    'ǎ': 'a', // LATIN SMALL LETTER A WITH CARON
    'â': 'a', // LATIN SMALL LETTER A WITH CIRCUMFLEX
    'ấ': 'a', // LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE
    'ậ': 'a', // LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW
    'ầ': 'a', // LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE
    'ẩ': 'a', // LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE
    'ẫ': 'a', // LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE
    'ä': 'a', // LATIN SMALL LETTER A WITH DIAERESIS
    'ǟ': 'a', // LATIN SMALL LETTER A WITH DIAERESIS AND MACRON
    'ȧ': 'a', // LATIN SMALL LETTER A WITH DOT ABOVE
    'ǡ': 'a', // LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON
    'ạ': 'a', // LATIN SMALL LETTER A WITH DOT BELOW
    'ȁ': 'a', // LATIN SMALL LETTER A WITH DOUBLE GRAVE
    'à': 'a', // LATIN SMALL LETTER A WITH GRAVE
    'ả': 'a', // LATIN SMALL LETTER A WITH HOOK ABOVE
    'ȃ': 'a', // LATIN SMALL LETTER A WITH INVERTED BREVE
    'ā': 'a', // LATIN SMALL LETTER A WITH MACRON
    'ą': 'a', // LATIN SMALL LETTER A WITH OGONEK
    'ᶏ': 'a', // LATIN SMALL LETTER A WITH RETROFLEX HOOK
    'ẚ': 'a', // LATIN SMALL LETTER A WITH RIGHT HALF RING
    'å': 'a', // LATIN SMALL LETTER A WITH RING ABOVE
    'ǻ': 'a', // LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE
    'ḁ': 'a', // LATIN SMALL LETTER A WITH RING BELOW
    'ⱥ': 'a', // LATIN SMALL LETTER A WITH STROKE
    'ã': 'a', // LATIN SMALL LETTER A WITH TILDE
    'ꜳ': 'aa', // LATIN SMALL LETTER AA
    'æ': 'ae', // LATIN SMALL LETTER AE
    'ǽ': 'ae', // LATIN SMALL LETTER AE WITH ACUTE
    'ǣ': 'ae', // LATIN SMALL LETTER AE WITH MACRON
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ALPHA' (ɑ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ALPHA WITH RETROFLEX HOOK' (ᶐ)
    'ꜵ': 'ao', // LATIN SMALL LETTER AO
    'ꜷ': 'au', // LATIN SMALL LETTER AU
    'ꜹ': 'av', // LATIN SMALL LETTER AV
    'ꜻ': 'av', // LATIN SMALL LETTER AV WITH HORIZONTAL BAR
    'ꜽ': 'ay', // LATIN SMALL LETTER AY
    'ḃ': 'b', // LATIN SMALL LETTER B WITH DOT ABOVE
    'ḅ': 'b', // LATIN SMALL LETTER B WITH DOT BELOW
    'ɓ': 'b', // LATIN SMALL LETTER B WITH HOOK
    'ḇ': 'b', // LATIN SMALL LETTER B WITH LINE BELOW
    'ᵬ': 'b', // LATIN SMALL LETTER B WITH MIDDLE TILDE
    'ᶀ': 'b', // LATIN SMALL LETTER B WITH PALATAL HOOK
    'ƀ': 'b', // LATIN SMALL LETTER B WITH STROKE
    'ƃ': 'b', // LATIN SMALL LETTER B WITH TOPBAR
    'ɵ': 'o', // LATIN SMALL LETTER BARRED O
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER BOTTOM HALF O' (ᴗ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER BROKEN L' (ꝇ)
    'ć': 'c', // LATIN SMALL LETTER C WITH ACUTE
    'č': 'c', // LATIN SMALL LETTER C WITH CARON
    'ç': 'c', // LATIN SMALL LETTER C WITH CEDILLA
    'ḉ': 'c', // LATIN SMALL LETTER C WITH CEDILLA AND ACUTE
    'ĉ': 'c', // LATIN SMALL LETTER C WITH CIRCUMFLEX
    'ɕ': 'c', // LATIN SMALL LETTER C WITH CURL
    'ċ': 'c', // LATIN SMALL LETTER C WITH DOT ABOVE
    'ƈ': 'c', // LATIN SMALL LETTER C WITH HOOK
    'ȼ': 'c', // LATIN SMALL LETTER C WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER CLOSED OMEGA' (ɷ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER CLOSED OPEN E' (ʚ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER CLOSED REVERSED OPEN E' (ɞ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER CON' (ꝯ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER CUATRILLO' (ꜭ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER CUATRILLO WITH COMMA' (ꜯ)
    'ď': 'd', // LATIN SMALL LETTER D WITH CARON
    'ḑ': 'd', // LATIN SMALL LETTER D WITH CEDILLA
    'ḓ': 'd', // LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW
    'ȡ': 'd', // LATIN SMALL LETTER D WITH CURL
    'ḋ': 'd', // LATIN SMALL LETTER D WITH DOT ABOVE
    'ḍ': 'd', // LATIN SMALL LETTER D WITH DOT BELOW
    'ɗ': 'd', // LATIN SMALL LETTER D WITH HOOK
    'ᶑ': 'd', // LATIN SMALL LETTER D WITH HOOK AND TAIL
    'ḏ': 'd', // LATIN SMALL LETTER D WITH LINE BELOW
    'ᵭ': 'd', // LATIN SMALL LETTER D WITH MIDDLE TILDE
    'ᶁ': 'd', // LATIN SMALL LETTER D WITH PALATAL HOOK
    'đ': 'd', // LATIN SMALL LETTER D WITH STROKE
    'ɖ': 'd', // LATIN SMALL LETTER D WITH TAIL
    'ƌ': 'd', // LATIN SMALL LETTER D WITH TOPBAR
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER DB DIGRAPH' (ȸ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER DELTA' (ẟ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER DEZH DIGRAPH' (ʤ)
    'ı': 'i', // LATIN SMALL LETTER DOTLESS I
    'ȷ': 'j', // LATIN SMALL LETTER DOTLESS J
    'ɟ': 'j', // LATIN SMALL LETTER DOTLESS J WITH STROKE
    'ʄ': 'j', // LATIN SMALL LETTER DOTLESS J WITH STROKE AND HOOK
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER DUM' (ꝱ)
    'ǳ': 'dz', // LATIN SMALL LETTER DZ
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER DZ DIGRAPH' (ʣ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER DZ DIGRAPH WITH CURL' (ʥ)
    'ǆ': 'dz', // LATIN SMALL LETTER DZ WITH CARON
    'é': 'e', // LATIN SMALL LETTER E WITH ACUTE
    'ĕ': 'e', // LATIN SMALL LETTER E WITH BREVE
    'ě': 'e', // LATIN SMALL LETTER E WITH CARON
    'ȩ': 'e', // LATIN SMALL LETTER E WITH CEDILLA
    'ḝ': 'e', // LATIN SMALL LETTER E WITH CEDILLA AND BREVE
    'ê': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX
    'ế': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE
    'ệ': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW
    'ề': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE
    'ể': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE
    'ễ': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE
    'ḙ': 'e', // LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW
    'ë': 'e', // LATIN SMALL LETTER E WITH DIAERESIS
    'ė': 'e', // LATIN SMALL LETTER E WITH DOT ABOVE
    'ẹ': 'e', // LATIN SMALL LETTER E WITH DOT BELOW
    'ȅ': 'e', // LATIN SMALL LETTER E WITH DOUBLE GRAVE
    'è': 'e', // LATIN SMALL LETTER E WITH GRAVE
    'ẻ': 'e', // LATIN SMALL LETTER E WITH HOOK ABOVE
    'ȇ': 'e', // LATIN SMALL LETTER E WITH INVERTED BREVE
    'ē': 'e', // LATIN SMALL LETTER E WITH MACRON
    'ḗ': 'e', // LATIN SMALL LETTER E WITH MACRON AND ACUTE
    'ḕ': 'e', // LATIN SMALL LETTER E WITH MACRON AND GRAVE
    'ⱸ': 'e', // LATIN SMALL LETTER E WITH NOTCH
    'ę': 'e', // LATIN SMALL LETTER E WITH OGONEK
    'ᶒ': 'e', // LATIN SMALL LETTER E WITH RETROFLEX HOOK
    'ɇ': 'e', // LATIN SMALL LETTER E WITH STROKE
    'ẽ': 'e', // LATIN SMALL LETTER E WITH TILDE
    'ḛ': 'e', // LATIN SMALL LETTER E WITH TILDE BELOW
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EGYPTOLOGICAL AIN' (ꜥ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EGYPTOLOGICAL ALEF' (ꜣ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ENG' (ŋ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ESH' (ʃ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ESH WITH CURL' (ʆ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ESH WITH PALATAL HOOK' (ᶋ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ESH WITH RETROFLEX HOOK' (ᶘ)
    'ꝫ': 'et', // LATIN SMALL LETTER ET
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER ETH' (ð)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EZH' (ʒ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EZH REVERSED' (ƹ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EZH WITH CARON' (ǯ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EZH WITH CURL' (ʓ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EZH WITH RETROFLEX HOOK' (ᶚ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER EZH WITH TAIL' (ƺ)
    'ḟ': 'f', // LATIN SMALL LETTER F WITH DOT ABOVE
    'ƒ': 'f', // LATIN SMALL LETTER F WITH HOOK
    'ᵮ': 'f', // LATIN SMALL LETTER F WITH MIDDLE TILDE
    'ᶂ': 'f', // LATIN SMALL LETTER F WITH PALATAL HOOK
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER FENG DIGRAPH' (ʩ)
    'ǵ': 'g', // LATIN SMALL LETTER G WITH ACUTE
    'ğ': 'g', // LATIN SMALL LETTER G WITH BREVE
    'ǧ': 'g', // LATIN SMALL LETTER G WITH CARON
    'ģ': 'g', // LATIN SMALL LETTER G WITH CEDILLA
    'ĝ': 'g', // LATIN SMALL LETTER G WITH CIRCUMFLEX
    'ġ': 'g', // LATIN SMALL LETTER G WITH DOT ABOVE
    'ɠ': 'g', // LATIN SMALL LETTER G WITH HOOK
    'ḡ': 'g', // LATIN SMALL LETTER G WITH MACRON
    'ᶃ': 'g', // LATIN SMALL LETTER G WITH PALATAL HOOK
    'ǥ': 'g', // LATIN SMALL LETTER G WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER GAMMA' (ɣ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER GLOTTAL STOP' (ɂ)
    'ḫ': 'h', // LATIN SMALL LETTER H WITH BREVE BELOW
    'ȟ': 'h', // LATIN SMALL LETTER H WITH CARON
    'ḩ': 'h', // LATIN SMALL LETTER H WITH CEDILLA
    'ĥ': 'h', // LATIN SMALL LETTER H WITH CIRCUMFLEX
    'ⱨ': 'h', // LATIN SMALL LETTER H WITH DESCENDER
    'ḧ': 'h', // LATIN SMALL LETTER H WITH DIAERESIS
    'ḣ': 'h', // LATIN SMALL LETTER H WITH DOT ABOVE
    'ḥ': 'h', // LATIN SMALL LETTER H WITH DOT BELOW
    'ɦ': 'h', // LATIN SMALL LETTER H WITH HOOK
    'ẖ': 'h', // LATIN SMALL LETTER H WITH LINE BELOW
    'ħ': 'h', // LATIN SMALL LETTER H WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER HALF H' (ⱶ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER HENG' (ꜧ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER HENG WITH HOOK' (ɧ)
    'ƕ': 'hv', // LATIN SMALL LETTER HV
    'í': 'i', // LATIN SMALL LETTER I WITH ACUTE
    'ĭ': 'i', // LATIN SMALL LETTER I WITH BREVE
    'ǐ': 'i', // LATIN SMALL LETTER I WITH CARON
    'î': 'i', // LATIN SMALL LETTER I WITH CIRCUMFLEX
    'ï': 'i', // LATIN SMALL LETTER I WITH DIAERESIS
    'ḯ': 'i', // LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE
    'ị': 'i', // LATIN SMALL LETTER I WITH DOT BELOW
    'ȉ': 'i', // LATIN SMALL LETTER I WITH DOUBLE GRAVE
    'ì': 'i', // LATIN SMALL LETTER I WITH GRAVE
    'ỉ': 'i', // LATIN SMALL LETTER I WITH HOOK ABOVE
    'ȋ': 'i', // LATIN SMALL LETTER I WITH INVERTED BREVE
    'ī': 'i', // LATIN SMALL LETTER I WITH MACRON
    'į': 'i', // LATIN SMALL LETTER I WITH OGONEK
    'ᶖ': 'i', // LATIN SMALL LETTER I WITH RETROFLEX HOOK
    'ɨ': 'i', // LATIN SMALL LETTER I WITH STROKE
    'ĩ': 'i', // LATIN SMALL LETTER I WITH TILDE
    'ḭ': 'i', // LATIN SMALL LETTER I WITH TILDE BELOW
    'ꝺ': 'd', // LATIN SMALL LETTER INSULAR D
    'ꝼ': 'f', // LATIN SMALL LETTER INSULAR F
    'ᵹ': 'g', // LATIN SMALL LETTER INSULAR G
    'ꞃ': 'r', // LATIN SMALL LETTER INSULAR R
    'ꞅ': 's', // LATIN SMALL LETTER INSULAR S
    'ꞇ': 't', // LATIN SMALL LETTER INSULAR T
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER IOTA' (ɩ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER IOTA WITH STROKE' (ᵼ)
    'ꝭ': 'is', // LATIN SMALL LETTER IS
    'ǰ': 'j', // LATIN SMALL LETTER J WITH CARON
    'ĵ': 'j', // LATIN SMALL LETTER J WITH CIRCUMFLEX
    'ʝ': 'j', // LATIN SMALL LETTER J WITH CROSSED-TAIL
    'ɉ': 'j', // LATIN SMALL LETTER J WITH STROKE
    'ḱ': 'k', // LATIN SMALL LETTER K WITH ACUTE
    'ǩ': 'k', // LATIN SMALL LETTER K WITH CARON
    'ķ': 'k', // LATIN SMALL LETTER K WITH CEDILLA
    'ⱪ': 'k', // LATIN SMALL LETTER K WITH DESCENDER
    'ꝃ': 'k', // LATIN SMALL LETTER K WITH DIAGONAL STROKE
    'ḳ': 'k', // LATIN SMALL LETTER K WITH DOT BELOW
    'ƙ': 'k', // LATIN SMALL LETTER K WITH HOOK
    'ḵ': 'k', // LATIN SMALL LETTER K WITH LINE BELOW
    'ᶄ': 'k', // LATIN SMALL LETTER K WITH PALATAL HOOK
    'ꝁ': 'k', // LATIN SMALL LETTER K WITH STROKE
    'ꝅ': 'k', // LATIN SMALL LETTER K WITH STROKE AND DIAGONAL STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER KRA' (ĸ)
    'ĺ': 'l', // LATIN SMALL LETTER L WITH ACUTE
    'ƚ': 'l', // LATIN SMALL LETTER L WITH BAR
    'ɬ': 'l', // LATIN SMALL LETTER L WITH BELT
    'ľ': 'l', // LATIN SMALL LETTER L WITH CARON
    'ļ': 'l', // LATIN SMALL LETTER L WITH CEDILLA
    'ḽ': 'l', // LATIN SMALL LETTER L WITH CIRCUMFLEX BELOW
    'ȴ': 'l', // LATIN SMALL LETTER L WITH CURL
    'ḷ': 'l', // LATIN SMALL LETTER L WITH DOT BELOW
    'ḹ': 'l', // LATIN SMALL LETTER L WITH DOT BELOW AND MACRON
    'ⱡ': 'l', // LATIN SMALL LETTER L WITH DOUBLE BAR
    'ꝉ': 'l', // LATIN SMALL LETTER L WITH HIGH STROKE
    'ḻ': 'l', // LATIN SMALL LETTER L WITH LINE BELOW
    'ŀ': 'l', // LATIN SMALL LETTER L WITH MIDDLE DOT
    'ɫ': 'l', // LATIN SMALL LETTER L WITH MIDDLE TILDE
    'ᶅ': 'l', // LATIN SMALL LETTER L WITH PALATAL HOOK
    'ɭ': 'l', // LATIN SMALL LETTER L WITH RETROFLEX HOOK
    'ł': 'l', // LATIN SMALL LETTER L WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER LAMBDA WITH STROKE' (ƛ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER LEZH' (ɮ)
    'ǉ': 'lj', // LATIN SMALL LETTER LJ
    'ſ': 's', // LATIN SMALL LETTER LONG S
    'ẜ': 's', // LATIN SMALL LETTER LONG S WITH DIAGONAL STROKE
    'ẛ': 's', // LATIN SMALL LETTER LONG S WITH DOT ABOVE
    'ẝ': 's', // LATIN SMALL LETTER LONG S WITH HIGH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER LS DIGRAPH' (ʪ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER LUM' (ꝲ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER LZ DIGRAPH' (ʫ)
    'ḿ': 'm', // LATIN SMALL LETTER M WITH ACUTE
    'ṁ': 'm', // LATIN SMALL LETTER M WITH DOT ABOVE
    'ṃ': 'm', // LATIN SMALL LETTER M WITH DOT BELOW
    'ɱ': 'm', // LATIN SMALL LETTER M WITH HOOK
    'ᵯ': 'm', // LATIN SMALL LETTER M WITH MIDDLE TILDE
    'ᶆ': 'm', // LATIN SMALL LETTER M WITH PALATAL HOOK
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER MIDDLE-WELSH LL' (ỻ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER MIDDLE-WELSH V' (ỽ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER MUM' (ꝳ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER N PRECEDED BY APOSTROPHE' (ŉ)
    'ń': 'n', // LATIN SMALL LETTER N WITH ACUTE
    'ň': 'n', // LATIN SMALL LETTER N WITH CARON
    'ņ': 'n', // LATIN SMALL LETTER N WITH CEDILLA
    'ṋ': 'n', // LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW
    'ȵ': 'n', // LATIN SMALL LETTER N WITH CURL
    'ṅ': 'n', // LATIN SMALL LETTER N WITH DOT ABOVE
    'ṇ': 'n', // LATIN SMALL LETTER N WITH DOT BELOW
    'ǹ': 'n', // LATIN SMALL LETTER N WITH GRAVE
    'ɲ': 'n', // LATIN SMALL LETTER N WITH LEFT HOOK
    'ṉ': 'n', // LATIN SMALL LETTER N WITH LINE BELOW
    'ƞ': 'n', // LATIN SMALL LETTER N WITH LONG RIGHT LEG
    'ᵰ': 'n', // LATIN SMALL LETTER N WITH MIDDLE TILDE
    'ᶇ': 'n', // LATIN SMALL LETTER N WITH PALATAL HOOK
    'ɳ': 'n', // LATIN SMALL LETTER N WITH RETROFLEX HOOK
    'ñ': 'n', // LATIN SMALL LETTER N WITH TILDE
    'ǌ': 'nj', // LATIN SMALL LETTER NJ
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER NUM' (ꝴ)
    'ó': 'o', // LATIN SMALL LETTER O WITH ACUTE
    'ŏ': 'o', // LATIN SMALL LETTER O WITH BREVE
    'ǒ': 'o', // LATIN SMALL LETTER O WITH CARON
    'ô': 'o', // LATIN SMALL LETTER O WITH CIRCUMFLEX
    'ố': 'o', // LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE
    'ộ': 'o', // LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW
    'ồ': 'o', // LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE
    'ổ': 'o', // LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE
    'ỗ': 'o', // LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE
    'ö': 'o', // LATIN SMALL LETTER O WITH DIAERESIS
    'ȫ': 'o', // LATIN SMALL LETTER O WITH DIAERESIS AND MACRON
    'ȯ': 'o', // LATIN SMALL LETTER O WITH DOT ABOVE
    'ȱ': 'o', // LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON
    'ọ': 'o', // LATIN SMALL LETTER O WITH DOT BELOW
    'ő': 'o', // LATIN SMALL LETTER O WITH DOUBLE ACUTE
    'ȍ': 'o', // LATIN SMALL LETTER O WITH DOUBLE GRAVE
    'ò': 'o', // LATIN SMALL LETTER O WITH GRAVE
    'ỏ': 'o', // LATIN SMALL LETTER O WITH HOOK ABOVE
    'ơ': 'o', // LATIN SMALL LETTER O WITH HORN
    'ớ': 'o', // LATIN SMALL LETTER O WITH HORN AND ACUTE
    'ợ': 'o', // LATIN SMALL LETTER O WITH HORN AND DOT BELOW
    'ờ': 'o', // LATIN SMALL LETTER O WITH HORN AND GRAVE
    'ở': 'o', // LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE
    'ỡ': 'o', // LATIN SMALL LETTER O WITH HORN AND TILDE
    'ȏ': 'o', // LATIN SMALL LETTER O WITH INVERTED BREVE
    'ꝋ': 'o', // LATIN SMALL LETTER O WITH LONG STROKE OVERLAY
    'ꝍ': 'o', // LATIN SMALL LETTER O WITH LOOP
    'ⱺ': 'o', // LATIN SMALL LETTER O WITH LOW RING INSIDE
    'ō': 'o', // LATIN SMALL LETTER O WITH MACRON
    'ṓ': 'o', // LATIN SMALL LETTER O WITH MACRON AND ACUTE
    'ṑ': 'o', // LATIN SMALL LETTER O WITH MACRON AND GRAVE
    'ǫ': 'o', // LATIN SMALL LETTER O WITH OGONEK
    'ǭ': 'o', // LATIN SMALL LETTER O WITH OGONEK AND MACRON
    'ø': 'o', // LATIN SMALL LETTER O WITH STROKE
    'ǿ': 'o', // LATIN SMALL LETTER O WITH STROKE AND ACUTE
    'õ': 'o', // LATIN SMALL LETTER O WITH TILDE
    'ṍ': 'o', // LATIN SMALL LETTER O WITH TILDE AND ACUTE
    'ṏ': 'o', // LATIN SMALL LETTER O WITH TILDE AND DIAERESIS
    'ȭ': 'o', // LATIN SMALL LETTER O WITH TILDE AND MACRON
    'ƣ': 'oi', // LATIN SMALL LETTER OI
    'ꝏ': 'oo', // LATIN SMALL LETTER OO
    'ɛ': 'e', // LATIN SMALL LETTER OPEN E
    'ᶓ': 'e', // LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK
    'ɔ': 'o', // LATIN SMALL LETTER OPEN O
    'ᶗ': 'o', // LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK
    'ȣ': 'ou', // LATIN SMALL LETTER OU
    'ṕ': 'p', // LATIN SMALL LETTER P WITH ACUTE
    'ṗ': 'p', // LATIN SMALL LETTER P WITH DOT ABOVE
    'ꝓ': 'p', // LATIN SMALL LETTER P WITH FLOURISH
    'ƥ': 'p', // LATIN SMALL LETTER P WITH HOOK
    'ᵱ': 'p', // LATIN SMALL LETTER P WITH MIDDLE TILDE
    'ᶈ': 'p', // LATIN SMALL LETTER P WITH PALATAL HOOK
    'ꝕ': 'p', // LATIN SMALL LETTER P WITH SQUIRREL TAIL
    'ᵽ': 'p', // LATIN SMALL LETTER P WITH STROKE
    'ꝑ': 'p', // LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER PHI' (ɸ)
    'ꝙ': 'q', // LATIN SMALL LETTER Q WITH DIAGONAL STROKE
    'ʠ': 'q', // LATIN SMALL LETTER Q WITH HOOK
    'ɋ': 'q', // LATIN SMALL LETTER Q WITH HOOK TAIL
    'ꝗ': 'q', // LATIN SMALL LETTER Q WITH STROKE THROUGH DESCENDER
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER QP DIGRAPH' (ȹ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER R ROTUNDA' (ꝛ)
    'ŕ': 'r', // LATIN SMALL LETTER R WITH ACUTE
    'ř': 'r', // LATIN SMALL LETTER R WITH CARON
    'ŗ': 'r', // LATIN SMALL LETTER R WITH CEDILLA
    'ṙ': 'r', // LATIN SMALL LETTER R WITH DOT ABOVE
    'ṛ': 'r', // LATIN SMALL LETTER R WITH DOT BELOW
    'ṝ': 'r', // LATIN SMALL LETTER R WITH DOT BELOW AND MACRON
    'ȑ': 'r', // LATIN SMALL LETTER R WITH DOUBLE GRAVE
    'ɾ': 'r', // LATIN SMALL LETTER R WITH FISHHOOK
    'ᵳ': 'r', // LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE
    'ȓ': 'r', // LATIN SMALL LETTER R WITH INVERTED BREVE
    'ṟ': 'r', // LATIN SMALL LETTER R WITH LINE BELOW
    'ɼ': 'r', // LATIN SMALL LETTER R WITH LONG LEG
    'ᵲ': 'r', // LATIN SMALL LETTER R WITH MIDDLE TILDE
    'ᶉ': 'r', // LATIN SMALL LETTER R WITH PALATAL HOOK
    'ɍ': 'r', // LATIN SMALL LETTER R WITH STROKE
    'ɽ': 'r', // LATIN SMALL LETTER R WITH TAIL
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER RAMS HORN' (ɤ)
    'ↄ': 'c', // LATIN SMALL LETTER REVERSED C
    'ꜿ': 'c', // LATIN SMALL LETTER REVERSED C WITH DOT
    'ɘ': 'e', // LATIN SMALL LETTER REVERSED E
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER REVERSED OPEN E' (ɜ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER REVERSED OPEN E WITH HOOK' (ɝ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK' (ᶔ)
    'ɿ': 'r', // LATIN SMALL LETTER REVERSED R WITH FISHHOOK
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER RUM' (ꝵ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER RUM ROTUNDA' (ꝝ)
    'ś': 's', // LATIN SMALL LETTER S WITH ACUTE
    'ṥ': 's', // LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE
    'š': 's', // LATIN SMALL LETTER S WITH CARON
    'ṧ': 's', // LATIN SMALL LETTER S WITH CARON AND DOT ABOVE
    'ş': 's', // LATIN SMALL LETTER S WITH CEDILLA
    'ŝ': 's', // LATIN SMALL LETTER S WITH CIRCUMFLEX
    'ș': 's', // LATIN SMALL LETTER S WITH COMMA BELOW
    'ṡ': 's', // LATIN SMALL LETTER S WITH DOT ABOVE
    'ṣ': 's', // LATIN SMALL LETTER S WITH DOT BELOW
    'ṩ': 's', // LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE
    'ʂ': 's', // LATIN SMALL LETTER S WITH HOOK
    'ᵴ': 's', // LATIN SMALL LETTER S WITH MIDDLE TILDE
    'ᶊ': 's', // LATIN SMALL LETTER S WITH PALATAL HOOK
    'ȿ': 's', // LATIN SMALL LETTER S WITH SWASH TAIL
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SALTILLO' (ꞌ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SCHWA' (ə)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SCHWA WITH HOOK' (ɚ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK' (ᶕ)
    'ɡ': 'g', // LATIN SMALL LETTER SCRIPT G
    'ß': 'ss', // LATIN SMALL LETTER SHARP S
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SIDEWAYS DIAERESIZED U' (ᴞ)
    'ᴑ': 'o', // LATIN SMALL LETTER SIDEWAYS O
    'ᴓ': 'o', // LATIN SMALL LETTER SIDEWAYS O WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SIDEWAYS OPEN O' (ᴒ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SIDEWAYS TURNED M' (ᴟ)
    'ᴝ': 'u', // LATIN SMALL LETTER SIDEWAYS U
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER SQUAT REVERSED ESH' (ʅ)
    'ť': 't', // LATIN SMALL LETTER T WITH CARON
    'ţ': 't', // LATIN SMALL LETTER T WITH CEDILLA
    'ṱ': 't', // LATIN SMALL LETTER T WITH CIRCUMFLEX BELOW
    'ț': 't', // LATIN SMALL LETTER T WITH COMMA BELOW
    'ȶ': 't', // LATIN SMALL LETTER T WITH CURL
    'ẗ': 't', // LATIN SMALL LETTER T WITH DIAERESIS
    'ⱦ': 't', // LATIN SMALL LETTER T WITH DIAGONAL STROKE
    'ṫ': 't', // LATIN SMALL LETTER T WITH DOT ABOVE
    'ṭ': 't', // LATIN SMALL LETTER T WITH DOT BELOW
    'ƭ': 't', // LATIN SMALL LETTER T WITH HOOK
    'ṯ': 't', // LATIN SMALL LETTER T WITH LINE BELOW
    'ᵵ': 't', // LATIN SMALL LETTER T WITH MIDDLE TILDE
    'ƫ': 't', // LATIN SMALL LETTER T WITH PALATAL HOOK
    'ʈ': 't', // LATIN SMALL LETTER T WITH RETROFLEX HOOK
    'ŧ': 't', // LATIN SMALL LETTER T WITH STROKE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TAILLESS PHI' (ⱷ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TC DIGRAPH WITH CURL' (ʨ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TESH DIGRAPH' (ʧ)
    'ᵺ': 'th', // LATIN SMALL LETTER TH WITH STRIKETHROUGH
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER THORN' (þ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER THORN WITH STROKE' (ꝥ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER' (ꝧ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TONE FIVE' (ƽ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TONE SIX' (ƅ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TONE TWO' (ƨ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TOP HALF O' (ᴖ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TRESILLO' (ꜫ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TS DIGRAPH' (ʦ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TUM' (ꝷ)
    'ɐ': 'a', // LATIN SMALL LETTER TURNED A
    'ᴂ': 'ae', // LATIN SMALL LETTER TURNED AE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TURNED ALPHA' (ɒ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TURNED DELTA' (ƍ)
    'ǝ': 'e', // LATIN SMALL LETTER TURNED E
    'ᵷ': 'g', // LATIN SMALL LETTER TURNED G
    'ɥ': 'h', // LATIN SMALL LETTER TURNED H
    'ʮ': 'h', // LATIN SMALL LETTER TURNED H WITH FISHHOOK
    'ʯ': 'h', // LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL
    'ᴉ': 'i', // LATIN SMALL LETTER TURNED I
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TURNED INSULAR G' (ꝿ)
    'ʞ': 'k', // LATIN SMALL LETTER TURNED K
    'ꞁ': 'l', // LATIN SMALL LETTER TURNED L
    'ɯ': 'm', // LATIN SMALL LETTER TURNED M
    'ɰ': 'm', // LATIN SMALL LETTER TURNED M WITH LONG LEG
    'ᴔ': 'oe', // LATIN SMALL LETTER TURNED OE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER TURNED OPEN E' (ᴈ)
    'ɹ': 'r', // LATIN SMALL LETTER TURNED R
    'ɻ': 'r', // LATIN SMALL LETTER TURNED R WITH HOOK
    'ɺ': 'r', // LATIN SMALL LETTER TURNED R WITH LONG LEG
    'ⱹ': 'r', // LATIN SMALL LETTER TURNED R WITH TAIL
    'ʇ': 't', // LATIN SMALL LETTER TURNED T
    'ʌ': 'v', // LATIN SMALL LETTER TURNED V
    'ʍ': 'w', // LATIN SMALL LETTER TURNED W
    'ʎ': 'y', // LATIN SMALL LETTER TURNED Y
    'ꜩ': 'tz', // LATIN SMALL LETTER TZ
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER U BAR' (ʉ)
    'ú': 'u', // LATIN SMALL LETTER U WITH ACUTE
    'ŭ': 'u', // LATIN SMALL LETTER U WITH BREVE
    'ǔ': 'u', // LATIN SMALL LETTER U WITH CARON
    'û': 'u', // LATIN SMALL LETTER U WITH CIRCUMFLEX
    'ṷ': 'u', // LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW
    'ü': 'u', // LATIN SMALL LETTER U WITH DIAERESIS
    'ǘ': 'u', // LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE
    'ǚ': 'u', // LATIN SMALL LETTER U WITH DIAERESIS AND CARON
    'ǜ': 'u', // LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE
    'ǖ': 'u', // LATIN SMALL LETTER U WITH DIAERESIS AND MACRON
    'ṳ': 'u', // LATIN SMALL LETTER U WITH DIAERESIS BELOW
    'ụ': 'u', // LATIN SMALL LETTER U WITH DOT BELOW
    'ű': 'u', // LATIN SMALL LETTER U WITH DOUBLE ACUTE
    'ȕ': 'u', // LATIN SMALL LETTER U WITH DOUBLE GRAVE
    'ù': 'u', // LATIN SMALL LETTER U WITH GRAVE
    'ủ': 'u', // LATIN SMALL LETTER U WITH HOOK ABOVE
    'ư': 'u', // LATIN SMALL LETTER U WITH HORN
    'ứ': 'u', // LATIN SMALL LETTER U WITH HORN AND ACUTE
    'ự': 'u', // LATIN SMALL LETTER U WITH HORN AND DOT BELOW
    'ừ': 'u', // LATIN SMALL LETTER U WITH HORN AND GRAVE
    'ử': 'u', // LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE
    'ữ': 'u', // LATIN SMALL LETTER U WITH HORN AND TILDE
    'ȗ': 'u', // LATIN SMALL LETTER U WITH INVERTED BREVE
    'ū': 'u', // LATIN SMALL LETTER U WITH MACRON
    'ṻ': 'u', // LATIN SMALL LETTER U WITH MACRON AND DIAERESIS
    'ų': 'u', // LATIN SMALL LETTER U WITH OGONEK
    'ᶙ': 'u', // LATIN SMALL LETTER U WITH RETROFLEX HOOK
    'ů': 'u', // LATIN SMALL LETTER U WITH RING ABOVE
    'ũ': 'u', // LATIN SMALL LETTER U WITH TILDE
    'ṹ': 'u', // LATIN SMALL LETTER U WITH TILDE AND ACUTE
    'ṵ': 'u', // LATIN SMALL LETTER U WITH TILDE BELOW
    'ᵫ': 'ue', // LATIN SMALL LETTER UE
    'ꝸ': 'um', // LATIN SMALL LETTER UM
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER UPSILON' (ʊ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER UPSILON WITH STROKE' (ᵿ)
    'ⱴ': 'v', // LATIN SMALL LETTER V WITH CURL
    'ꝟ': 'v', // LATIN SMALL LETTER V WITH DIAGONAL STROKE
    'ṿ': 'v', // LATIN SMALL LETTER V WITH DOT BELOW
    'ʋ': 'v', // LATIN SMALL LETTER V WITH HOOK
    'ᶌ': 'v', // LATIN SMALL LETTER V WITH PALATAL HOOK
    'ⱱ': 'v', // LATIN SMALL LETTER V WITH RIGHT HOOK
    'ṽ': 'v', // LATIN SMALL LETTER V WITH TILDE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER VEND' (ꝩ)
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER VISIGOTHIC Z' (ꝣ)
    'ꝡ': 'vy', // LATIN SMALL LETTER VY
    'ẃ': 'w', // LATIN SMALL LETTER W WITH ACUTE
    'ŵ': 'w', // LATIN SMALL LETTER W WITH CIRCUMFLEX
    'ẅ': 'w', // LATIN SMALL LETTER W WITH DIAERESIS
    'ẇ': 'w', // LATIN SMALL LETTER W WITH DOT ABOVE
    'ẉ': 'w', // LATIN SMALL LETTER W WITH DOT BELOW
    'ẁ': 'w', // LATIN SMALL LETTER W WITH GRAVE
    'ⱳ': 'w', // LATIN SMALL LETTER W WITH HOOK
    'ẘ': 'w', // LATIN SMALL LETTER W WITH RING ABOVE
    'ẍ': 'x', // LATIN SMALL LETTER X WITH DIAERESIS
    'ẋ': 'x', // LATIN SMALL LETTER X WITH DOT ABOVE
    'ᶍ': 'x', // LATIN SMALL LETTER X WITH PALATAL HOOK
    'ý': 'y', // LATIN SMALL LETTER Y WITH ACUTE
    'ŷ': 'y', // LATIN SMALL LETTER Y WITH CIRCUMFLEX
    'ÿ': 'y', // LATIN SMALL LETTER Y WITH DIAERESIS
    'ẏ': 'y', // LATIN SMALL LETTER Y WITH DOT ABOVE
    'ỵ': 'y', // LATIN SMALL LETTER Y WITH DOT BELOW
    'ỳ': 'y', // LATIN SMALL LETTER Y WITH GRAVE
    'ƴ': 'y', // LATIN SMALL LETTER Y WITH HOOK
    'ỷ': 'y', // LATIN SMALL LETTER Y WITH HOOK ABOVE
    'ỿ': 'y', // LATIN SMALL LETTER Y WITH LOOP
    'ȳ': 'y', // LATIN SMALL LETTER Y WITH MACRON
    'ẙ': 'y', // LATIN SMALL LETTER Y WITH RING ABOVE
    'ɏ': 'y', // LATIN SMALL LETTER Y WITH STROKE
    'ỹ': 'y', // LATIN SMALL LETTER Y WITH TILDE
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LETTER YOGH' (ȝ)
    'ź': 'z', // LATIN SMALL LETTER Z WITH ACUTE
    'ž': 'z', // LATIN SMALL LETTER Z WITH CARON
    'ẑ': 'z', // LATIN SMALL LETTER Z WITH CIRCUMFLEX
    'ʑ': 'z', // LATIN SMALL LETTER Z WITH CURL
    'ⱬ': 'z', // LATIN SMALL LETTER Z WITH DESCENDER
    'ż': 'z', // LATIN SMALL LETTER Z WITH DOT ABOVE
    'ẓ': 'z', // LATIN SMALL LETTER Z WITH DOT BELOW
    'ȥ': 'z', // LATIN SMALL LETTER Z WITH HOOK
    'ẕ': 'z', // LATIN SMALL LETTER Z WITH LINE BELOW
    'ᵶ': 'z', // LATIN SMALL LETTER Z WITH MIDDLE TILDE
    'ᶎ': 'z', // LATIN SMALL LETTER Z WITH PALATAL HOOK
    'ʐ': 'z', // LATIN SMALL LETTER Z WITH RETROFLEX HOOK
    'ƶ': 'z', // LATIN SMALL LETTER Z WITH STROKE
    'ɀ': 'z', // LATIN SMALL LETTER Z WITH SWASH TAIL
    'ﬀ': 'ff', // LATIN SMALL LIGATURE FF
    'ﬃ': 'ffi', // LATIN SMALL LIGATURE FFI
    'ﬄ': 'ffl', // LATIN SMALL LIGATURE FFL
    'ﬁ': 'fi', // LATIN SMALL LIGATURE FI
    'ﬂ': 'fl', // LATIN SMALL LIGATURE FL
    'ĳ': 'ij', // LATIN SMALL LIGATURE IJ
    // CANNOT FIND APPROXIMATION FOR 'LATIN SMALL LIGATURE LONG S T' (ﬅ)
    'œ': 'oe', // LATIN SMALL LIGATURE OE
    'ﬆ': 'st', // LATIN SMALL LIGATURE ST
    'ₐ': 'a', // LATIN SUBSCRIPT SMALL LETTER A
    'ₑ': 'e', // LATIN SUBSCRIPT SMALL LETTER E
    'ᵢ': 'i', // LATIN SUBSCRIPT SMALL LETTER I
    'ⱼ': 'j', // LATIN SUBSCRIPT SMALL LETTER J
    'ₒ': 'o', // LATIN SUBSCRIPT SMALL LETTER O
    'ᵣ': 'r', // LATIN SUBSCRIPT SMALL LETTER R
    // CANNOT FIND APPROXIMATION FOR 'LATIN SUBSCRIPT SMALL LETTER SCHWA' (ₔ)
    'ᵤ': 'u', // LATIN SUBSCRIPT SMALL LETTER U
    'ᵥ': 'v', // LATIN SUBSCRIPT SMALL LETTER V
    'ₓ': 'x' // LATIN SUBSCRIPT SMALL LETTER X
};

String.prototype.latinise = function () {
    return this.replace(/[^A-Za-z0-9]/g, function (x) { return latin_map[x] || x; })
};

// American English spelling :)
String.prototype.latinize = String.prototype.latinise;

String.prototype.isLatin = function () {
    return this == this.latinise();
};

+function () {
    $(document).ready(function () {
        $('.js-copy-to-clipboard').on('click', function (e) {
            e.preventDefault();

            var $this = $(this);
            $this.copyToClipboard('copy');

            setTimeout(function () {
                $this.copyToClipboard('reset');
            }, 4000);
        });
    })
}();

+function () {
    var lastTime = 0;
    var vendors = ['webkit', 'moz'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame =
            window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function (callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function () { callback(currTime + timeToCall); },
                timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };

    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function (id) {
            clearTimeout(id);
        };
}();

// More info about this: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Polyfill
// Source: https://gist.github.com/k-gun/c2ea7c49edf7b757fe9561ba37cb19ca
/**
 * Added additional functionality:
 *  - default return array of element classes and with all classes as string in 'value' key of array
 *  - on this array are added methods same like classList in modern browser has
 *
 *  @author Lukas Strisovsky <strisovsky.lukas@gmail.com>
 */
+function () {
    // helpers
    var regExp = function (name) {
        return new RegExp('(^| )' + name + '( |$)');
    };

    var forEach = function (list, fn, scope) {
        for (var i = 0; i < list.length; i++) {
            fn.call(scope, list[i]);
        }
    };

    // class list object with basic methods
    function ClassList(element) {
        var classList = element.className.split(/\s+/);
        classList['value'] = element.className;

        classList.add = function () {
            forEach(arguments, function (name) {
                if (!this.contains(name)) {
                    element.className += ' ' + name;
                }
            }, this);
        };

        classList.remove = function () {
            forEach(arguments, function (name) {
                element.className =
                    element.className.replace(regExp(name), '');
            }, this);
        };

        classList.toggle = function (name) {
            return this.contains(name)
                ? (this.remove(name), false) : (this.add(name), true);
        };

        classList.contains = function (name) {
            return regExp(name).test(element.className);
        };

        classList.replace = function (oldName, newName) {
            this.remove(oldName), this.add(newName);
        };


        return classList;
    }

    // IE8/9, Safari
    if (!('classList' in Element.prototype)
        && !("classList" in document.createElement("_"))    // additional condition for IE11
    ) {
        Object.defineProperty(Element.prototype, 'classList', {
            get: function () {
                return new ClassList(this);
            }
        });
    }

    // replace() support for others
    if (window.DOMTokenList && DOMTokenList.prototype.replace == null) {
        DOMTokenList.prototype.replace = ClassList.replace;
    }
}();

// More info about this: http://stackoverflow.com/questions/948358/adding-custom-functions-into-array-prototype/948379#948379
// Source: https://github.com/limonte/sweetalert2/issues/215
+function () {
    if (!Array.prototype.contains) {
        Object.defineProperty(Array.prototype, 'contains', {
            enumerable: false,
            writable: true,
            value: function (element) {
                return !!~this.indexOf(element);
            }
        });
    }
    if (!Array.prototype.last) {
        Object.defineProperty(Array.prototype, 'last', {
            enumerable: false,
            writable: true,
            value: function () {
                return this[this.length - 1];
            }
        })
    };
}();

+(function () {
    var redeignedSelector = $("#redesigned");

    $(document).ready(function () {

        // renewal - on prem licence validation

        $("#renewal-order-id").on('focus', function () {
            $(this).addClass('active');
        });

        $("#renewal-order-id").on('focusout', function () {
            if ($(this).val() == '') {
                $(this).removeClass('active error success');
                $(this).closest('.subscription-block').find('.subscription-block-button').removeClass('active error');
                $('#onprem-block .submit-inner-wrapper').removeClass('error checking');

            }
        });

        $("#renewal-order-id").on('input', $.debounce(1000, function () {
            let value = $(this).val();
            let id = $(this).attr("id");
            let url = $(this).data("url");
            validateInput(value, id, url);
        }));

        $("#submit-renewal-id").click(function () {
            var orderId = $("#renewal-order-id").val();
            $.ajax({
                url: '/renewal/store-order-id/',
                type: 'post',
                data: { orderId: orderId },
                success: function (response) {
                    window.location.href = '/renewal/on-prem-subs/';
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });
        });

        function validateInput(value, id, url) {
            console.log('xy', url);
            if (value.length > 0) {
                let data = {};
                data["order_id"] = value;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    beforeSend: function () {
                        $("#downloads-main-button-submit").prop("disabled", true);
                        $('#onprem-block .submit-inner-wrapper').removeClass('error').addClass('checking');
                        $("#renewal-order-id").addClass("active").removeClass("error success");
                        $('#onprem-block .subscription-block-button').addClass('active disabled').removeClass('error');
                    },
                    success: function (data) {
                        $("#downloads-main-input-loader").addClass("hidden");

                        if (data.status === 0) {
                            $("#renewal-order-id").removeClass("active").addClass("error");
                            $('#onprem-block .subscription-block-button').removeClass('active').addClass('error disabled');
                            $('#onprem-block .submit-inner-wrapper').addClass('error');
                        }
                        if (data.status === 1) {
                            $("#renewal-order-id").addClass("success").removeClass("error");
                            $('#onprem-block .subscription-block-button').addClass('active').removeClass('error disabled');
                            $('#onprem-block .submit-inner-wrapper').removeClass('error checking');
                            $("#downloads-main-button-submit").prop("disabled", false);
                        }
                    },
                    error: function () {
                        $("#downloads-main-input-loader").addClass("hidden");
                        $("#downloads-main-button-submit").prop("disabled", true);
                        $('#onprem-block .submit-inner-wrapper').removeClass('checking');
                    },
                });
            }
        }

        $("#downloads-main-button-submit").click(function () {
            let value = $("#downloads-main-order_id").val();
            let url = $(this).data("url") + value;
            console.log(url);
            window.location.href = url;
        });

        (function () {
            var setAnchorHref = function (value) {
                var el = $(this);
                var parentItem = el.parents(".js-download-card__item");
                var anchor = $(".js-download-link", parentItem);

                anchor.attr("href", value);
            };

            $(".js-download-select", redeignedSelector).on("change", function () {
                var value = $(this).val();
                setAnchorHref.call(this, value);
            });

            $(".js-download-o-dropdown__option", redeignedSelector).on(
                "click",
                function () {
                    var value = $(this).attr("data-value");
                    setAnchorHref.call(this, value);
                }
            );

            (function () {
                var items = $(".js-download-card__item", redeignedSelector);

                for (var i = 0; i < items.length; i++) {
                    var item = $(items[i]);

                    var firstSelect = $($(".js-download-select", item)[0]);
                    var value = firstSelect.val();
                    var dataValue = firstSelect.attr("data-value");
                    if (value == "#" && dataValue && dataValue != "#") {
                        value = dataValue;
                    }

                    var anchor = $(".js-download-link", item);

                    anchor.attr("href", value);
                }
            })();
        })();

        // renewal - cloud validation
        $("#renewal-cloud_name").on('focus', function () {
            $(this).addClass('active');
            $('#cloud-block .subscription-block-button').addClass('active');
        });

        $("#renewal-cloud_name").on('focusout', function () {
            if ($(this).val() == '') {
                $(this).removeClass('active error success');
                $(this).closest('.subscription-block').find('.subscription-block-button').removeClass('active error');
                $('#cloud-block .submit-inner-wrapper').removeClass('error checking');
            }
        });

        $("#renewal-cloud_name").on('change input', $.debounce(1000, function () {
            let value = $(this).val();
            let id = $(this).attr("id");
            let url = $(this).data("url");
            validateInputCloud(value, id, url);
        }));

        function validateInputCloud(value, id, url) {
            console.log('xy', url);
            if (value.length > 0) {
                let data = {};
                //data["order_id"] = value;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    beforeSend: function () {
                        alert('before send');
                    },
                    success: function (data) {
                        console.log(data);
                    },
                    error: function () {
                        alert('error');
                    },
                });
            }
        }

    });
})();

+function () {
    // window.consolestop = false;

    var initRedesignZopim = function () {
        var zopim = typeof $zopim != 'undefined' ? $zopim : null;

        if (zopim) {
            var cookiesHeight = 0;

            if (window.redesign && window.redesign.shouldShowCookies && window.redesign.shouldShowCookies()) {
                if (window.redesign.cookiesContainerHeight && window.redesign.cookiesContainerHeight()) {
                    cookiesHeight = window.redesign.cookiesContainerHeight();
                }
            }

            zopim.livechat.button.setOffsetVertical(cookiesHeight);
            zopim.livechat.button.setOffsetVerticalMobile(parseInt(cookiesHeight / 1.2) || 10);
        }
    };

    window.redesign.initRedesignZopim = initRedesignZopim;
}();

+function () {

    // left: 37, up: 38, right: 39, down: 40,
    // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
    var keys = { 37: 1, 38: 1, 39: 1, 40: 1 };
    var tempKeys = null;

    function setTempKeys(ks) {
        if (!ks) {
            tempKeys = null;
        }
        else {
            tempKeys = {};

            for (var keysIndex in keys) {
                tempKeys[keysIndex] = keys[keysIndex];
            }

            for (var ksIndex in ks) {
                tempKeys[kIndex] = ks[kIndex];
            }
        }
    }

    function preventDefault(e) {
        e = e || window.event;
        if (e.preventDefault)
            e.preventDefault();
        e.returnValue = false;
    }

    function preventDefaultForScrollKeys(e) {
        var ks = tempKeys || keys;

        if (ks[e.keyCode]) {
            preventDefault(e);
            return false;
        }
    }

    function disableScroll(forKeys) {
        if (forKeys) {
            setTempKeys(forKeys);
        }

        if (window.addEventListener) // older FF
            window.addEventListener('DOMMouseScroll', preventDefault, false);
        window.onwheel = preventDefault; // modern standard
        window.onmousewheel = document.onmousewheel = preventDefault; // older browsers, IE
        window.ontouchmove = preventDefault; // mobile
        document.onkeydown = preventDefaultForScrollKeys;
    }

    function enableScroll() {
        setTempKeys(null);

        if (window.removeEventListener)
            window.removeEventListener('DOMMouseScroll', preventDefault, false);
        window.onmousewheel = document.onmousewheel = null;
        window.onwheel = null;
        window.ontouchmove = null;
        document.onkeydown = null;
    }

    window.redesign.disableScroll = disableScroll;
    window.redesign.enableScroll = enableScroll;
}();

var JSON; if (!JSON) { JSON = {}; }
(function () {
    "use strict"; function f(n) { return n < 10 ? '0' + n : n; }
    if (typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' +
                f(this.getUTCMonth() + 1) + '-' +
                f(this.getUTCDate()) + 'T' +
                f(this.getUTCHours()) + ':' +
                f(this.getUTCMinutes()) + ':' +
                f(this.getUTCSeconds()) + 'Z' : null;
        }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf(); };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }) + '"' : '"' + string + '"'; }
    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key); }
        if (typeof rep === 'function') { value = rep.call(holder, key, value); }
        switch (typeof value) {
            case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null'; }
                gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') {
                    length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null'; }
                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v;
                }
                if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { if (typeof rep[i] === 'string') { k = rep[i]; v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } else { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } }
                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v;
        }
    }
    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {
            var i; gap = ''; indent = ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' '; } } else if (typeof space === 'string') { indent = space; }
            rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify'); }
            return str('', { '': value });
        };
    }
    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {
            var j; function walk(holder, key) {
                var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v; } else { delete value[k]; } } } }
                return reviver.call(holder, key, value);
            }
            text = String(text); cx.lastIndex = 0; if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j; }
            throw new SyntaxError('JSON.parse');
        };
    }
}());

+function () {
    // window.consolestop = false;

    $(document).ready(function () {
        var form = $('form[name=update-license]');

        if (form.length) {
            var notificationsFlashBox = $('div#o-notifications');

            form.submit(function (e) {
                var order_id = $(this).find('input[name=order_id]').val();
                var partner_code = $(this).find('input[name=partner_code]').val();

                var data = {
                    'order_id': order_id,
                    'partner_code': partner_code
                };

                for (var key in data) {
                    form.find('input[name=' + key + ']').parents('.o-form__label').removeClass('o-form__label--invalid o-tooltip--visible');
                }

                notificationsFlashBox.addClass('hidden');
                $('div#o-notifications div.o-form__flash-box-message').each(function (i, el) {
                    $(el).addClass('hidden');
                });

                $.ajax({
                    type: "POST",
                    url: $(this).attr('action'),
                    data: data,
                    dataType: 'json',
                    success: function (data) {
                        if (data.status === 0) {
                            if (data.errors.hasOwnProperty('shop')) {
                                window.location.replace('/bug');
                            }
                            else {
                                if (data.hasOwnProperty('errors')) {
                                    for (var key in data.errors) {
                                        form.find('input[name=' + key + ']').parents('.o-form__label').addClass('o-form__label--invalid o-tooltip--visible');
                                    }
                                }

                                if (data.hasOwnProperty('notifications')) {
                                    notificationsFlashBox.removeClass('hidden');

                                    for (var key in data.notifications) {
                                        if (key === 'not_released') {
                                            $('div#o-notifications__not-released').removeClass('hidden');
                                        }

                                        if (key === 'invalid_license') {
                                            $('div#o-notifications__invalid-license').removeClass('hidden');
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            window.location.replace('/pricing/select-license');
                        }
                    },
                    error: function (data) {

                    }
                });

                e.preventDefault();
            });
        }
    });
}();

+function () {
    // window.consolestop = false;

    $(document).ready(function () {
        var formValidation = function () {
            var form = $('form.js-form-validation');

            if (form.length) {
                var notificationsFlashBox = $('div#o-notifications');
                var redirectUrl = form.attr('data-redirect-url');
                // Check if we have specific redirect URL after valid or use default action
                redirectUrl = redirectUrl ? redirectUrl : form.attr('action');

                form.submit(function (e) {
                    var data = {};

                    // Create loading HTML
                    var loading = window.redesign.createLoader();
                    loading.start();    // run loading

                    // Find every fields in form
                    $(this).find('input, select, textarea').each(function (i) {
                        data[$(this).attr('name')] = $(this).val();
                    });

                    // Remove all status classes for each field
                    for (var key in data) {
                        form.find('input[name=' + key + ']').parents('.o-form__label').removeClass('o-form__label--invalid o-tooltip--visible');
                    }

                    // Hide every notifications flash box messages
                    notificationsFlashBox.addClass('hidden');
                    $('div#o-notifications div.o-form__flash-box-message').each(function (i, el) {
                        $(el).addClass('hidden');
                    });

                    // Make request
                    $.ajax({
                        type: "POST",
                        url: $(this).attr('action'),
                        data: data,
                        dataType: 'json',
                        success: function (data) {
                            // If is something wrong..
                            if (data.status === 0) {
                                loading.stop(); // stop loading

                                if (data.errors.hasOwnProperty('shop')) {
                                    window.location.replace('/bug');
                                }
                                else if (data.errors.hasOwnProperty('server')) {
                                    window.location.replace('/not-sent');
                                }
                                else {
                                    // Show tooltip with error for specific input
                                    if (data.hasOwnProperty('errors')) {
                                        for (var key in data.errors) {
                                            form.find('input[name=' + key + ']').parents('.o-form__label').addClass('o-form__label--invalid o-tooltip--visible');
                                        }
                                    }

                                    // Show notification for specific input
                                    if (data.hasOwnProperty('notifications')) {
                                        // Remove hidden from notif. wrapper
                                        notificationsFlashBox.removeClass('hidden');

                                        // Remove hidden for specific notification flash box message
                                        for (var key in data.notifications) {
                                            $('div#o-notifications__' + key).removeClass('hidden');
                                        }
                                    }
                                }
                            }
                            // Everything is ok, do redirect
                            else {
                                window.location.replace(redirectUrl);
                            }
                        },
                        error: function (data) {
                            loading.stop(); // stop loading
                        }
                    });

                    e.preventDefault();
                });
            }
        };

        // Find form for validation
        formValidation();
    });
}();

+function () {
    // window.consolestop = false;

    $(document).ready(function () {
        $('.js-form-input__status-spinner').each(function (i) {
            var spinner = $(this);
            var label = $(this).parents('.o-form__label');
            var input = label.find('.js-form-input');
            var callback = $(this).data("callback");

            input.focusout(function () {
                if ($(this).val()) {
                    formSpinnerCheck($(this), spinner, label, callback);
                }
                else {
                    if (input.val() === '') {
                        label.removeClass('o-form__label--invalid o-tooltip--visible');
                    }

                    // Hide spinner if we have before showed him
                    spinner.removeClass('o-form__input-status-spinner-container--visible');
                }
            });
        });

        var formSpinnerCheck = function (input, spinner, label, callback) {
            var spinnerChild = spinner.find('.o-form__input-status-spinner');
            var url = spinner.attr('data-spinner-check-url');
            var data = {};
            data[input.attr('name')] = input.val();

            // Remove all status classes for field
            label.removeClass('o-form__label--invalid o-tooltip--visible');

            $("#o-notifications").addClass('hidden');

            $(".o-form__flash-box-message").addClass('hidden');

            // Show spinner wrapper and also spinning animation
            spinner.addClass('o-form__input-status-spinner-container--visible');
            spinnerChild.addClass('o-form__input-status-spinner--spinning');

            // Make request
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: 'json',
                success: function (data) {
                    // If is something wrong..
                    if (data.status === 0) {
                        // Show invalid label and tooltip and hide spinner wrapper and also spinning animation
                        label.addClass('o-form__label--invalid o-tooltip--visible');

                        $('div#o-notifications').removeClass('hidden');

                        for (var key in data.notifications) {
                            $("#o-notifications__" + key).removeClass('hidden');
                        }

                        spinner.removeClass('o-form__input-status-spinner-container--visible');
                        spinnerChild.removeClass('o-form__input-status-spinner--spinning');

                        if (callback) {
                            window[callback](false);
                        }
                    }
                    // Everything is ok, hide spinner
                    else {
                        // Remove spinning animation and show success state
                        spinnerChild.removeClass('o-form__input-status-spinner--spinning');

                        // if valid, show specified element(s)
                        if (spinner[0].hasAttribute("data-spinner-show")) {
                            var selector = spinner[0].getAttribute("data-spinner-show");
                            var $elems = document.querySelectorAll(selector);
                            for (var i = 0, n = $elems.length; i < n; i++) {
                                $elems[i].classList.remove("hidden");
                            }
                        }

                        if (callback) {
                            window[callback](true);
                        }
                    }
                },
                error: function (data) {

                }
            });
        };
    });
}();

+function () {
    // window.consolestop = false;

    var triggered = false;

    $(document).ready(function () {
        var continueSubmitBtnSelector = '.o-upgrade-page-continue__terms-submit';
        var continueCheckbox = $('.js-upgrade-page-continue-checkbox');
        var submittedContent = $('.js-upgrade-page-continue-submitted-content');

        continueCheckbox.on('change', function () {
            var el = $(this);
            var checked = el.is(':checked');


            if (window.redesign && window.redesign.removeDisabled) {
                if (checked) {
                    window.redesign.removeDisabled(continueSubmitBtnSelector);
                }
                else {
                    window.redesign.setDisabled(continueSubmitBtnSelector);
                }
            }

        });
    });
}();

+function () {
    // window.consolestop = false;
    $(document).ready(function () {
        var jsUpgradeV12form = $('.js-upgradev12-form');
        var jsUpgradeV12formAction = $('.js-upgradev12-form').attr('action');
        var wasRemovedForceShowContent = false;

        $('input:radio', jsUpgradeV12form).change(function () {
            var newAction = window.redesign.replaceQueryParam('version', $(this).val(), jsUpgradeV12formAction);

            jsUpgradeV12form.attr('action', newAction);

            if (!wasRemovedForceShowContent) {
                $('.o-collapse_input--force-show').removeClass('o-collapse_input--force-show');
                wasRemovedForceShowContent = true;
            }
        });
    });
}();

// +function () {
//     // window.consolestop = false;
//
//     $(document).ready(function () {
//         var form = $('form#form-premise');
//         var formLoaders = $('.o-loading', form);
//         var formPremiseTimer = null;
//         var notificationsFlashBox = $('div#o-notifications');
//         var purchaseCodeButton = $('#premise-purchase-code-btn');
//         var purchaseCode = $('input[name=purchase_code]');
//         var purchaseCodeLabel = purchaseCode.parents('.o-form__label');
//         var triggerChangeElem = $('.js-trigger-change');
//
//         if(form.length) {
//             form.submit(function (e) {
//                 // Make request
//                 makeRequest(form);
//
//                 e.preventDefault();
//             });
//
//             form.on('change', 'input:not(.js-no-detect-change), select, textarea', function (e) {
//                 if (formPremiseTimer) {
//                     clearTimeout(formPremiseTimer);
//                 }
//                 formPremiseTimer = setTimeout(function () {
//                     if(e.target.checkValidity()) {
//                         handleLoaders(formLoaders, 'start');
//
//                         if(!isNaN($(e.target).attr('data-users-max')) && parseInt($(e.target).attr('data-users-max')) < parseInt(e.target.value)){
//                             $('.js-premise-summary').addClass('hidden');
//                             $('.js-premise-request').removeClass('hidden');
//                         }
//                         else {
//                             $('.js-premise-summary').removeClass('hidden');
//                             $('.js-premise-request').addClass('hidden');
//                         }
//
//                         makeRequest(form);
//                     }
//                 }, 500);
//             });
//         }
//
//         var handleLoaders = function(elements, state) {
//             // new loading for premise v2
//             if(state == 'start') {
//                 $('.js-loading-hide').hide();
//                 $('.js-loading-show').show();
//             } else {
//                 $('.js-loading-hide').show();
//                 $('.js-loading-show').hide();
//             }
//
//             // old loading for premise v1
//             $(elements).each(function(i, el) {
//                 if(state === 'start') {
//                     $(el).addClass('o-loading--visible');
//                 }
//                 else {
//                     $(el).removeClass('o-loading--visible');
//                 }
//             });
//         };
//
//         var makeRequest = function(form, callback) {
//             callback = callback || null;
//
//             notificationsFlashBox.addClass('hidden');
//             $('div#o-notifications div.o-form__flash-box-message').each(function (i, el) {
//                 $(el).addClass('hidden');
//             });
//
//             $('input[name=purchase_code]').parents('.o-form__label').removeClass('o-form__label--invalid o-tooltip--visible');
//
//             $.ajax({
//                 type: 'POST',
//                 url: form.attr('action'),
//                 data: form.serialize(),
//                 contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
//                 success: function (data) {
//                     // @ToDo
//
//                     if(data.info) {
//                         $('.js-info-total-user-price').text(sprintf(data.info.USER_CURRENCY_FORMAT, data.info.TOTAL_USER_PRICE));
//                         $('.js-info-total-vendor-price').text(sprintf(data.info.VENDOR_CURRENCY_FORMAT, data.info.TOTAL_VENDOR_PRICE));
//
//                         $('.js-info-discount-user-price').text(sprintf(data.info.USER_CURRENCY_FORMAT, data.info.DISCOUNT_USER_PRICE));
//                         $('.js-info-discount-vendor-price').text(sprintf(data.info.VENDOR_CURRENCY_FORMAT, data.info.DISCOUNT_VENDOR_PRICE));
//
//                         if(data.info.DISCOUNT_USER_PRICE > 0) {
//                             $('.js-summary-purchase-code').removeClass('hidden');
//                         }
//                         else {
//                             $('.js-summary-purchase-code').addClass('hidden');
//                         }
//
//                         if(data.info.TOTAL_USER_PRICE === 0) $('.js-pricing-checkout-button').prop('disabled', true);
//
//                         if(data.suite) {
//                             $('.js-suite-user-price').text(sprintf(data.info.USER_CURRENCY_FORMAT, data.suite.USER_PRICE));
//                             $('.js-suite-vendor-price').text(sprintf(data.info.VENDOR_CURRENCY_FORMAT, data.suite.VENDOR_PRICE));
//                         }
//
//                         if(data.addons) {
//                             var arrayLength = data.addons.PRODUCTS.length;
//                             for (var i = 0; i < arrayLength; i++) {
//                                 $('.js-addons-product-' + data.addons.PRODUCTS[i].CODE + '-user-price').text(sprintf(data.info.USER_CURRENCY_FORMAT, data.addons.PRODUCTS[i].USER_PRICE));
//                                 $('.js-addons-product-' + data.addons.PRODUCTS[i].CODE + '-vendor-price').text(sprintf(data.info.VENDOR_CURRENCY_FORMAT, data.addons.PRODUCTS[i].VENDOR_PRICE));
//
//                                 if(data.addons.PRODUCTS[i].CHECKED) {
//                                     var el = $('.js-pricing-side-box-item[data-item="' + data.addons.PRODUCTS[i].CODE + '"]');
//                                     el.show();
//                                     el.find('.js-pricing-side-box-item-user-price').text(sprintf(data.info.USER_CURRENCY_FORMAT, data.addons.PRODUCTS[i].USER_PRICE));
//                                     el.find('.js-pricing-side-box-item-vendor-price').text(sprintf(data.info.VENDOR_CURRENCY_FORMAT, data.addons.PRODUCTS[i].VENDOR_PRICE));
//                                 } else {
//                                     $('.js-pricing-side-box-item[data-item="' + data.addons.PRODUCTS[i].CODE + '"]').hide();
//                                 }
//                             }
//                         }
//                     }
//
//                     $('.js-pricing-checkout-button').prop('disabled', false);
//                     if(callback) callback();
//
//                     if(data.errors){
//                         if(data.errors.purchase_code === false) {
//                             purchaseCodeLabel.addClass('o-form__label--invalid o-tooltip--visible');
//                         }
//                     }
//
//                     if(purchaseCode.hasClass('not-empty') && !purchaseCodeLabel.hasClass('o-form__label--invalid')) {
//                         purchaseCodeLabel.addClass('o-form__label--disabled');
//                         purchaseCode.prop('disabled', true);
//                         purchaseCodeButton.addClass('is-cancel');
//                     }
//
//                     handleLoaders(formLoaders, 'stop');
//                 },
//                 error: function (data) {
//                     notificationsFlashBox.removeClass('hidden');
//                     $('div#js-order-premise__' + data.status).removeClass('hidden');
//
//                     handleLoaders(formLoaders, 'stop');
//                 }
//             });
//         };
//
//         var focusElement = function(selector, prefix) {
//             $(prefix + selector).focus();
//         };
//
//         var checkToggleElement = function(selector, prefix) {
//             $(prefix + selector).trigger('click');
//         };
//
//         var checkPurchaseCode = function(el) {
//             if(purchaseCodeButton.length) {
//                 if (el.value !== '') {
//                     purchaseCodeButton.removeClass('o-button--disabled disabled');
//                 }
//                 else {
//                     purchaseCodeButton.addClass('o-button--disabled disabled');
//                 }
//             }
//         };
//
//         purchaseCodeButton.on('click', function(e) {
//             if(!$(this).hasClass('disabled')) {
//                 if($(this).hasClass('is-cancel')) {
//                     purchaseCode.val('');
//                     purchaseCode.prop('disabled', false);
//                     purchaseCode.removeClass('not-empty');
//                     purchaseCodeLabel.removeClass('o-form__label--disabled');
//                     $(this).removeClass('is-cancel');
//                 }
//
//                 handleLoaders(formLoaders, 'start');
//
//                 makeRequest(form);
//             }
//         });
//
//         triggerChangeElem.on('click', function(e) {
//             handleLoaders(formLoaders, 'start');
//
//             if($(this).hasClass('js-pricing-suite-button')) {
//                 makeRequest(form, function(){
//                     $('.js-pricing-checkout-button').prop("disabled", false);
//                     $('.js-pricing-price').toggleClass('is-active');
//                     $('.js-pricing-side-box').addClass('show-items');
//                 });
//             } else {
//                 makeRequest(form);
//             }
//         });
//
//
//
//         window.redesign.focusElement = focusElement;
//         window.redesign.checkToggleElement = checkToggleElement;
//         window.redesign.checkPurchaseCode = checkPurchaseCode;
//     });
// }();

/*
    Docs: http://kenwheeler.github.io/slick
 */
/* global window, document, define, jQuery, setInterval, clearInterval */
; (function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }

}(function ($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function (slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof (index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof (index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function (now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function () {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && typeof asNavFor === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }

    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && (_.currentSlide + 1) === (_.slideCount - 1)) {
                    _.direction = 0;
                }

                else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler(slideTo);

        }

    };

    Slick.prototype.buildArrows = function () {

        var _ = this;


        _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
        _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');


        _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
        _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

        if (_.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.prependTo(_.options.appendArrows);
        }

        if (_.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.appendTo(_.options.appendArrows);
        }

        if (_.options.infinite !== true) {
            _.$prevArrow
                .addClass('slick-disabled')
                .attr('aria-disabled', 'true');
        }



    };


    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides =
            _.$slider
                .children(_.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function () {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 0) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width': (100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                            targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this, originalSlides;

        if (_.options.rows > 0) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function () {
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick', '*', function (event) {

                event.stopImmediatePropagation();
                var $sf = $(this);

                setTimeout(function () {

                    if (_.options.pauseOnFocus) {
                        _.focussed = $sf.is(':focus');
                        _.autoPlay();
                    }

                }, 0);

            });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide,
            coef;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                coef = -1

                if (_.options.vertical === true && _.options.centerMode === true) {
                    if (_.options.slidesToShow === 2) {
                        coef = -1.5;
                    } else if (_.options.slidesToShow === 1) {
                        coef = -2
                    }
                }
                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function () {

        return this;

    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function () {
        var _ = this,
            numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
            tabControlIndexes = _.getNavigableIndexes().filter(function (val) {
                return (val >= 0) && (val < _.slideCount);
            });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {
            if (_.options.focusOnChange) {
                _.$slides.eq(i).attr({ 'tabindex': '0' });
            } else {
                _.$slides.eq(i).removeAttr('tabindex');
            }
        }

        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
                .off('click.slick')
                .on('click.slick', {
                    message: 'previous'
                }, _.changeSlide);
            _.$nextArrow
                .off('click.slick')
                .on('click.slick', {
                    message: 'next'
                }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }
        }

    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);

    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image
                        .animate({ opacity: 0 }, 100, function () {

                            if (imageSrcSet) {
                                image
                                    .attr('srcset', imageSrcSet);

                                if (imageSizes) {
                                    image
                                        .attr('sizes', imageSizes);
                                }
                            }

                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function () {
                                    image
                                        .removeAttr('data-lazy data-srcset data-sizes')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function () {

                    image
                        .removeAttr('data-lazy')
                        .removeClass('slick-loading')
                        .addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
            if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
                loadImages(cloneRange);
            } else if (_.currentSlide === 0) {
                cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
                loadImages(cloneRange);
            }

    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();

                if (_.options.focusOnChange) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                if (imageSrcSet) {
                    image
                        .attr('srcset', imageSrcSet);

                    if (imageSizes) {
                        image
                            .attr('sizes', imageSizes);
                    }
                }

                image
                    .attr('src', imageSource)
                    .removeAttr('data-lazy data-srcset data-sizes')
                    .removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);

                } else {

                    image
                        .removeAttr('data-lazy')
                        .removeClass('slick-loading')
                        .addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [_]);

        }

    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && (_.currentSlide > lastVisibleIndex)) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function (a, b) {
                return (_.options.mobileFirst) ? a - b : b - a;
            });

        }

    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof (index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
        Slick.prototype.slickSetOption = function () {

            /**
             * accepts arguments in format of:
             *
             *  - for changing a single option's value:
             *     .slick("setOption", option, value, refresh )
             *
             *  - for changing a set of responsive options:
             *     .slick("setOption", 'responsive', [{}, ...], refresh )
             *
             *  - for updating multiple values at once (not responsive)
             *     .slick("setOption", { 'option': value, ... }, refresh )
             */

            var _ = this, l, item, option, value, refresh = false, type;

            if ($.type(arguments[0]) === 'object') {

                option = arguments[0];
                refresh = arguments[1];
                type = 'multiple';

            } else if ($.type(arguments[0]) === 'string') {

                option = arguments[0];
                value = arguments[1];
                refresh = arguments[2];

                if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                    type = 'responsive';

                } else if (typeof arguments[1] !== 'undefined') {

                    type = 'single';

                }

            }

            if (type === 'single') {

                _.options[option] = value;


            } else if (type === 'multiple') {

                $.each(option, function (opt, val) {

                    _.options[opt] = val;

                });


            } else if (type === 'responsive') {

                for (item in value) {

                    if ($.type(_.options.responsive) !== 'array') {

                        _.options.responsive = [value[item]];

                    } else {

                        l = _.options.responsive.length - 1;

                        // loop through the responsive object and splice out duplicates.
                        while (l >= 0) {

                            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                                _.options.responsive.splice(l, 1);

                            }

                            l--;

                        }

                        _.options.responsive.push(value[item]);

                    }

                }

            }

            if (refresh) {

                _.unload();
                _.reinit();

            }

        };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
                    _.$slides
                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                    infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function () {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = (_.touchObject.swipeLength > 10) ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable(_.currentSlide + _.getSlideCount()) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable(_.currentSlide - _.getSlideCount()) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);

            }

        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));

$(document).ready(function () {
    let rtl = false;

    if ($('html').attr('dir') === 'rtl') {
        rtl = true;
    }

    $('.support-centered-carousel').slick({
        centerMode: true,
        centerPadding: '60px',
        autoplay: true,
        slidesToShow: 7,
        // initialSlide: 3,
        swipeToSlide: true,
        rtl: rtl,
        responsive: [
            {
                breakpoint: 1580,
                settings: {
                    arrows: true,
                    centerMode: true,
                    centerPadding: '60px',
                    slidesToShow: 5,
                    swipeToSlide: true,
                }
            },
            {
                breakpoint: 1024,
                settings: {
                    arrows: true,
                    centerMode: true,
                    centerPadding: '40px',
                    slidesToShow: 3,
                    swipeToSlide: true,
                }
            },
            {
                breakpoint: 570,
                settings: {
                    arrows: false,
                    centerMode: true,
                    centerPadding: '40px',
                    slidesToShow: 2,
                    swipeToSlide: true,
                }
            },
            {
                breakpoint: 460,
                settings: {
                    arrows: false,
                    centerMode: true,
                    centerPadding: '60px',
                    slidesToShow: 1
                }
            }
        ]
    });
});
/* global window, exports, define */

!function () {
    'use strict'

    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    }

    function sprintf(key) {
        // `arguments` is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments)
    }

    function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []))
    }

    function sprintf_format(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign
        for (i = 0; i < tree_length; i++) {
            if (typeof parse_tree[i] === 'string') {
                output += parse_tree[i]
            }
            else if (typeof parse_tree[i] === 'object') {
                ph = parse_tree[i] // convenience purposes only
                if (ph.keys) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < ph.keys.length; k++) {
                        if (arg == undefined) {
                            throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]))
                        }
                        arg = arg[ph.keys[k]]
                    }
                }
                else if (ph.param_no) { // positional argument (explicit)
                    arg = argv[ph.param_no]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
                    arg = arg()
                }

                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
                }

                if (re.number.test(ph.type)) {
                    is_positive = arg >= 0
                }

                switch (ph.type) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2)
                        break
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10))
                        break
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10)
                        break
                    case 'j':
                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)
                        break
                    case 'e':
                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()
                        break
                    case 'f':
                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)
                        break
                    case 'g':
                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)
                        break
                    case 'o':
                        arg = (parseInt(arg, 10) >>> 0).toString(8)
                        break
                    case 's':
                        arg = String(arg)
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 't':
                        arg = String(!!arg)
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'T':
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0
                        break
                    case 'v':
                        arg = arg.valueOf()
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'x':
                        arg = (parseInt(arg, 10) >>> 0).toString(16)
                        break
                    case 'X':
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()
                        break
                }
                if (re.json.test(ph.type)) {
                    output += arg
                }
                else {
                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                        sign = is_positive ? '+' : '-'
                        arg = arg.toString().replace(re.sign, '')
                    }
                    else {
                        sign = ''
                    }
                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '
                    pad_length = ph.width - (sign + arg).length
                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''
                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output
    }

    var sprintf_cache = Object.create(null)

    function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt]
        }

        var _fmt = fmt, match, parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree.push(match[0])
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree.push('%')
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1])
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else {
                                throw new SyntaxError('[sprintf] failed to parse named argument key')
                            }
                        }
                    }
                    else {
                        throw new SyntaxError('[sprintf] failed to parse named argument key')
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
                }

                parse_tree.push(
                    {
                        placeholder: match[0],
                        param_no: match[1],
                        keys: match[2],
                        sign: match[3],
                        pad_char: match[4],
                        align: match[5],
                        width: match[6],
                        precision: match[7],
                        type: match[8]
                    }
                )
            }
            else {
                throw new SyntaxError('[sprintf] unexpected placeholder')
            }
            _fmt = _fmt.substring(match[0].length)
        }
        return sprintf_cache[fmt] = parse_tree
    }

    /**
     * export to either browser or node.js
     */
    /* eslint-disable quote-props */
    if (typeof exports !== 'undefined') {
        exports['sprintf'] = sprintf
        exports['vsprintf'] = vsprintf
    }
    if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf
        window['vsprintf'] = vsprintf

        if (typeof define === 'function' && define['amd']) {
            define(function () {
                return {
                    'sprintf': sprintf,
                    'vsprintf': vsprintf
                }
            })
        }
    }
    /* eslint-enable quote-props */
}()

    + function () {
        $(document).ready(function () {
            $('.js-purchase-cloud-plan-select').on("click", function () {
                $(this).addClass('is-selected').siblings().removeClass('is-selected');
                $('.js-compare-table[data-is-selected]').attr('data-is-selected', $(this).attr('data-index'));
                //$(this).parents('.o-plan-table').attr('data-is-selected',$(this).attr('data-index'));
            });

            $('.js-purchase-cloud-user-select').on('change', function () {
                var val = $(this).val();
            });

            /* Simulating a click on a Plan to select the Plan in Compare table - xD */
            $('.o-plan-table .js-plan-table__col.is-selected').trigger('click');
        });
    }();

(function () {
    // var fn = function(){
    //     var els = document.querySelectorAll("[data-toggle]");
    //
    //     for(var i = 0; i < els.length; i++) {
    //         var target = document.querySelectorAll(els[i].getAttribute("data-toggle"));
    //         // console.error(els[i]);
    //         // console.error(target);
    //
    //         if(target.length > 0) {
    //
    //             for(var j = 0; j < target.length; j++) {
    //                 target[j].classList.add("collapsible");
    //             }
    //
    //             els[i].addEventListener("click", function(e) {
    //                 for(var j = 0; j < target.length; j++) {
    //                     // console.error(this);
    //                     // console.error(target[j]);
    //                     target[j].classList.toggle("collapsed");
    //                 }
    //             });
    //         }
    //     }
    // };
    //
    // document.addEventListener('DOMContentLoaded', fn, false);

    $(document).ready(function () {
        $('[data-toggle]').each(function () {
            var target = $(this).attr("data-toggle");
            $target = $(target);
            $target.addClass("collapsible");
            if ($(this).attr("data-toggle-anim") === "none") $target.addClass("collapsible--no-anim");
            $(this).data("target", $target);
        })
            .click(function () {
                $(this).data("target").toggleClass("collapsed");
            });
    });
}());

(function () {
    $(document).ready(function () {

    });
})();

(function () {
    // window.consolestop = false;

    // error = input
    // error_message = box nahoře






    $(document).ready(function () {
        /*
        If the user has a link with pre-filled Order IDs and SLA IDs,
        we have to run the checks on both of those. We do that by
        simulating them focusing out of the pre-filled fields.
         */

        // Read a page's GET URL variables and return them as an associative array.
        var getUrlVars = function () {
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');

            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }

            return vars;
        };

        var queryVars = getUrlVars();

        // If we have 'order_id' pre-filled
        if (queryVars.hasOwnProperty('order_id')) {
            console.log('focusout fired on order_id.');
            $('input[name="order_id"]').trigger('focusout');
        }

        // If we have 'sla_id' pre-filled
        if (queryVars.hasOwnProperty('sla_id')) {
            console.log('focusout fired on sla_id.');
            $('input[name="sla_id"]').trigger('focusout');
        }



        var filesToUpload = [];
        var fileLimit = 10;

        $('.js-upload-dialog').on("click", function (e) {
            e.preventDefault();

            $(this).parents(".js-upload").find('.js-upload-input').trigger("click");
        });

        $('.js-upload-dropzone')
            .on('dragover', function (e) {
                e.preventDefault();
                $(this).addClass('dragging');
            })
            .on('dragleave', function () {
                $(this).removeClass('dragging');
            })
            .on('drop', function (e) {
                e.preventDefault();
                $(this).removeClass('dragging');

                var files = e.originalEvent.dataTransfer.files;
                var target = $(this).siblings('.js-upload-list');
                for (var i = 0; i < files.length; i++) {
                    addFileToList(files[i], target);
                }
            });

        $('.js-upload-input').on('change', function (e) {
            var files = e.originalEvent.srcElement.files;
            var target = $(this).siblings('.js-upload-list');
            for (var i = 0; i < files.length; i++) {
                addFileToList(files[i], target);
            }
        });

        $('body').on('click', ".js-upload-delete", function () {
            removeFileFromList($(this).attr('data-index'));
            $(this).parents('.js-upload-item').remove();
        });

        function addFileToList(file, el) {
            // console.error(file.name + ", " + file.size + " B, " + file.type);
            if (filesToUpload.length >= fileLimit) {
                $('#o-notifications').removeClass("hidden");
                var $notification = $('#o-notifications__attachment_count');
                $notification.removeClass("hidden");
                scrollTo($notification.offset().top - 300);
                return;
            }

            for (var i = 0, n = filesToUpload.length; i < n; i++) {
                if (file.name === filesToUpload[i].name && file.lastModified === filesToUpload[i].lastModified && file.size === filesToUpload[i].size) {
                    return;
                }
            }

            filesToUpload.push(file);
            var index = filesToUpload.length - 1;
            el.append('<div class="o-upload__item js-upload-item"><div class="o-upload__item-icon-wrapper"><svg class="o-icon o-upload__item-icon"><use xlink:href="/img/redesign/svg/sp-icons/sprite.svg#guides"></use></svg></div><div class="o-upload__item-name">' + file.name + '</div><div class="o-upload__item-delete js-upload-delete" data-index="' + index + '"><svg class="o-upload__item-delete-icon"><use xlink:href="https://wwwcdn.icewarp.com/img/redesign/svg/sp-icons/sprite.svg#cancel"></use></svg></div></div>');
        }

        function removeFileFromList(index) {
            filesToUpload.splice(index, 1);
        }

        var formValidation = function () {
            var form = $('form.js-form-iwlicense, form.js-form-iwcloud');

            if (form.length) {
                var notificationsFlashBox = $('div#o-notifications');
                var redirectUrl = form.attr('data-redirect-url');
                // Check if we have specific redirect URL after valid or use default action
                redirectUrl = redirectUrl || form.attr('action');

                form.submit(function (e) {
                    var data = new FormData();
                    console.log('Support form submitted.');

                    // Create loading HTML
                    var loading = window.redesign.createLoader();
                    loading.start(); // run loading

                    var requiredEmpty = false;

                    // Find every fields in form
                    $(this).find('input, select, textarea').each(function (i) {
                        if (this.hasAttribute("required") && this.value.trim() === "") {
                            requiredEmpty = true;
                            $(this).parents('.o-form__label').addClass('o-form__label--invalid o-tooltip--visible');
                            if (this.tagName.toLowerCase() === "select") {
                                var $sel = $(this).parents('.o-select');
                                $sel.addClass('o-select--error');
                                $sel.siblings(".o-dropdown").addClass('o-dropdown--error');
                            }

                        } else {
                            var value;
                            if ($(this).attr("type") === "checkbox") {
                                value = $(this).prop("checked");
                            } else {
                                value = $(this).val();
                            }
                            if (typeof value !== "string" || value.trim() !== "") {
                                data.append($(this).attr('name'), value);
                            }
                        }
                    });

                    for (var i = 0, n = filesToUpload.length; i < n; i++) {
                        data.append('file[]', filesToUpload[i]);
                    }

                    if (requiredEmpty) {
                        loading.stop();
                        e.preventDefault();
                        scrollTo(form.offset().top - 300);
                    } else {
                        // Remove all status classes for each field
                        for (var key in data) {
                            form.find('*[name=' + key + ']').parents('.o-form__label').removeClass('o-form__label--invalid o-tooltip--visible');
                        }

                        // Hide every notifications flash box messages
                        notificationsFlashBox.addClass('hidden');
                        $('div#o-notifications div.o-form__flash-box-message').addClass('hidden');

                        // for(let [key, value] of data) {
                        //     console.error(key + ": " + value);
                        // }
                        // e.preventDefault();
                        // return;

                        // Make request
                        $.ajax({
                            type: "POST",
                            url: $(this).attr('action'),
                            data: data,
                            dataType: 'json',
                            cache: false,
                            contentType: false,
                            processData: false,
                            success: function (data) {
                                console.log(data);

                                // return false;

                                if (data.hasOwnProperty("error")) {
                                    loading.stop(); // stop loading

                                    if (data.error === "server") {
                                        window.location = '/not-sent';
                                    } else {
                                        form.find("input[name=" + data.error + "]").parents(".o-form__label").addClass("o-form__label--invalid o-tooltip--visible");
                                        if (data.hasOwnProperty("error_message")) {
                                            notificationsFlashBox.removeClass("hidden");
                                            $('#o-notifications__' + data.error_message).removeClass("hidden");
                                            scrollTo(notificationsFlashBox.offset().top - 300);
                                        }
                                    }
                                } else {
                                    if (data.redirect) {
                                        window.location.replace(data.redirect);
                                    }
                                    else {
                                        window.location.replace(redirectUrl);
                                    }
                                }
                            },
                            error: function (data) {
                                loading.stop(); // stop loading
                            }
                        });

                        e.preventDefault();
                    }
                });
            }
        };

        // Find form for validation
        formValidation();
    });

    function scrollTo(target) {
        var i = window.scrollY;
        var int = setInterval(function () {
            window.scrollTo(0, i);
            i -= 50;
            if (i <= target) {
                clearInterval(int);
            }
        }, 20);
    }
})();

function slaCallback(status) {
    if (status) {
        $(".js-with-sla").show();
        $(".js-without-sla").hide();
    }
    else {
        $(".js-with-sla").hide();
        $(".js-without-sla").show();
    }
}
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Accordion = function () {
    function Accordion() {
        _classCallCheck(this, Accordion);

        this.accHeader = document.querySelectorAll('.accordeon');
        this.allImg = document.querySelectorAll('#accordeon-img img');
        this.active = 'active';

        if (this.accHeader.length) {
            this.firstActive();
            this.initListeners();
        }
    }

    _createClass(Accordion, [{
        key: 'initListeners',
        value: function initListeners() {
            if (this.accHeader) {
                for (var i = 0; i < this.accHeader.length; i++) {
                    var accordeonButton = this.accHeader[i].querySelector('.accordeon__title');
                    accordeonButton.addEventListener('click', this.eventClick.bind(this, this.accHeader[i]));
                }
            }
        }
    }, {
        key: 'eventClick',
        value: function eventClick(element) {
            this.hideAllContent();
            var content = element.querySelector('.accordeon__content');
            var dataAccordeon = element.getAttribute('data-accordeon');
            var imgAccordeon = document.getElementById(dataAccordeon);
            this.showContent(element, content, imgAccordeon);
        }
    }, {
        key: 'showContent',
        value: function showContent(title, content, img) {
            title.classList.add(this.active);
            img.classList.add(this.active);

            if (content) {
                content.style.maxHeight = content.scrollHeight + 'px';
            }
        }
    }, {
        key: 'hideAllContent',
        value: function hideAllContent() {
            for (var i = 0; i < this.accHeader.length; i++) {
                var content = this.accHeader[i].querySelector('.accordeon__content');
                this.accHeader[i].classList.remove(this.active);
                this.allImg[i].classList.remove(this.active);

                if (content) {
                    content.removeAttribute('style');
                }
            }
        }
    }, {
        key: 'firstActive',
        value: function firstActive() {
            this.accHeader[0].classList.add(this.active);
            this.allImg[0].classList.add(this.active);
            var content = this.accHeader[0].querySelector('.accordeon__content');

            if (content) {
                content.style.maxHeight = 'none';
            }
        }
    }]);

    return Accordion;
}();

var SideContainer = function () {
    function SideContainer(selector) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, SideContainer);

        this.element = selector;
        this.config = config;

        this.widthWindow = window.innerWidth;

        this.container = {
            xs: 540,
            sm: 720,
            md: 960,
            lg: 1140
        };

        this.mediaQueries = {
            xs: 500,
            sm: 768,
            md: 992,
            lg: 1200
        };
    }

    _createClass(SideContainer, [{
        key: 'init',
        value: function init() {
            var _this = this;

            [].concat(this.element).forEach(function (item, index) {
                var selector = document.querySelector(item);
                if (selector) {
                    _this.checkSizeWindow(selector);
                    _this.addEventListner(selector);
                }
            });
        }
    }, {
        key: 'addEventListner',
        value: function addEventListner(item) {
            window.addEventListener('resize', this.checkSizeWindow.bind(this, item));
        }
    }, {
        key: 'checkSizeWindow',
        value: function checkSizeWindow(item) {
            this.widthWindow = window.innerWidth;

            // if((this.widthWindow >= this.mediaQueries.xs) && (this.widthWindow < this.mediaQueries.sm)) {
            // 	item.style.maxWidth = this.calculationWindow(this.widthWindow, this.container.xs) + "px";
            // }

            if (this.widthWindow >= this.mediaQueries.sm && this.widthWindow < this.mediaQueries.md) {
                item.style.maxWidth = this.calculationWindow(this.widthWindow, this.container.sm) + "px";
            }

            if (this.widthWindow >= this.mediaQueries.md && this.widthWindow < this.mediaQueries.lg) {
                item.style.maxWidth = this.calculationWindow(this.widthWindow, this.container.md) + "px";
            }

            if (this.widthWindow >= this.mediaQueries.lg) {
                item.removeAttribute('style');
            }

            if (this.widthWindow < this.mediaQueries.xs) {
                item.removeAttribute('style');
            }
        }
    }, {
        key: 'calculationWindow',
        value: function calculationWindow(window, size) {
            var calc = (window - size) / 2;
            return size + calc;
        }
    }]);

    return SideContainer;
}();

var Menu = function () {
    function Menu(header) {
        _classCallCheck(this, Menu);

        this.header = header;
        this.navigation = header.querySelector('.primary-navigation');
        this.language = document.querySelector('.tools-languages');
        this.languageButton = document.querySelector('.tools-languages > button');
        this.allItems = this.navigation.querySelectorAll('.primary-menu > li');
        this.hamburger = header.querySelector('.hamburger');
        this.language = header.querySelector('.tools-languages');
        this.active = 'active';
        this.body = document.body;

        this.addEventListener();
    }

    _createClass(Menu, [{
        key: 'addEventListener',
        value: function addEventListener() {

            if (this.hamburger) {
                this.hamburger.addEventListener('click', this.clickEventHamburger.bind(this));
            }

            if (this.allItems.length) {
                for (var i = 0; i < this.allItems.length; i++) {
                    // 'Product', 'Pricing', and 'Download' menus don't have a submenu
                    if (this.allItems[i].classList.contains('menu-product') ||
                        this.allItems[i].classList.contains('menu-pricing') ||
                        this.allItems[i].classList.contains('menu-download')) {
                        continue;
                    }

                    var button = this.allItems[i].querySelector('span');
                    button.addEventListener('click', this.clickEvent.bind(this, this.allItems[i]));
                }
            }

            this.body.addEventListener('click', this.clickBody.bind(this));

            if (this.languageButton) {
                this.languageButton.addEventListener('click', this.clickEventLanguages.bind(this, this.language));
            }
        }

        // Event pro Hamburder phone

    }, {
        key: 'clickEventHamburger',
        value: function clickEventHamburger() {
            if (this.navigation.classList.contains(this.active)) {
                this.closeMenu();

                $('.menu-closed').hide(50);
                $('.menu-opened').show(50);
            } else {
                this.closeLanguage();
                this.openMenu();

                $('.menu-opened').hide(50);
                $('.menu-closed').show(50);
            }
        }

        // Click event pro tools s language

    }, {
        key: 'clickEventLanguages',
        value: function clickEventLanguages(item) {
            if (this.language.classList.contains(this.active)) {
                this.closeLanguage();
            } else {
                this.closeMenu();
                this.clickEvent(item);
            }
        }

        // Pokud je v primary-menu aktivní položka klik mimo zavře submenu

    }, {
        key: 'clickBody',
        value: function clickBody(e) {

            var findActive = this.header.querySelector('.primary-menu > li.active');
            var findActiveLanguage = this.header.querySelector('.tools-languages.active');

            if (findActive) {
                var subMenu = findActive.querySelector('.sub-menu');

                if (subMenu) {
                    if (!findActive.contains(e.target)) {
                        this.closeSubMenu(findActive, subMenu);
                    }
                }
            }

            if (findActiveLanguage) {
                var _subMenu = findActiveLanguage.querySelector('.sub-menu');

                if (_subMenu) {
                    if (!findActiveLanguage.contains(e.target)) {
                        this.closeLanguage(findActiveLanguage, _subMenu);
                    }
                }
            }
        }

        // Klik pro otevření submenu

    }, {
        key: 'clickEvent',
        value: function clickEvent(item) {
            var subMenu = item.querySelector('.sub-menu');

            if (subMenu) {
                if (subMenu.classList.contains(this.active)) {
                    this.closeSubMenu(item, subMenu);
                } else {
                    this.closeAllSubMenu();
                    this.openSubMenu(item, subMenu);
                }
            }
        }
    }, {
        key: 'openMenu',
        value: function openMenu() {
            this.navigation.classList.add(this.active);
            this.hamburger.classList.add(this.active);
        }
    }, {
        key: 'closeMenu',
        value: function closeMenu() {
            this.navigation.classList.remove(this.active);
            if (this.hamburger) {
                this.hamburger.classList.remove(this.active);
            }
        }
    }, {
        key: 'openSubMenu',
        value: function openSubMenu(item, subMenu) {
            document.querySelector('body').classList.add('submenu-opened');

            item.classList.add(this.active);
            subMenu.classList.add(this.active);
        }
    }, {
        key: 'closeSubMenu',
        value: function closeSubMenu(item, subMenu) {
            document.querySelector('body').classList.remove('submenu-opened');

            item.classList.remove(this.active);

            if (subMenu !== null) {
                subMenu.classList.remove(this.active);
            }
        }
    }, {
        key: 'closeAllSubMenu',
        value: function closeAllSubMenu() {
            for (var i = 0; i < this.allItems.length; i++) {
                var subMenu = this.allItems[i].querySelector('.sub-menu');
                this.closeSubMenu(this.allItems[i], subMenu);
            }

            this.closeLanguage();
        }
    }, {
        key: 'closeLanguage',
        value: function closeLanguage() {
            var subMenuLanguage = this.language.querySelector('.sub-menu');
            this.closeSubMenu(this.language, subMenuLanguage);
        }
    }]);

    return Menu;
}();


var MenuScroll = function () {
    function MenuScroll() {
        _classCallCheck(this, MenuScroll);

        this.header = document.querySelector('header');
        this.headerNews = document.querySelector('.header-news');
        if (document.querySelector('.header-news') !== null) {
            this.headerClose = this.headerNews.querySelector('.header-news_close');
        }

        this.active = 'active';
    }

    _createClass(MenuScroll, [{
        key: 'init',
        value: function init() {
            this.addEventListener();
        }
    }, {
        key: 'addEventListener',
        value: function addEventListener() {
            window.addEventListener('scroll', this.scrollEvent.bind(this));

            if (this.headerNews) {
                this.headerClose.addEventListener('click', this.clickEvent.bind(this));
            }
        }
    }, {
        key: 'scrollEvent',
        value: function scrollEvent() {
            if (window.pageYOffset >= 50) {
                this.addSticky();
            } else {
                this.removeSticky();
            }
        }
    }, {
        key: 'clickEvent',
        value: function clickEvent() {
            this.headerNews.remove();
            document.body.classList.remove('news-show');
            console.log('click');
        }
    }, {
        key: 'addSticky',
        value: function addSticky() {
            this.header.classList.add(this.active);
        }
    }, {
        key: 'removeSticky',
        value: function removeSticky() {
            this.header.classList.remove(this.active);
        }
    }]);

    return MenuScroll;
}();

var App = function () {
    function App() {
        _classCallCheck(this, App);

        this.sideContainer = { selector: '' };
    }

    _createClass(App, [{
        key: 'initMenu',
        value: function initMenu() {
            var header = document.querySelector('header');

            if (header) {
                var menu = new Menu(header);
            }
        }
    }, {
        key: 'initAcordion',
        value: function initAcordion() {
            var accordeon = new Accordion();
        }
    }, {
        key: 'initSideContainer',
        value: function initSideContainer() {
            var sideContainer = new SideContainer(this.sideContainer.selector);
            sideContainer.init();
        }
    }, {
        key: 'initMenuScroll',
        value: function initMenuScroll() {
            var menu = new MenuScroll();
            menu.init();
        }
    }, {
        key: 'init',
        value: function init() {
            this.initMenu();
            this.initSideContainer();
            this.initAcordion();
            this.initMenuScroll();
        }
    }]);

    return App;
}();

$(document).ready(function () {
    var app = new App();

    app.sideContainer.selector = ['.container-promo'];

    app.init();
});

/* Submenu hiding on scroll down and showing on scroll up */
$(document).ready(function () {
    var currentScrollPosition = 0;
    var activeSubmenu = $('.o-sub-menu.o-header__sub-menu.is-active');

    var scrollDirection = 'down';
    var distanceScrolledUp = 0;
    var distanceScrolledDown = 0;

    $(window).scroll(function () {
        var newScrollPosition = $(window).scrollTop();
        var mainSubmenuCutOff = 100; // MECO FTW

        if (newScrollPosition > mainSubmenuCutOff) {
            if (newScrollPosition >= currentScrollPosition) {
                scrollDirection = 'down';
                distanceScrolledDown += (newScrollPosition - currentScrollPosition);
                distanceScrolledUp = 0;
            } else {
                scrollDirection = 'up';
                distanceScrolledUp += (currentScrollPosition - newScrollPosition);
                distanceScrolledDown = 0;
            }
        }

        if (distanceScrolledUp > 250) {
            activeSubmenu.slideDown(200);
            if (!$('body').hasClass("licensing-body")) {
                $('body').addClass('active-fixed-submenu-visible');
            }
        }

        if (distanceScrolledDown > 300) {
            activeSubmenu.slideUp(200);
            if (!$('body').hasClass("licensing-body")) {
                $('body').removeClass('active-fixed-submenu-visible');
            }
        }

        currentScrollPosition = newScrollPosition;
    });
});

$(document).ready(function () {
    if ($('.header-news').length) {
        if ($('.header-news')[0].classList.contains("invisible") === false) {
            $('body').addClass('header-news-visible');
        }
    }

    $('.header-news_close').click(function () {
        $('body').removeClass('header-news-visible');
    });
});

// 'Product' and 'Pricing' menus direct links
$(document).ready(function () {
    $('nav ul.primary-menu > li.menu-product > span').click(function () {
        let url = $(this).find('a').attr('href');
        window.location.href = url;
    });

    $('nav ul.primary-menu > li.menu-pricing > span').click(function () {
        let url = $(this).find('a').attr('href');
        window.location.href = url;
    });

    $('nav ul.primary-menu > li.menu-download > span').click(function () {
        let url = $(this).find('a').attr('href');
        window.location.href = url;
    });
});

// If submenu is visible, add a flag class to body
$(document).ready(function () {
    let submenuActive = $('header .o-header__sub-menu.is-active').size();

    if (submenuActive !== 0) {
        $('body').addClass('submenu-visible');
    }
});
(function () {
    document.addEventListener("DOMContentLoaded", function () {
        if (!document.body.classList.contains("saas")) {
            return;
        }

        var plans = JSON.parse(window.redesign.saasPlans);
        var minPrice = parseInt(window.redesign.saasMinPrice);

        var $totalPrice = document.getElementById("totalPrice");
        var $standardPrice = document.getElementById("standardPrice");
        var $professionalPrice = document.getElementById("professionalPrice");

        var $errorMinTotal = document.getElementById("saasErrorMinTotal");
        var $errorMaxUsers = document.getElementById("saasErrorMaxUsers");

        var $priceEls = document.getElementsByClassName("js-saas-price");
        for (var i = 0, n = $priceEls.length; i < n; i++) {
            var value = $priceEls[i].innerHTML;
            var decimals = $priceEls[i].getAttribute("data-decimals") || 2;
            $priceEls[i].innerHTML = formatPrice(value, decimals);
        }

        function formatPrice(value, decimals) {
            value = parseFloat(value);
            decimals = parseInt(decimals) || 2;
            return value.toLocaleString(window.redesign.saasLocale, {
                style: 'currency',
                currency: window.redesign.saasCurrency,
                minimumFractionDigits: decimals,
                maximumFractionDigits: decimals
            });
        }

        var timeout;

        var $incrementEls = document.getElementsByClassName("js-saas-increment");
        for (var i = 0, n = $incrementEls.length; i < n; i++) {
            $incrementEls[i].addEventListener("click", function () {
                var $el = document.getElementById(this.getAttribute("data-for"));
                var dir = this.getAttribute("data-dir") || 1;
                if ($el !== null) {
                    var step = $el.getAttribute("step") || 1;
                    var min = $el.getAttribute("min") || 0;
                    var max = $el.getAttribute("max");
                    var value = parseInt($el.value);

                    var change = parseInt(step) * parseInt(dir);
                    var plan = $el.getAttribute("data-plan");

                    resetErrorMessages();

                    if (!isChangeValid(plan, change)) {
                        shake($el.parentNode);
                        $errorMinTotal.classList.add("is-active");
                    } else if (value + change < min) {
                        value = min;
                        shake($el.parentNode);
                    } else if (max && value + change > max) {
                        value = max;
                        shake($el.parentNode);
                        $errorMaxUsers.classList.add("is-active");
                    } else {
                        value = value + parseInt(step) * parseInt(dir);
                    }

                    $el.value = value;

                    inputChange($el);
                }
            });
        }

        function resetErrorMessages() {
            $errorMinTotal.classList.remove("is-active");
            $errorMaxUsers.classList.remove("is-active");
        }

        function isChangeValid(plan, change) {
            var totalPrice = plans[plan].ppu * change;
            for (var i in plans) {
                totalPrice += plans[i].ppu * plans[i].users;
            }
            totalPrice = totalPrice.toFixed(2);
            return totalPrice >= minPrice;
        }

        var $inputEls = document.getElementsByClassName("js-saas-input");
        for (var i = 0, n = $inputEls.length; i < n; i++) {
            $inputEls[i].addEventListener("keypress", function (e) {
                if ([",", "e", ".", "-", "+"].indexOf(e.key) !== -1 || this.value.length >= 7) {
                    e.preventDefault();
                }
            });

            $inputEls[i].addEventListener("paste", function (e) {
                e.preventDefault();
            });

            $inputEls[i].addEventListener("drop", function (e) {
                e.preventDefault();
            });

            $inputEls[i].addEventListener("focusin", function () {
                this.setAttribute("data-value", this.value);
            });

            $inputEls[i].addEventListener("change", function () {
                var value = parseInt(this.value);
                var oldValue = parseInt(this.getAttribute("data-value"));

                var min = this.getAttribute("min") || 0;
                var max = this.getAttribute("max");
                var step = this.getAttribute("step") || 1;
                step = parseInt(step);

                var plan = this.getAttribute("data-plan");
                var change = value - oldValue;

                var $parent = this.parentNode;

                resetErrorMessages();

                if (!isChangeValid(plan, change)) {
                    shake($parent);
                    $errorMinTotal.classList.add("is-active");

                    var otherValues = 0;
                    for (var j in plans) {
                        if (j !== plan) {
                            otherValues += plans[j].ppu * plans[j].users;
                        }
                    }
                    var minValue = Math.ceil((minPrice - otherValues) / plans[plan].ppu);
                    this.value = minValue;
                    return;
                } else if (value < min) {
                    value = min;
                    shake($parent);
                } else if (max && value > max) {
                    value = max;
                    shake($parent);
                    $errorMaxUsers.classList.add("is-active");
                } else if (step && value % step) {
                    value = value + step - (value % step);
                }

                this.value = value;

                inputChange(this);
            });
        }

        function inputChange($el) {
            var value = $el.value;

            var planName = $el.getAttribute("data-plan");
            if (plans.hasOwnProperty(planName)) {
                plans[planName].users = value;
                var price = plans[planName].ppu * value;

                var $price = document.getElementById($el.getAttribute("data-for"));
                if ($price !== null) {
                    $price.innerHTML = formatPrice(price);
                }

                var totalPrice = 0;
                for (var i in plans) {
                    totalPrice += plans[i].ppu * plans[i].users;
                }

                $totalPrice.innerHTML = formatPrice(totalPrice);
            }
        }

        function shake($el) {
            if (timeout) {
                $el.classList.remove("js-pricing-shake");
                clearTimeout(timeout);
            }

            setTimeout(function () {
                $el.classList.add("js-pricing-shake");
            }, 10);


            timeout = setTimeout(function () {
                $el.classList.remove("js-pricing-shake");
            }, 400);
        }

        var $collapse = document.getElementById("saasCollapse");
        if ($collapse !== null) {
            $collapse.addEventListener("click", function () {
                var $el = document.getElementById(this.getAttribute("data-target-id"));
                if ($el !== null) {
                    this.classList.toggle("is-active");
                    $el.classList.toggle("is-collapsed");
                }
            });
        }
    });
}());

/*!
 * jQuery Mousewheel 3.1.13
 * Copyright OpenJS Foundation and other contributors
 */

(function (factory) {
    if (typeof define === "function" && define.amd) {

        // AMD. Register as an anonymous module.
        define(["jquery"], factory);
    } else if (typeof exports === "object") {

        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {

        // Browser globals
        factory(jQuery);
    }
})(function ($) {

    var toFix = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
        toBind = ("onwheel" in window.document || window.document.documentMode >= 9) ?
            ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
        slice = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ($.event.fixHooks) {
        for (var i = toFix.length; i;) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: "3.1.12",

        setup: function () {
            if (this.addEventListener) {
                for (var i = toBind.length; i;) {
                    this.addEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }

            // Store the line height and page height for this particular element
            $.data(this, "mousewheel-line-height", special.getLineHeight(this));
            $.data(this, "mousewheel-page-height", special.getPageHeight(this));
        },

        teardown: function () {
            if (this.removeEventListener) {
                for (var i = toBind.length; i;) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }

            // Clean up the data we added to the element
            $.removeData(this, "mousewheel-line-height");
            $.removeData(this, "mousewheel-page-height");
        },

        getLineHeight: function (elem) {
            var $elem = $(elem),
                $parent = $elem["offsetParent" in $.fn ? "offsetParent" : "parent"]();
            if (!$parent.length) {
                $parent = $("body");
            }
            return parseInt($parent.css("fontSize"), 10) ||
                parseInt($elem.css("fontSize"), 10) || 16;
        },

        getPageHeight: function (elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function (fn) {
            return fn ? this.on("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function (fn) {
            return this.off("mousewheel", fn);
        }
    });


    function handler(event) {
        var orgEvent = event || window.event,
            args = slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if ("detail" in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ("wheelDelta" in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ("wheelDeltaY" in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ("wheelDeltaX" in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ("axis" in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ("deltaY" in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ("deltaX" in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }

        // No change actually happened, no reason to go any further
        if (deltaY === 0 && deltaX === 0) {
            return;
        }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, "mousewheel-line-height");
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, "mousewheel-page-height");
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {

            // Divide all the things by 40!
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta = Math[delta >= 1 ? "floor" : "ceil"](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? "floor" : "ceil"](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? "floor" : "ceil"](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            event.offsetX = event.clientX - boundingRect.left;
            event.offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;

        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) {
            window.clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = window.setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {

        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === "mousewheel" &&
            absDelta % 120 === 0;
    }

});

/*! Image Uploader - v1.2.3 - 26/11/2019
 * Copyright (c) 2019 Christian Bayer; Licensed MIT */

/*
* !!!
*       This is not Image Uploader
*       This plugin has been reimplemented
* !!!
* */

(function ($) {

    $.fn.fileUploader = function (options) {

        // Default settings
        let defaults = {
            filesInputName: 'files',
            label: 'Drag & Drop files here or click to browse',
            maxSize: undefined,
            maxFiles: undefined,
        };

        // Get instance
        let plugin = this;

        // Will keep the files
        let dataTransfer = new DataTransfer();

        // The file input
        let $input;

        // Set empty settings
        plugin.settings = {};

        // Plugin constructor
        plugin.init = function () {

            // Define settings
            plugin.settings = $.extend(plugin.settings, defaults, options);

            // Run through the elements
            plugin.each(function (i, wrapper) {

                // Create the container
                let $container = createContainer();

                // Append the container to the wrapper
                $(wrapper).append($container);

                // Set some bindings
                $container.on("dragover", fileDragHover.bind($container));
                $container.on("dragleave", fileDragHover.bind($container));
                $container.on("drop", fileSelectHandler.bind($container));
            });

        };

        let createContainer = function () {

            // Create the image uploader container
            let $container = $('<div>', { class: 'image-uploader' });

            // Create the input type file and append it to the container
            $input = $('<input>', {
                type: 'file',
                id: plugin.settings.filesInputName + '-' + random(),
                name: plugin.settings.filesInputName + '[]',
                multiple: ''
            }).appendTo($container);

            // Create the uploaded images container and append it to the container
            let $uploadedContainer = $('<div>', { class: 'uploaded' }).appendTo($container),

                // Create the text container and append it to the container
                $textContainer = $('<div>', {
                    class: 'upload-text'
                }).appendTo($container),

                // Create the icon and append it to the text container
                $i = $('<i>', { class: 'iui-cloud-upload' }).appendTo($textContainer),

                // Create the text and append it to the text container
                $span = $('<span>', { text: plugin.settings.label }).appendTo($textContainer);


            // Listen to container click and trigger input file click
            $container.on('click', function (e) {
                // Prevent browser default event and stop propagation
                prevent(e);

                // Trigger input click
                $input.trigger('click');
            });

            // Stop propagation on input click
            $input.on("click", function (e) {
                e.stopPropagation();
            });

            // Listen to input files changed
            $input.on('change', fileSelectHandler.bind($container));

            return $container;
        };

        let prevent = function (e) {
            // Prevent browser default event and stop propagation
            e.preventDefault();
            e.stopPropagation();
        };

        let createBox = function (file, id) {

            // Create the upladed image container
            let $container = $('<div>', { class: 'uploaded-image' }),

                // Create the img tag
                //$img = $('<img>', {src: src}).appendTo($container),

                // Create text tag
                $text = $('<p>', { class: 'text' }).appendTo($container).html(file.name),


                //$textContent = $(id).appendTo($text),

                // Create the delete button
                $button = $('<button>', { class: 'delete-image' }).appendTo($container),

                // Create the delete icon
                $i = $('<i>', { class: 'iui-close' }).appendTo($button);

            // Stop propagation on click
            $container.on("click", function (e) {
                // Prevent browser default event and stop propagation
                prevent(e);
            });

            // Set delete action
            $button.on("click", function (e) {

                // Prevent browser default event and stop propagation
                prevent(e);

                // Get the parent element
                let $parent = $container.parent();

                // If is not a preloaded image
                if ($container.data('preloaded') === true) {

                    // Remove from preloaded array
                    plugin.settings.preloaded = plugin.settings.preloaded.filter(function (p) {
                        return p.id !== id;
                    });

                } else {

                    // Get the image index
                    let index = parseInt($container.data('index'));

                    // Update other indexes
                    $parent.find('.uploaded-image[data-index]').each(function (i, cont) {
                        if (i > index) {
                            $(cont).attr('data-index', i - 1);
                        }
                    });

                    // Remove the file from input
                    dataTransfer.items.remove(index);

                    // Update input files
                    $input.prop('files', dataTransfer.files);
                }

                // Remove this image from the container
                $container.remove();

                // If there is no more uploaded files
                if (!$parent.children().length) {

                    // Remove the 'has-files' class
                    $parent.parent().removeClass('has-files');

                }

            });

            return $container;
        };

        let fileDragHover = function (e) {

            // Prevent browser default event and stop propagation
            prevent(e);

            // Change the container style
            if (e.type === "dragover") {
                $(this).addClass('drag-over');
            } else {
                $(this).removeClass('drag-over');
            }
        };

        let fileSelectHandler = function (e) {

            // Prevent browser default event and stop propagation
            prevent(e);

            // Get the jQuery element instance
            let $container = $(this);

            // Get the files as an array of files
            let files = Array.from(e.target.files || e.originalEvent.dataTransfer.files);

            // Will keep only the valid files
            let validFiles = [];

            // Run through the files
            $(files).each(function (i, file) {
                // Run the validations
                if (plugin.settings.maxSize && !validateMaxSize(file)) {
                    return;
                }
                if (plugin.settings.maxFiles && !validateMaxFiles(validFiles.length, file)) {
                    return;
                }
                validFiles.push(file);
            });

            // If there is at least one valid file
            if (validFiles.length) {
                // Change the container style
                $container.removeClass('drag-over');

                // Makes the upload
                setPreview($container, validFiles);
            } else {

                // Update input files (it is now empty due to a default browser action)
                $input.prop('files', dataTransfer.files);

            }
        };

        let validateMaxSize = function (file) {

            if (file.size > plugin.settings.maxSize) {
                alert(`The file "${file.name}" exceeds the maximum size of ${plugin.settings.maxSize / 1024 / 1024}Mb`);

                return false;
            }

            return true;

        };

        let validateMaxFiles = function (index, file) {

            if ((index + dataTransfer.items.length) >= plugin.settings.maxFiles) {
                alert(`The file "${file.name}" could not be added because the limit of ${plugin.settings.maxFiles} files was reached`);

                return false;
            }

            return true;

        };

        let setPreview = function ($container, files) {

            // Add the 'has-files' class
            $container.addClass('has-files');

            // Get the upload images container
            let $uploadedContainer = $container.find('.uploaded'),

                // Get the files input
                $input = $container.find('input[type="file"]');

            // Run through the files
            $(files).each(function (i, file) {

                // Add it to data transfer
                dataTransfer.items.add(file);

                // Set preview
                $uploadedContainer.append(createBox(file, dataTransfer.items.length - 1));
            });

            // Update input files
            $input.prop('files', dataTransfer.files);

        };

        // Generate a random id
        let random = function () {
            return Date.now() + Math.floor((Math.random() * 100) + 1);
        };

        this.init();

        // Return the instance
        return this;
    };

}(jQuery));
'use strict';
$(document).ready(function () {
    /* Homepage main animation carousel */
    let homeAnimationInterval = '';
    const elementsToHide = '.offer-home, .dc-section-home-stories, .whats-new-container, .dc-section-4month-subscribe, footer';

    changeTooltipText();

    // TODO refactor this...
    $('#prev').on('click', function () {
        changeToPrevSlide()
    });

    $('#next').on('click', function () {
        changeToNextSlide();
    });

    function resetAnimation() {

        $("#carousel-button-animation").attr("class", "");
        $("#carousel-button-animation").width();
        $("#carousel-button-animation").attr("class", "carousel-button-animation");
    }

    $('[data-screen]').on('click', function () {

        let screen = $(this).data('screen');
        let slideCount = $('.carousel-item').length;
        let fadedElements = [];
        let firstElementId = $('.carousel-item[data-pos="0"]').attr('id');
        let shift = $(`#${screen}`).data('pos');

        // Prevent same screen fading
        if (firstElementId == screen) {
            return;
        }

        fadedElements.push(`#${firstElementId}`);
        for (let i = 1; i < shift; i++) {
            let next = $(`.carousel-item[data-pos="${i - 1}"]`).data('next');
            fadedElements.push(`#${next}`);
        }
        fadedElements = fadedElements.join(', ');

        if (shift === (slideCount - 1)) {
            $('#prev').trigger('click');
        } else {
            $.when($(fadedElements).fadeOut('200')).done(function () {
                changeScreen(screen, 0);
                changeTooltipText();
            }).done(function () {
                $(fadedElements).fadeIn('200')
            });
        }

        resetAnimation();
    });

    function changeToNextSlide() {
        resetAnimation();

        let slideCount = $('.carousel-item').length;
        let topLevelElement = $('.carousel-item[data-pos="0"]');

        topLevelElement.fadeOut('200', function () {
            $('.carousel-item').each(function () {
                let position = parseInt($(this).data('pos'));
                let nextPosition = position - 1;

                if (nextPosition <= - 1) {
                    $(this).data('pos', slideCount - 1);
                    $(this).attr('data-pos', slideCount - 1);
                } else {
                    $(this).data('pos', nextPosition);
                    $(this).attr('data-pos', nextPosition);
                }
            });
            topLevelElement.fadeIn('200');
            changeTooltipText();
        });
    }

    function changeToPrevSlide() {
        resetAnimation();

        let slideCount = $('.carousel-item').length;
        let lastLevelElement = $(`.carousel-item[data-pos="${slideCount - 1}"]`);

        lastLevelElement.fadeOut('200', function () {
            $('.carousel-item').each(function () {
                let position = parseInt($(this).data('pos'));
                if (position >= (slideCount - 1)) {
                    $(this).data('pos', 0);
                    $(this).attr('data-pos', 0);
                } else {
                    $(this).data('pos', position + 1);
                    $(this).attr('data-pos', position + 1);
                }
            });
            lastLevelElement.fadeIn('200');
            changeTooltipText();
        });
    }

    function changeScreen(item, iteration) {
        item = $(`#${item}`);
        let slideCount = $('.carousel-item').length;
        let next = item.data('next');

        item.attr('data-pos', iteration);
        item.data('pos', iteration);
        item.addClass('animated fadeOutUp');

        if (iteration < slideCount - 1) {
            iteration++;
            changeScreen(next, iteration);
        }
    }

    function changeTooltipText() {
        let screen = $('[data-pos="0"]').attr('id');
        $('[data-screen]').removeClass('active');
        $(`[data-screen="${screen}"]`).addClass('active');

        $('.next-arrow').attr("tooltipText", $('[data-pos="1"]').data('carouseltooltip'));
        $('.prev-arrow').attr("tooltipText", $('[data-pos="6"]').data('carouseltooltip'));
    }

    function startHomepageAnimationWithWheel() {
        $(window).scroll(function () {
            if ($(window).scrollTop() >= $(document).height() - $(window).height() - 10) {
                $(window).unbind('scroll');
                disableScroll();
                mouseWheelAnimation();
            }
        })
    }

    function startHomepageAnimation() {
        $(window).scroll(function () {
            let elementHeight = $('#trigger-interval-animation').offset().top,
                elementOffset = $('#trigger-interval-animation').outerHeight(),
                windowHeight = $(window).height(),
                scrolledFromTop = $(this).scrollTop();
            if (scrolledFromTop > (elementHeight + elementOffset - windowHeight)) {
                $(window).unbind('scroll');
            }
        });
    }

    function mouseWheelAnimation() {
        $(window).on('wheel mousewheel', throttle(function (event, delta) {
            if ($('#sc-meetings').data('pos') == '0') {
                $(window).unbind('mousewheel wheel');
                $(elementsToHide).removeClass('hide-element');
                $('body').removeClass('hide-scrollbar');
                enableScroll();
            } else {
                if (delta < 0) {
                    changeToNextSlide();
                }
                if (delta > 0) {
                    changeToPrevSlide();
                }
            }
        }, 450, { trailing: false, leading: false }));
    }

    if ($('.carousel-mobile').length > 0) {
        if ($(window).width() < 995) {
            $('.carousel-mobile').slick({
                infinite: true,
                dots: false,
                arrows: true,
                speed: 650,
                centerMode: true,
                slidesToShow: 1,
                slidesToScroll: 1,
                adaptiveHeight: false,
                centerPadding: '0',
                autoplay: true,
                autoplaySpeed: 6000,
                pauseOnHover: true,
                pauseOnDotsHover: true
            });
        }
    }

    if ($('.whats-new-boxes').length > 0) {
        $('.whats-new-boxes').slick({
            infinite: true,
            dots: false,
            arrows: false,
            speed: 650,
            centerMode: true,
            slidesToShow: 4,
            slidesToScroll: 1,
            adaptiveHeight: false,
            centerPadding: '0',
            autoplay: true,
            autoplaySpeed: 10000,
            pauseOnHover: true,
            pauseOnDotsHover: true,
            responsive: [
                {
                    breakpoint: 995,
                    settings: {
                        slidesToShow: 1,
                    }
                },
            ],
        });
    }

    if ($(window).width() > 995) {
        if ($('#trigger-interval-animation').length > 0) {
            if ($('#mousewheel-animation-enabled').length > 0 && getDeviceType() === 'desktop') {
                $(elementsToHide).addClass('hide-element');
                $('body').addClass('hide-scrollbar');
                startHomepageAnimationWithWheel();
            } else {
                startHomepageAnimation();
            }
        }
    }
    /* End of Homepage main animation carousel */
});

$(window).on('resize', function () {
    const elementsToHide = '.four-reasons-home, .dc-section-home-stories, .whats-new-container, .dc-section-4month-subscribe, footer';

    if ($(this).width() <= 992) {
        if ($('#mousewheel-animation-enabled').length > 0) {
            $(window).unbind('mousewheel wheel');
            $(elementsToHide).removeClass('hide-element');
            $('body').removeClass('hide-scrollbar');
            enableScroll();
        }
    }

    if ($(this).width() < 995) {
        if ($('.carousel-mobile').length > 0) {
            $('.carousel-mobile').not('.slick-initialized').slick({
                infinite: true,
                dots: false,
                arrows: false,
                speed: 650,
                centerMode: true,
                slidesToShow: 1,
                slidesToScroll: 1,
                adaptiveHeight: false,
                centerPadding: '0',
                autoplay: true,
                autoplaySpeed: 10000,
                pauseOnHover: true,
                pauseOnDotsHover: true
            });
        }
    }
});

/*! rangeslider.js - v2.3.0 | (c) 2016 @andreruffert | MIT license | https://github.com/andreruffert/rangeslider.js */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {
    'use strict';

    // Polyfill Number.isNaN(value)
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
    Number.isNaN = Number.isNaN || function (value) {
        return typeof value === 'number' && value !== value;
    };

    /**
     * Range feature detection
     * @return {Boolean}
     */
    function supportsRange() {
        var input = document.createElement('input');
        input.setAttribute('type', 'range');
        return input.type !== 'text';
    }

    var pluginName = 'rangeslider',
        pluginIdentifier = 0,
        hasInputRangeSupport = supportsRange(),
        defaults = {
            polyfill: true,
            orientation: 'horizontal',
            rangeClass: 'rangeslider',
            disabledClass: 'rangeslider--disabled',
            activeClass: 'rangeslider--active',
            horizontalClass: 'rangeslider--horizontal',
            verticalClass: 'rangeslider--vertical',
            fillClass: 'rangeslider__fill',
            handleClass: 'rangeslider__handle',
            startEvent: ['mousedown', 'touchstart', 'pointerdown'],
            moveEvent: ['mousemove', 'touchmove', 'pointermove'],
            endEvent: ['mouseup', 'touchend', 'pointerup']
        },
        constants = {
            orientation: {
                horizontal: {
                    dimension: 'width',
                    direction: 'left',
                    directionStyle: 'left',
                    coordinate: 'x'
                },
                vertical: {
                    dimension: 'height',
                    direction: 'top',
                    directionStyle: 'bottom',
                    coordinate: 'y'
                }
            }
        };

    /**
     * Delays a function for the given number of milliseconds, and then calls
     * it with the arguments supplied.
     *
     * @param  {Function} fn   [description]
     * @param  {Number}   wait [description]
     * @return {Function}
     */
    function delay(fn, wait) {
        var args = Array.prototype.slice.call(arguments, 2);
        return setTimeout(function () { return fn.apply(null, args); }, wait);
    }

    /**
     * Returns a debounced function that will make sure the given
     * function is not triggered too much.
     *
     * @param  {Function} fn Function to debounce.
     * @param  {Number}   debounceDuration OPTIONAL. The amount of time in milliseconds for which we will debounce the function. (defaults to 100ms)
     * @return {Function}
     */
    function debounce(fn, debounceDuration) {
        debounceDuration = debounceDuration || 100;
        return function () {
            if (!fn.debouncing) {
                var args = Array.prototype.slice.apply(arguments);
                fn.lastReturnVal = fn.apply(window, args);
                fn.debouncing = true;
            }
            clearTimeout(fn.debounceTimeout);
            fn.debounceTimeout = setTimeout(function () {
                fn.debouncing = false;
            }, debounceDuration);
            return fn.lastReturnVal;
        };
    }

    /**
     * Check if a `element` is visible in the DOM
     *
     * @param  {Element}  element
     * @return {Boolean}
     */
    function isHidden(element) {
        return (
            element && (
                element.offsetWidth === 0 ||
                element.offsetHeight === 0 ||
                // Also Consider native `<details>` elements.
                element.open === false
            )
        );
    }

    /**
     * Get hidden parentNodes of an `element`
     *
     * @param  {Element} element
     * @return {[type]}
     */
    function getHiddenParentNodes(element) {
        var parents = [],
            node = element.parentNode;

        while (isHidden(node)) {
            parents.push(node);
            node = node.parentNode;
        }
        return parents;
    }

    /**
     * Returns dimensions for an element even if it is not visible in the DOM.
     *
     * @param  {Element} element
     * @param  {String}  key     (e.g. offsetWidth …)
     * @return {Number}
     */
    function getDimension(element, key) {
        var hiddenParentNodes = getHiddenParentNodes(element),
            hiddenParentNodesLength = hiddenParentNodes.length,
            inlineStyle = [],
            dimension = element[key];

        // Used for native `<details>` elements
        function toggleOpenProperty(element) {
            if (typeof element.open !== 'undefined') {
                element.open = (element.open) ? false : true;
            }
        }

        if (hiddenParentNodesLength) {
            for (var i = 0; i < hiddenParentNodesLength; i++) {

                // Cache style attribute to restore it later.
                inlineStyle[i] = hiddenParentNodes[i].style.cssText;

                // visually hide
                if (hiddenParentNodes[i].style.setProperty) {
                    hiddenParentNodes[i].style.setProperty('display', 'block', 'important');
                } else {
                    hiddenParentNodes[i].style.cssText += ';display: block !important';
                }
                hiddenParentNodes[i].style.height = '0';
                hiddenParentNodes[i].style.overflow = 'hidden';
                hiddenParentNodes[i].style.visibility = 'hidden';
                toggleOpenProperty(hiddenParentNodes[i]);
            }

            // Update dimension
            dimension = element[key];

            for (var j = 0; j < hiddenParentNodesLength; j++) {

                // Restore the style attribute
                hiddenParentNodes[j].style.cssText = inlineStyle[j];
                toggleOpenProperty(hiddenParentNodes[j]);
            }
        }
        return dimension;
    }

    /**
     * Returns the parsed float or the default if it failed.
     *
     * @param  {String}  str
     * @param  {Number}  defaultValue
     * @return {Number}
     */
    function tryParseFloat(str, defaultValue) {
        var value = parseFloat(str);
        return Number.isNaN(value) ? defaultValue : value;
    }

    /**
     * Capitalize the first letter of string
     *
     * @param  {String} str
     * @return {String}
     */
    function ucfirst(str) {
        return str.charAt(0).toUpperCase() + str.substr(1);
    }

    /**
     * Plugin
     * @param {String} element
     * @param {Object} options
     */
    function Plugin(element, options) {
        this.$window = $(window);
        this.$document = $(document);
        this.$element = $(element);
        this.options = $.extend({}, defaults, options);
        this.polyfill = this.options.polyfill;
        this.orientation = this.$element[0].getAttribute('data-orientation') || this.options.orientation;
        this.onInit = this.options.onInit;
        this.onSlide = this.options.onSlide;
        this.onSlideEnd = this.options.onSlideEnd;
        this.DIMENSION = constants.orientation[this.orientation].dimension;
        this.DIRECTION = constants.orientation[this.orientation].direction;
        this.DIRECTION_STYLE = constants.orientation[this.orientation].directionStyle;
        this.COORDINATE = constants.orientation[this.orientation].coordinate;

        // Plugin should only be used as a polyfill
        if (this.polyfill) {
            // Input range support?
            if (hasInputRangeSupport) { return false; }
        }

        this.identifier = 'js-' + pluginName + '-' + (pluginIdentifier++);
        this.startEvent = this.options.startEvent.join('.' + this.identifier + ' ') + '.' + this.identifier;
        this.moveEvent = this.options.moveEvent.join('.' + this.identifier + ' ') + '.' + this.identifier;
        this.endEvent = this.options.endEvent.join('.' + this.identifier + ' ') + '.' + this.identifier;
        this.toFixed = (this.step + '').replace('.', '').length - 1;
        this.$fill = $('<div class="' + this.options.fillClass + '" />');
        this.$handle = $('<div class="' + this.options.handleClass + '" />');
        this.$range = $('<div class="' + this.options.rangeClass + ' ' + this.options[this.orientation + 'Class'] + '" id="' + this.identifier + '" />').insertAfter(this.$element).prepend(this.$fill, this.$handle);

        // visually hide the input
        this.$element.css({
            'position': 'absolute',
            'width': '1px',
            'height': '1px',
            'overflow': 'hidden',
            'opacity': '0'
        });

        // Store context
        this.handleDown = $.proxy(this.handleDown, this);
        this.handleMove = $.proxy(this.handleMove, this);
        this.handleEnd = $.proxy(this.handleEnd, this);

        this.init();

        // Attach Events
        var _this = this;
        this.$window.on('resize.' + this.identifier, debounce(function () {
            // Simulate resizeEnd event.
            delay(function () { _this.update(false, false); }, 300);
        }, 20));

        this.$document.on(this.startEvent, '#' + this.identifier + ':not(.' + this.options.disabledClass + ')', this.handleDown);

        // Listen to programmatic value changes
        this.$element.on('change.' + this.identifier, function (e, data) {
            if (data && data.origin === _this.identifier) {
                return;
            }

            var value = e.target.value,
                pos = _this.getPositionFromValue(value);
            _this.setPosition(pos);
        });
    }

    Plugin.prototype.init = function () {
        this.update(true, false);

        if (this.onInit && typeof this.onInit === 'function') {
            this.onInit();
        }
    };

    Plugin.prototype.update = function (updateAttributes, triggerSlide) {
        updateAttributes = updateAttributes || false;

        if (updateAttributes) {
            this.min = tryParseFloat(this.$element[0].getAttribute('min'), 0);
            this.max = tryParseFloat(this.$element[0].getAttribute('max'), 100);
            this.value = tryParseFloat(this.$element[0].value, Math.round(this.min + (this.max - this.min) / 2));
            this.step = tryParseFloat(this.$element[0].getAttribute('step'), 1);
        }

        this.handleDimension = getDimension(this.$handle[0], 'offset' + ucfirst(this.DIMENSION));
        this.rangeDimension = getDimension(this.$range[0], 'offset' + ucfirst(this.DIMENSION));
        this.maxHandlePos = this.rangeDimension - this.handleDimension;
        this.grabPos = this.handleDimension / 2;
        this.position = this.getPositionFromValue(this.value);

        // Consider disabled state
        if (this.$element[0].disabled) {
            this.$range.addClass(this.options.disabledClass);
        } else {
            this.$range.removeClass(this.options.disabledClass);
        }

        this.setPosition(this.position, triggerSlide);
    };

    Plugin.prototype.handleDown = function (e) {
        e.preventDefault();
        this.$document.on(this.moveEvent, this.handleMove);
        this.$document.on(this.endEvent, this.handleEnd);

        // add active class because Firefox is ignoring
        // the handle:active pseudo selector because of `e.preventDefault();`
        this.$range.addClass(this.options.activeClass);

        // If we click on the handle don't set the new position
        if ((' ' + e.target.className + ' ').replace(/[\n\t]/g, ' ').indexOf(this.options.handleClass) > -1) {
            return;
        }

        var pos = this.getRelativePosition(e),
            rangePos = this.$range[0].getBoundingClientRect()[this.DIRECTION],
            handlePos = this.getPositionFromNode(this.$handle[0]) - rangePos,
            setPos = (this.orientation === 'vertical') ? (this.maxHandlePos - (pos - this.grabPos)) : (pos - this.grabPos);

        this.setPosition(setPos);

        if (pos >= handlePos && pos < handlePos + this.handleDimension) {
            this.grabPos = pos - handlePos;
        }
    };

    Plugin.prototype.handleMove = function (e) {
        e.preventDefault();
        var pos = this.getRelativePosition(e);
        var setPos = (this.orientation === 'vertical') ? (this.maxHandlePos - (pos - this.grabPos)) : (pos - this.grabPos);
        this.setPosition(setPos);
    };

    Plugin.prototype.handleEnd = function (e) {
        e.preventDefault();
        this.$document.off(this.moveEvent, this.handleMove);
        this.$document.off(this.endEvent, this.handleEnd);

        this.$range.removeClass(this.options.activeClass);

        // Ok we're done fire the change event
        this.$element.trigger('change', { origin: this.identifier });

        if (this.onSlideEnd && typeof this.onSlideEnd === 'function') {
            this.onSlideEnd(this.position, this.value);
        }
    };

    Plugin.prototype.cap = function (pos, min, max) {
        if (pos < min) { return min; }
        if (pos > max) { return max; }
        return pos;
    };

    Plugin.prototype.setPosition = function (pos, triggerSlide) {
        var value, newPos;

        if (triggerSlide === undefined) {
            triggerSlide = true;
        }

        // Snapping steps
        value = this.getValueFromPosition(this.cap(pos, 0, this.maxHandlePos));
        newPos = this.getPositionFromValue(value);

        // Update ui
        this.$fill[0].style[this.DIMENSION] = (newPos + this.grabPos) + 'px';
        this.$handle[0].style[this.DIRECTION_STYLE] = newPos + 'px';
        this.setValue(value);

        // Update globals
        this.position = newPos;
        this.value = value;

        if (triggerSlide && this.onSlide && typeof this.onSlide === 'function') {
            this.onSlide(newPos, value);
        }
    };

    // Returns element position relative to the parent
    Plugin.prototype.getPositionFromNode = function (node) {
        var i = 0;
        while (node !== null) {
            i += node.offsetLeft;
            node = node.offsetParent;
        }
        return i;
    };

    Plugin.prototype.getRelativePosition = function (e) {
        // Get the offset DIRECTION relative to the viewport
        var ucCoordinate = ucfirst(this.COORDINATE),
            rangePos = this.$range[0].getBoundingClientRect()[this.DIRECTION],
            pageCoordinate = 0;

        if (typeof e.originalEvent['client' + ucCoordinate] !== 'undefined') {
            pageCoordinate = e.originalEvent['client' + ucCoordinate];
        }
        else if (
            e.originalEvent.touches &&
            e.originalEvent.touches[0] &&
            typeof e.originalEvent.touches[0]['client' + ucCoordinate] !== 'undefined'
        ) {
            pageCoordinate = e.originalEvent.touches[0]['client' + ucCoordinate];
        }
        else if (e.currentPoint && typeof e.currentPoint[this.COORDINATE] !== 'undefined') {
            pageCoordinate = e.currentPoint[this.COORDINATE];
        }

        return pageCoordinate - rangePos;
    };

    Plugin.prototype.getPositionFromValue = function (value) {
        var percentage, pos;
        percentage = (value - this.min) / (this.max - this.min);
        pos = (!Number.isNaN(percentage)) ? percentage * this.maxHandlePos : 0;
        return pos;
    };

    Plugin.prototype.getValueFromPosition = function (pos) {
        var percentage, value;
        percentage = ((pos) / (this.maxHandlePos || 1));
        value = this.step * Math.round(percentage * (this.max - this.min) / this.step) + this.min;
        return Number((value).toFixed(this.toFixed));
    };

    Plugin.prototype.setValue = function (value) {
        if (value === this.value && this.$element[0].value !== '') {
            return;
        }

        // Set the new value and fire the `input` event
        this.$element
            .val(value)
            .trigger('input', { origin: this.identifier });
    };

    Plugin.prototype.destroy = function () {
        this.$document.off('.' + this.identifier);
        this.$window.off('.' + this.identifier);

        this.$element
            .off('.' + this.identifier)
            .removeAttr('style')
            .removeData('plugin_' + pluginName);

        // Remove the generated markup
        if (this.$range && this.$range.length) {
            this.$range[0].parentNode.removeChild(this.$range[0]);
        }
    };

    // A really lightweight plugin wrapper around the constructor,
    // preventing against multiple instantiations
    $.fn[pluginName] = function (options) {
        var args = Array.prototype.slice.call(arguments, 1);

        return this.each(function () {
            var $this = $(this),
                data = $this.data('plugin_' + pluginName);

            // Create a new instance.
            if (!data) {
                $this.data('plugin_' + pluginName, (data = new Plugin(this, options)));
            }

            // Make it possible to access methods from public.
            // e.g `$element.rangeslider('method');`
            if (typeof options === 'string') {
                data[options].apply(data, args);
            }
        });
    };

    return 'rangeslider.js is available in jQuery context e.g $(selector).rangeslider(options);';

}));

'use strict';
$(document).ready(function () {

    $('[data-whytab]').on('click', function () {
        var tab = $(this).attr('data-whytab');
        $('.tabs').hide();
        $('.tab-icon').removeClass('active');

        $('#' + tab).fadeIn(600);
        $(this).addClass('active');
    });

    $('#show-modal-quote').on('click', function () {
        $('.modal-quote-overlay, .modal-quote').addClass('active');

    });

    $('.close-modal-quote').on('click', function () {
        $('.modal-quote-overlay, .modal-quote').removeClass('active');
    });

    function formatMoney(amount, decimalCount = 2, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? 2 : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    /* END Office alternative*/
});

'use strict';
$(document).ready(function () {
    $('[name="recording_user_count"]').inputFilter(function (value) {
        return /^\d*$/.test(value);    // Allow digits only, using a RegExp
    });

    $('[data-recording-users]').on('click', function () {
        let current = parseInt($('[name="recording_user_count"]').val());

        if ($(this).data('recording-users') === 'plus') {
            current += 5;
        } else {
            current -= 5;
        }

        if (current <= 0) {
            current = 1;
        }

        $('[name="recording_user_count"]').val(current);
    })
});

'use strict';
$(document).ready(function () {
    /* About us */
    if (!$('#about-us-page').length) {
        return;
    }

    $('[data-country]').on('click', function () {
        toggleCountry($(this).data('country'));
        triggerSelect($(this).data('country'));
    })

    $('.about-us-country-dropdown [data-value]').on('click', function () {
        toggleCountry($(this).data('value'));
    });

    function triggerSelect(selectedCountry) {
        let option = $(`.mobile-select [data-value=${selectedCountry}]`);
        $('.about-us-country-dropdown .o-dropdown__option').each(function () {
            $(this).removeClass('o-dropdown__option--selected');
        });

        $('.about-us-country-dropdown .o-dropdown__title').html(option.html());
        option.addClass('o-dropdown__option--selected');
    }

    function toggleCountry(selectedCountry) {
        $('[data-country]').each(function () {
            $(this).removeClass('active');
        })

        $('.contact-info').each(function () {
            $(this).removeClass('active');
        })

        $(`[data-country=${selectedCountry}]`).addClass('active');
        $(`[data-info="${selectedCountry}"]`).addClass('active');
        $('.rotating-wrapper').attr('class', `rotating-wrapper ${selectedCountry}`);
        $('.map-pin').attr('class', `map-pin ${selectedCountry}`);
    }

    if ($(window).width() <= 992) {
        initAboutUsSlider();
    }

    $('.partner-slider').slick({
        infinite: true,
        dots: false,
        arrows: true,
        speed: 650,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 10000,
        pauseOnHover: true,
        pauseOnDotsHover: true,
        draggable: false,
        prevArrow: $('.prev'),
        nextArrow: $('.next'),
        responsive: [
            {
                breakpoint: 768,
                settings: {
                    arrows: false,
                    dots: true,
                }
            }
        ]
    });

    toggleCountry(window.selectedCountry);
    triggerSelect(window.selectedCountry);
    /* END About us */
});

$(window).on('resize', function () {
    if (!$('#about-us-page').length) {
        return;
    }

    if ($(this).width() <= 992) {
        initAboutUsSlider();
    }
})

function initAboutUsSlider() {
    if ($('.members').hasClass('slick-initialized')) {
        return;
    }

    let rtl = false;
    if ($('body').hasClass('rtl')) {
        rtl = true;
    }

    $('.members').slick({
        dots: false,
        arrows: false,
        speed: 650,
        autoplay: true,
        autoplaySpeed: 10000,
        pauseOnHover: true,
        pauseOnDotsHover: true,
        rtl: rtl,
        slidesToShow: 5,
        slidesToScroll: 1,
        centerMode: true,
        centerPadding: '0',
        initialSlide: 2,
        swipe: true,
        swipeToSlide: true,
        responsive: [
            {
                breakpoint: 992,
                settings: {
                    slidesToShow: 3,
                    centerPadding: '5%',
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 1,
                    centerPadding: '5%',
                }
            },
        ]
    });
}

'use strict';
$(document).ready(function () {
    /* Office alternative*/
    if ($('#gsuite-page').length) {
        let pricelist = JSON.stringify(window.pricelist);
        pricelist = JSON.parse(pricelist);
        const currency = pricelist.currency;

        $('.rangeslider').rangeslider({
            polyfill: false,

            onInit: function () {
                if (!$('#users').val()) {
                    $('#userCount').html(500);
                    $('#users').val(500);
                    if (currency == 'CZK') {
                        changePriceCZ(500);
                    } else {
                        changePrice(500);
                    }
                }
            },
            onSlide: function (position, value) {
                $('#userCount').html(value);
                $('#users').val(value);
                if (currency == 'CZK') {
                    changePriceCZ(value);
                } else {
                    changePrice(value);
                }
            }
        });

        function changePrice(users) {
            let iwPrice = users * pricelist.iw;
            let gsuitePrice = users * pricelist.gsuite;

            // Change price
            $('#gsuite-price').html(currency + formatMoney(gsuitePrice));
            $('#iw-price').html(currency + formatMoney(iwPrice));
        }

        function changePriceCZ(users) {
            let iwPrice = users * pricelist.iw;
            let gsuitePrice = users * pricelist.gsuite;

            // Change price
            $('#iw-price').html(formatMoney(iwPrice, 2, ",", " ") + ' Kč');
            $('#gsuite-price').html(formatMoney(gsuitePrice, 2, ",", " ") + ' Kč');
        }
    }

    function formatMoney(amount, decimalCount = 2, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? 2 : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    /* END Office alternative*/
});

'use strict';
$(document).ready(function () {
    if ($('#iw-demo').length <= 0) {
        return;
    }

    window.deleteDemoUserCallExecuted = false;

    window.addEventListener('pageshow', () => {
        $('form').each(function () { this.reset() });
    });

    window.timeout = false;

    isCodeFilled();
    isSalesEmailFilled();
    isEditEmailFilled();

    $('.sms-code-input').on('input', function (e) {
        isCodeFilled();

        if (!$(this).val().length) {
            return $(this).val('');
        }

        const inputLength = $(this).val().length;
        let currentIndex = parseInt($(this).data('position'));

        if (inputLength > 1) {
            const inputValues = $(this).val().split('');
            $(this).val(inputValues[0]);
        }

        const nextIndex = currentIndex + 1;
        const inputCount = $('.sms-code-input').length;

        if (nextIndex < inputCount) {
            $(`[data-position=${nextIndex}]`).focus();
        }
    });

    $('.sms-code-input').on('keydown', function (e) {
        const currentIndex = parseInt($(this).data('position'));
        const previousIndex = currentIndex - 1;
        const nextIndex = currentIndex + 1;
        const inputCount = $('.sms-code-input').length;

        const hasPreviousIndex = previousIndex >= 0;
        const hasNextIndex = nextIndex <= inputCount - 1;

        switch (e.key) {
            case 'ArrowLeft':
            case 'ArrowUp':
                if (hasPreviousIndex) {
                    $(`[data-position=${previousIndex}]`).focus();
                }
                e.preventDefault();
                break;

            case 'ArrowRight':
            case 'ArrowDown':
                if (hasNextIndex) {
                    $(`[data-position=${nextIndex}]`).focus();
                }
                e.preventDefault();
                break;
            case 'Backspace':
                if (!e.target.value.length && hasPreviousIndex) {
                    $(`[data-position=${previousIndex}]`).focus();
                    $(`[data-position=${previousIndex}]`).val('');
                }
                break;
            case 'Delete':
                if (!e.target.value.length && hasNextIndex) {
                    $(`[data-position=${nextIndex}]`).focus();
                    $(`[data-position=${nextIndex}]`).val('');
                }
                break;
            default:
                break;
        }

        isCodeFilled();
    });

    $('.sms-code-input').on('paste', function (e) {
        e.preventDefault();
        let clipboardData = e.originalEvent.clipboardData.getData('text');
        let explodedClipboardData = clipboardData.split('');

        let index = 0;
        $(explodedClipboardData).each(function (counter, value) {
            const number = parseInt(value);

            if ($.isNumeric(number)) {
                $(`[data-position=${index}]`).val(number);
                index++;
            }
        });

        if (explodedClipboardData.length < 4) {
            $(`[data-position]`).each(function (counter) {
                if (counter >= explodedClipboardData.length) {
                    $(`[data-position=${counter}]`).val('');
                }
            });
        }

        isCodeFilled();
    });

    $('#email_quote').on('input', function () {
        isSalesEmailFilled();
    })

    $('#email_edit').on('input', function () {
        isEditEmailFilled();
    })

    /* Modals */
    $('[data-iwmodal]').on('click', function () {
        const modalId = $(this).attr('data-iwmodal');

        openModal(modalId);
    });

    $('[data-iwmodalclose]').on('click', function () {
        const modalId = $(this).attr('data-iwmodalclose');

        closeModal(modalId);
    });

    function openModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).addClass('active');
        $(`.modal-iw.${modalId}`).addClass('active');
    }

    function closeModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).removeClass('active');
        $(`.modal-iw.${modalId}`).removeClass('active');
    }
    /* END Modals */

    $('[data-hints]').on('click', function () {
        const hints = $('.hints-body');
        const arrow = $('.timer-box .timer .hints .hints-head .toggle-arrow');

        if (hints.hasClass('visible')) {
            hints.removeClass('visible');
            arrow.removeClass('rotated');
        } else {
            hints.addClass('visible');
            arrow.addClass('rotated');
        }
    });

    $('[data-hint]').on('click', function () {
        $(this).closest('.hint').addClass('complete');
        let hint = $(this).data('hint');

        openModal(hint);
        changeCount();
    });

    $('[data-closehint]').on('click', function () {
        let hint = $(this).data('closehint');

        closeModal(hint);
        stopVideo(hint);
    });

    function stopVideo(id) {
        let frame = $(`iframe#${id}`);
        const src = frame.attr('src');
        frame.attr('src', '');
        frame.attr('src', src);
    }

    function changeCount() {
        let count = 0;

        $('.hints .hints-body .hint').each(function (id, element) {
            if (!$(element).hasClass('complete')) {
                count++;
            }
        })

        if (count === 0) {
            $('.hints .hints-head .count').remove();
        } else {
            $('.hints .hints-head .count').text(count);
        }
    }

    changeCount();

    // open welcome modal on page load
    // $('iframe').load(function() {
    // });

    // Welcome modal start button
    $('#welcome-start').on('click', function () {
        closeModal('demo-welcome');
        openModal('demo-welcome-2');
        //todo open second welcome
    });

    // Welcome trial continue button
    $('#welcome-continue').on('click', function () {
        closeModal('demo-welcome-trial');
        openModal('demo-billing');
    });


    // Submit form
    $('#demo-trial-create').submit(function (e) {
        e.preventDefault();
        $('#submit-billing').prop('disabled', true);

        $.when(validateInputs()).done(function () {
            console.log('Billing Validation successful.');
            $('#submit-billing').prop('disabled', false);
            closeModal('demo-billing');
            openModal('demo-sms');
        }).fail(function () {
            $('#submit-billing').prop('disabled', false);
            console.log('Billing Validation failed.');
        });
    });

    // Submit mail verification form
    $('#demo-trial-email-verification').submit(function (e) {
        e.preventDefault();
        $('#submit-sms-code').prop('disabled', true);

        $.when(verifyEmail()).done(function () {
            console.log('Email verify done.');
            $('#submit-sms-code').prop('disabled', false);
            closeModal('demo-sms');
            openModal('demo-loader');
            vpsChecking();
        }).fail(function () {
            $('#submit-sms-code').prop('disabled', false);
            console.log('Email verify failed.');
        });
    });

    // Resend code
    $('#resend-code').on('click', function (e) {
        e.preventDefault();
        $('#resend-code img').addClass('rotate');
        $('#resend-code').prop('disabled', true);

        $.when(resendCode()).done(function () {
            console.log('Resend code done.');
            $('#resend-code img').removeClass('rotate');

            $('#resend-code .resend').hide('slow', function () {
                $('#resend-code .send').show('slow', function () {
                    $('#resend-code').prop('disabled', true);
                    setTimeout(function () {
                        $('#resend-code .send').hide('slow', function () {
                            $('#resend-code .resend').show('slow');
                            $('#resend-code').prop('disabled', false);
                        });
                    }, 5000);
                });
            });

        }).fail(function () {
            console.log('Resend code failed.');
        });
    });

    // Change email link
    $('#demo-change-mail').on('click', function (e) {
        e.preventDefault();

        closeModal('demo-sms');
        openModal('demo-mail');
    });

    // Change email form
    $('#demo-change-mail-form').submit(function (e) {
        e.preventDefault();
        $('#submit-edit-email').prop('disabled', true);

        $.when(editMail()).done(function () {
            console.log('Email edit successful.');
            $('#submit-edit-email').prop('disabled', false);
            closeModal('demo-mail');
            openModal('demo-sms');
        }).fail(function () {
            $('#submit-edit-email').prop('disabled', false);
            console.log('Email edit failed.');
        });
    });

    // Back to code verification modal
    $('#demo-back-mail-verify').on('click', function (e) {
        e.preventDefault();

        closeModal('demo-mail');
        openModal('demo-sms');
    });

    // Contact sales form
    $('#contact-sales-from-email-change').on('click', function (e) {
        e.preventDefault();

        closeModal('demo-mail');
        openModal('demo-sales');
    });

    // Contact sales form
    $('#demo-contact-sales').submit(function (e) {
        e.preventDefault();
        $('#submit-sales-email').prop('disabled', true);

        $.when(contactSales()).done(function () {
            console.log('Contact sales email send.');
            $('#submit-sales-email').prop('disabled', false);
            closeModal('demo-sales');
            openModal('demo-success-sales');
        }).fail(function () {
            $('#submit-sales-email').prop('disabled', false);
            console.log('Contact sales email send failed.');
        });
    });

    $('#close-demo-billing').on('click', function () {
        isDemoEnding();
        closeModal('demo-billing');
    })

    // Clock
    const deadline = window.expiration;
    initializeClock('clock', deadline);

    /********************* Billing Validation **************************/
    let nameFilled = false;
    let companyFilled = false;
    let emailFilled = false;
    let phoneFilled = false;
    let companySizeFilled = false;
    let countryFilled = false;
    let licenseAgreementChecked = false;
    let captchaChecked = false;

    let allVerified = false;

    // Block non-alphanumeric characters being input
    $("#name, #company, #email, #phone, #company_size").on("keypress", function (event) {
        let inputField = $(this).attr('id');
        let allowedCharactersRegex = '';

        if (inputField === 'name') {
            allowedCharactersRegex = /[A-Za-z ]/g;
        } else if (inputField === 'company') {
            allowedCharactersRegex = /^[a-zA-Z0-9.,&\-' ]+$/;
        } else if (inputField === 'email') {
            allowedCharactersRegex = /^[a-zA-Z0-9.@_']+$/;
        } else if (inputField === 'phone') {
            allowedCharactersRegex = /^[0-9+]+$/;
        } else if (inputField === 'company_size') {
            allowedCharactersRegex = /^[0-9-]+$/;
        }

        let key = String.fromCharCode(event.which);

        if (event.keyCode === 8 || event.keyCode === 37 || event.keyCode === 39 || allowedCharactersRegex.test(key)) {
            refreshInputStatus();

            // If input changed, remove errors from a field
            $('#' + inputField).closest('label').removeClass('error-input');
            $('#' + inputField).siblings('.error-message').addClass('hidden');

            return true;
        }

        refreshInputStatus();
        return false;
    });

    // We need to use KeyUp here because backspace is not being picked up by KeyPress
    $("#name, #company, #company_size, #email, #phone").on("keyup", function (event) {
        let inputField = $(this).attr('id');

        $('#' + inputField).trigger('change');
    });

    // Input validation failed, refresh the inputs
    $(document).ready(function () {
        $('#name, #email, #phone, #terms_conditions, #company').trigger('change');
    });

    $('#name').change(function () {
        nameFilled = $(this).val().length > 0;

        refreshInputStatus();
    });

    // Check if Email is filled out
    $('#email').change(function () {
        emailFilled = $(this).val().length > 0;

        refreshInputStatus();
    });

    // Check if Phone is filled out
    $('#phone').change(function () {
        phoneFilled = $(this).val().length > 0;

        refreshInputStatus();
    });

    // Check if Company size is filled out
    $('#company_size').change(function () {
        if (!$.isNumeric($(this).val())) {
            $(this).val('');
        }

        companySizeFilled = $(this).val().length > 0;

        refreshInputStatus();
    });

    // Check if Company is filled out
    $('#company').change(function () {
        companyFilled = $(this).val().length > 0;

        refreshInputStatus();
    });

    // Check if Country is filled out
    $('[name="country"]').change(function () {
        countryFilled = $(this).val().length > 0;

        refreshInputStatus();
    });

    // Check if the Terms & Conditions box is checked
    $('#terms_conditions').change(function () {
        licenseAgreementChecked = this.checked;

        refreshInputStatus();
    });

    $("#recaptcha-watch").on('contentchanged', function () {
        captchaChecked = window.recaptcha;

        refreshInputStatus();
    });

    let validateInputs = function () {
        let validateDefer = jQuery.Deferred();
        let inputName = $('#name').val();
        let inputCompany = $('#company').val();
        let inputEmail = $('#email').val();
        let inputPhone = $('#phone').val();
        let inputCompanySize = $('#company_size').val();
        let inputCountry = $('[name="country"]').val();
        let inputCaptcha = $('#g-recaptcha-response').val();
        let inputDatacenter = $('#datacenter').val();
        let inputTermsConditions = 'off';

        if ($('#terms_conditions').is(':checked')) {
            inputTermsConditions = 'on';
        }

        $.ajax({
            type: "POST",
            url: '/cloud-order/demo-input-validation',
            data: {
                name: inputName,
                company: inputCompany,
                email: inputEmail,
                phone: inputPhone,
                company_size: inputCompanySize,
                country: inputCountry,
                g_recaptcha_response: inputCaptcha,
                terms_conditions: inputTermsConditions,
                datacenter: inputDatacenter,
            },
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                } else {
                    validateDefer.reject();

                    $.each(data.payload, function (id, validation) {
                        if (validation === 'failed' && id !== 'email') {
                            $(`#${id}`).addClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.email-error-special').removeClass('d-none');
                        } else if (validation === 'passed' && id !== 'email') {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.email-error-special').addClass('d-none');
                        }

                        // Email special validation TODO refactor this!
                        if (id === 'email' && validation === 'email_already_exists') {
                            $('#email').addClass('gen2-error-input:not(.gen2-error-input)');
                            $('#email').siblings('.gen2-form-error-message').removeClass('d-none').addClass('d-none');
                            $('#email').siblings('.gen2-form-error-message.email_already_exists').removeClass('d-none');
                        } else if (id === 'email' && validation === 'failed') {
                            $('#email').addClass('gen2-error-input:not(.gen2-error-input)');
                            $('#email').siblings('.gen2-form-error-message').removeClass('d-none').addClass('d-none');
                            $('#email').siblings('.gen2-form-error-message.email-error-base').removeClass('d-none');
                        } else if (id === 'email' && validation === 'passed') {
                            $('#email').removeClass('gen2-error-input');
                            $('#email').siblings('.gen2-form-error-message').removeClass('d-none').addClass('d-none');
                        }
                    });

                    refreshInputStatus();
                    grecaptcha.reset();
                }
            },
            error: function () {
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };

    function refreshInputStatus() {
        let inputsValid =
            nameFilled && companyFilled && emailFilled && phoneFilled && licenseAgreementChecked && companySizeFilled && countryFilled && captchaChecked;

        $('#submit-billing').prop("disabled", !inputsValid);

        // console.log(
        //     'Name filled: ' + nameFilled
        // );
        // console.log(
        //     'Company filled: ' + companyFilled
        // );
        // console.log(
        //     'Email filled: ' + emailFilled
        // );
        // console.log(
        //     'Phone filled: ' + phoneFilled
        // );
        // console.log(
        //     'Size filled: ' + companySizeFilled
        // );
        // console.log(
        //     'Country filled: ' + countryFilled
        // );
        // console.log(
        //     'License checked: ' + licenseAgreementChecked
        // );
        // console.log(
        //     'Captcha: ' + captchaChecked
        // );
        // console.log(
        //     'valid all: ' + inputsValid
        // );
        // console.log('-------------------------');
    };

    /********************* End of Billing Validation **************************/

    let verifyEmail = function () {
        let validateDefer = jQuery.Deferred();
        let inputCode0 = $('#sms_code_0').val();
        let inputCode1 = $('#sms_code_1').val();
        let inputCode2 = $('#sms_code_2').val();
        let inputCode3 = $('#sms_code_3').val();

        $.ajax({
            type: "POST",
            url: '/cloud-order/demo-email-verification',
            data: {
                sms_code_0: inputCode0,
                sms_code_1: inputCode1,
                sms_code_2: inputCode2,
                sms_code_3: inputCode3
            },
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                } else {
                    validateDefer.reject();

                    $('.sms-inputs input').addClass('gen2-error-input');
                    $('.sms-inputs').siblings().removeClass('d-none');
                }
            },
            error: function () {
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };

    /* Check VPS creation */
    function vpsChecking() {
        $.ajax({
            type: "POST",
            url: '/cloud-order/check-vps-creation-state-demo',
            success: function (data) {
                if (!data.success) {
                    // Poll the VPS creation every 5 seconds
                    setTimeout(function () {
                        vpsChecking();
                    }, 5000);

                    console.log('Not yet.');
                    return false;
                }

                if (data.payload.completed === true && data.payload.failed === false) {
                    closeModal('demo-loader');
                    openModal('demo-success');
                    $('#success-mail').html(data.payload.email);

                    // todo add delete user here?
                    // deleteDemoUserCall();

                    console.log('VPS created.');
                    return true;
                }

                if (data.payload.completed === true && data.payload.failed === true) {
                    closeModal('demo-loader');
                    openModal('demo-review');

                    // todo add delete user here?
                    // deleteDemoUserCall();

                    console.log('Manual review.');
                    return false;
                }
            },
            error: function () {
                console.log('Error happened during this call.');
            }
        });

    };

    /* Keep session alive, every 5 min update session with new timestamp */
    keepAlive();
    function keepAlive() {
        $.ajax({
            type: "POST",
            url: '/cloud-order/keep-session-alive',
            complete: function () {
                setTimeout(function () {
                    keepAlive();
                }, 25000);

                return true;
            }
        })
    }

    let resendCode = function () {
        let validateDefer = jQuery.Deferred();

        $.ajax({
            type: "POST",
            url: '/cloud-order/demo-resend-code',
            data: {},
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                } else {
                    validateDefer.reject();
                }
            },
            error: function () {
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };

    let editMail = function () {
        let validateDefer = jQuery.Deferred();
        let inputEmail = $('#email_edit').val();

        $.ajax({
            type: "POST",
            url: '/cloud-order/demo-edit-email',
            data: { email_edit: inputEmail },
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                    $('#email_edit').removeClass('gen2-error-input');
                    $('.email-error-special').not('.d-none').addClass('d-none');
                    $('.email-error-base').not('.d-none').addClass('d-none');
                } else {
                    validateDefer.reject();

                    if (data.payload['email'] === 'failed') {
                        $('#email_edit').not('.gen2-error-input').addClass('gen2-error-input');
                        $('.email-error-special').not('.d-none').addClass('d-none');
                        $('.email-error-base').removeClass('d-none');
                    }

                    if (data.payload['email'] === 'email_already_exists') {
                        $('#email_edit').not('.gen2-error-input').addClass('gen2-error-input');
                        $('.email-error-base').not('.d-none').addClass('d-none');
                        $('.email-error-special').removeClass('d-none');
                    }
                }
            },
            error: function () {
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };

    let contactSales = function () {
        let validateDefer = jQuery.Deferred();
        let sales_email = $('#sales_email').val();
        let sales_first_name = $('#sales_first_name').val();
        let sales_last_name = $('#sales_last_name').val();
        let sales_country = $('#sales_country').val();
        let sales_phone = $('#sales_phone').val();
        let sales_company_size = $('#sales_company_size').val();
        let sales_description = $('#sales_description').val();

        $.ajax({
            type: "POST",
            url: '/cloud-order/demo-contact-sales',
            data: {
                sales_email: sales_email,
                sales_first_name: sales_first_name,
                sales_last_name: sales_last_name,
                sales_country: sales_country,
                sales_phone: sales_phone,
                sales_company_size: sales_company_size,
                sales_description: sales_description,
            },
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'passed') {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).val('');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                } else {
                    validateDefer.reject();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'failed') {
                            $(`#${id}`).not('.gen2-error-input').addClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').removeClass('d-none');
                        } else {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                }
            },
            error: function () {
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };

    function initializeClock(id, endTime) {
        const clock = document.getElementById(id);
        const hoursSpan = clock.querySelector('.hours');
        const minutesSpan = clock.querySelector('.minutes');

        const timeInterval = setInterval(updateClock, 60000);

        function updateClock() {
            const t = getTimeRemaining(endTime);

            hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
            minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);

            // Last hour
            if (t.total <= 3600000) {
                $('.timer').attr('class', 'timer orange');
            }

            // Last 15 min
            if (t.total <= 900000) {
                $('.timer').attr('class', 'timer red');
            }

            if (t.total <= 60000) {
                clearInterval(timeInterval);
                window.timeout = true;
                demoEndingModalsOpen();
            }
        }

        updateClock();
    }

    function getTimeRemaining(endTime) {
        let now = new Date();
        now.setSeconds(0, 0);
        now.toISOString();
        let total = Date.parse(endTime) - Date.parse(now);

        if (total < 0) {
            total = 0;
        }

        const seconds = Math.floor((total / 1000) % 60);
        const minutes = Math.floor((total / 1000 / 60) % 60);
        const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
        const days = Math.floor(total / (1000 * 60 * 60 * 24));

        return {
            total,
            days,
            hours,
            minutes,
            seconds
        };
    }

    function demoEndingModalsOpen() {
        const isProcessing = $('.demo-welcome-trial').hasClass('active') || $('.demo-billing').hasClass('active') || $('.demo-sms').hasClass('active') || $('.demo-sales').hasClass('active') || $('.demo-loader').hasClass('active') || $('.demo-success').hasClass('active') || $('.demo-review').hasClass('active') || $('.demo-mail').hasClass('active');

        if (!isProcessing) {
            // todo add delete user here?
            window.removeEventListener('beforeunload', preventUnloadPage);
            window.location.replace(window.redirectUrlThanks);
        }
    }

    function isDemoEnding() {
        if (window.timeout === true) {
            // todo add delete user here?
            window.removeEventListener('beforeunload', preventUnloadPage);
            window.location.replace(window.redirectUrlThanks);
        }
    }

    function isCodeFilled() {
        let filled = true;

        $('.sms-code-input').each(function (id, input) {
            if ($(input).val() === '') {
                filled = false;
            }
        })

        $('#submit-sms-code').prop("disabled", !filled);
    }

    function isSalesEmailFilled() {
        let filled = true;

        if ($('#email_quote').val() === '') {
            filled = false;
        }

        $('#submit-sales-email').prop("disabled", !filled);
    }

    function isEditEmailFilled() {
        let filled = true;

        if ($('#email_edit').val() === '') {
            filled = false;
        }

        $('#submit-edit-email').prop("disabled", !filled);
    }

    $('#welcome_country').on('change', function () {
        changePrefix($(this).val(), $('#welcome_phone'));
    })

    $('#sales_country').on('change', function () {
        changePrefix($(this).val(), $('#sales_phone'));
    })

    $('#country').on('change', function () {
        changePrefix($(this).val(), $('#phone'));
    })

    //todo change country and phone in billing if contact form edited?

    function changePrefix(selectedCountry, phoneInput) {
        const prevSelected = window.chosenCountry;
        let phone = phoneInput.val();
        const oldPrefix = window.prefixes[prevSelected];
        const newPrefix = window.prefixes[selectedCountry];

        if (phone.startsWith(oldPrefix)) {
            phone = phone.replace(oldPrefix, newPrefix);
        } else {
            phone = newPrefix + phone;
        }

        phoneInput.val(phone);
        window.chosenCountry = selectedCountry;
    }

    // user has left the page, 'pagehide' might work better than 'unload'
    $(window).on('pagehide', function () {
        if (!window.deleteDemoUserCallExecuted) {
            window.deleteDemoUserCallExecuted = true;
            deleteDemoUserCall();
        }
    })

    // user has left the page 'fallback', unload is unreliable, but sometimes may work
    $(window).on('unload', function () {
        if (!window.deleteDemoUserCallExecuted) {
            window.deleteDemoUserCallExecuted = true;
            deleteDemoUserCall();
        }
    })
});

function deleteDemoUserCall() {
    if ('sendBeacon' in navigator) {
        navigator.sendBeacon('/cloud-order/demo-delete-user');
    } else {
        let request = new XMLHttpRequest();
        request.open('POST', '/cloud-order/demo-delete-user', false);
        request.send();
    }
}

'use strict';
$(document).ready(function () {
    if ($('#iw-demo-epos').length <= 0) {
        return;
    }

    window.deleteDemoUserCallExecuted = false;

    window.addEventListener('pageshow', () => {
        $('form').each(function () { this.reset() });
    });

    window.timeout = false;
    isSalesEmailFilled();

    $('#email_quote').on('input', function () {
        isSalesEmailFilled();
    })

    /* Modals */
    $('[data-iwmodal]').on('click', function () {
        const modalId = $(this).attr('data-iwmodal');

        openModal(modalId);
    });

    $('[data-iwmodalclose]').on('click', function () {
        const modalId = $(this).attr('data-iwmodalclose');

        closeModal(modalId);
    });

    function openModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).addClass('active');
        $(`.modal-iw.${modalId}`).addClass('active');
    }

    function closeModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).removeClass('active');
        $(`.modal-iw.${modalId}`).removeClass('active');
    }
    /* END Modals */

    $('[data-hints]').on('click', function () {
        const hints = $('.hints-body');
        const arrow = $('.timer-box .timer .hints .hints-head .toggle-arrow');

        if (hints.hasClass('visible')) {
            hints.removeClass('visible');
            arrow.removeClass('rotated');
        } else {
            hints.addClass('visible');
            arrow.addClass('rotated');
        }
    });

    $('[data-hint]').on('click', function () {
        $(this).closest('.hint').addClass('complete');
        let hint = $(this).data('hint');
        console.log(hint);
        console.log(this);
        console.log('test');

        openModal(hint);
        changeCount();
    });

    $('[data-closehint]').on('click', function () {
        let hint = $(this).data('closehint');

        closeModal(hint);
        stopVideo(hint);
    });

    function stopVideo(id) {
        let frame = $(`iframe#${id}`);
        const src = frame.attr('src');
        frame.attr('src', '');
        frame.attr('src', src);
    }

    function changeCount() {
        let count = 0;

        $('.hints .hints-body .hint').each(function (id, element) {
            if (!$(element).hasClass('complete')) {
                count++;
            }
        })

        if (count === 0) {
            $('.hints .hints-head .count').remove();
        } else {
            $('.hints .hints-head .count').text(count);
        }
    }

    changeCount();

    // Contact sales form
    $('#demo-contact-sales').submit(function (e) {
        e.preventDefault();
        $('#submit-sales-email').prop('disabled', true);

        $.when(contactSales()).done(function () {
            console.log('Contact sales email send.');
            $('#submit-sales-email').prop('disabled', false);
            closeModal('demo-sales');
            openModal('demo-success-sales');
        }).fail(function () {
            $('#submit-sales-email').prop('disabled', false);
            console.log('Contact sales email send failed.');
        });
    });

    /* Keep session alive, every 5 min update session with new timestamp */
    keepAlive();
    function keepAlive() {
        $.ajax({
            type: "POST",
            url: '/preview-epos/keep-session-alive',
            complete: function () {
                setTimeout(function () {
                    keepAlive();
                }, 25000);

                return true;
            }
        })
    }

    let contactSales = function () {
        let validateDefer = jQuery.Deferred();
        let sales_email = $('#sales_email').val();
        let sales_first_name = $('#sales_first_name').val();
        let sales_last_name = $('#sales_last_name').val();
        let sales_country = $('#sales_country').val();
        let sales_phone = $('#sales_phone').val();
        let sales_company_size = $('#sales_company_size').val();
        let sales_description = $('#sales_description').val();

        $.ajax({
            type: "POST",
            url: '/preview-epos/demo-contact-sales',
            data: {
                sales_email: sales_email,
                sales_first_name: sales_first_name,
                sales_last_name: sales_last_name,
                sales_country: sales_country,
                sales_phone: sales_phone,
                sales_company_size: sales_company_size,
                sales_description: sales_description,
            },
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'passed') {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).val('');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                } else {
                    validateDefer.reject();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'failed') {
                            $(`#${id}`).not('.gen2-error-input').addClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').removeClass('d-none');
                        } else {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                }
            },
            error: function () {
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };


    function isSalesEmailFilled() {
        let filled = true;

        if ($('#email_quote').val() === '') {
            filled = false;
        }

        $('#submit-sales-email').prop("disabled", !filled);
    }

    $('#sales_country').on('change', function () {
        changePrefix($(this).val(), $('#sales_phone'));
    })

    function changePrefix(selectedCountry, phoneInput) {
        const prevSelected = window.chosenCountry;
        let phone = phoneInput.val();
        const oldPrefix = window.prefixes[prevSelected];
        const newPrefix = window.prefixes[selectedCountry];

        if (phone.startsWith(oldPrefix)) {
            phone = phone.replace(oldPrefix, newPrefix);
        } else {
            phone = newPrefix + phone;
        }

        phoneInput.val(phone);
        window.chosenCountry = selectedCountry;
    }

    // user has left the page, 'pagehide' might work better than 'unload'
    $(window).on('pagehide', function () {
        if (!window.deleteDemoUserCallExecuted) {
            window.deleteDemoUserCallExecuted = true;
            deleteDemoUserCall();
        }
    })

    // user has left the page 'fallback', unload is unreliable, but sometimes may work
    $(window).on('unload', function () {
        if (!window.deleteDemoUserCallExecuted) {
            window.deleteDemoUserCallExecuted = true;
            deleteDemoUserCall();
        }
    })
});

function deleteDemoUserCall() {
    if ('sendBeacon' in navigator) {
        navigator.sendBeacon('/preview-epos/demo-delete-user');
    } else {
        let request = new XMLHttpRequest();
        request.open('POST', '/preview-epos/demo-delete-user', false);
        request.send();
    }
}

'use strict';
$(document).ready(function () {
    if ($('#iw-demo-start').length <= 0) {
        return;
    }

    window.addEventListener('pageshow', () => {
        $('form').each(function () { this.reset() });
    });

    /* Modals */
    $('[data-iwmodal]').on('click', function () {
        const modalId = $(this).attr('data-iwmodal');

        openModal(modalId);
    });

    $('[data-iwmodalclose]').on('click', function () {
        const modalId = $(this).attr('data-iwmodalclose');

        closeModal(modalId);
    });

    function openModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).addClass('active');
        $(`.modal-iw.${modalId}`).addClass('active');
    }

    function closeModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).removeClass('active');
        $(`.modal-iw.${modalId}`).removeClass('active');
    }
    /* END Modals */

    if (window.demoRunning) {
        openModal('demo-running');
    } else {
        openModal('demo-welcome');
    }

    // Welcome form
    $('#demo-welcome-form').submit(function (e) {
        e.preventDefault();
        $('#submit-welcome-form').prop('disabled', true);

        $.when(welcomeForm()).done(function () {
            console.log('Welcome form email send.');
            $('#submit-welcome-form').prop('disabled', false);
            closeModal('demo-welcome');
            openModal('demo-welcome-2');
        }).fail(function () {
            $('#submit-welcome-form').prop('disabled', false);
            console.log('Welcome form email send failed.');
        });
    });

    let welcomeForm = function () {
        let validateDefer = jQuery.Deferred();
        let welcome_email = $('#welcome_email').val();
        let welcome_first_name = $('#welcome_first_name').val();
        let welcome_last_name = $('#welcome_last_name').val();
        let welcome_phone = $('#welcome_phone').val();
        let welcome_country = $('#welcome_country').val();
        let welcome_captcha = $('#g-recaptcha-response').val();

        $.ajax({
            type: "POST",
            url: '/demo/demo-welcome-form',
            data: {
                welcome_email: welcome_email,
                welcome_first_name: welcome_first_name,
                welcome_last_name: welcome_last_name,
                welcome_phone: welcome_phone,
                welcome_country: welcome_country,
                welcome_captcha: welcome_captcha,
            },
            success: function (data) {
                console.log(data);
                if (data.success) {
                    validateDefer.resolve();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'passed') {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).val('');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                } else {
                    validateDefer.reject();
                    grecaptcha.reset();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'failed') {
                            $(`#${id}`).not('.gen2-error-input').addClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').removeClass('d-none');
                        } else {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                }
            },
            error: function (data) {
                console.log(data);
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };

    $('#welcome_country').on('change', function () {
        changePrefix($(this).val(), $('#welcome_phone'));
    })

    function changePrefix(selectedCountry, phoneInput) {
        const prevSelected = window.chosenCountry;
        let phone = phoneInput.val();
        const oldPrefix = window.prefixes[prevSelected];
        const newPrefix = window.prefixes[selectedCountry];

        if (phone.startsWith(oldPrefix)) {
            phone = phone.replace(oldPrefix, newPrefix);
        } else {
            phone = newPrefix + phone;
        }

        phoneInput.val(phone);
        window.chosenCountry = selectedCountry;
    }
});

'use strict';
$(document).ready(function () {
    if ($('#iw-demo-start-gen3').length <= 0) {
        return;
    }

    function openModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).addClass('active');
        $(`.modal-iw.${modalId}`).addClass('active');
    }

    function closeModal(modalId) {
        $(`.modal-iw-overlay.${modalId}`).removeClass('active');
        $(`.modal-iw.${modalId}`).removeClass('active');
    }
    /* END Modals */

    if (window.demoRunning) {
        openModal('demo-running');
    } else {
        openModal('demo-welcome');
    }

    // Welcome form
    $('#demo-welcome-form').submit(function (e) {
        e.preventDefault();
        $('#submit-welcome-form').prop('disabled', true);

        $.when(welcomeForm()).done(function () {
            console.log('Welcome form captcha successful.');
            window.removeEventListener('beforeunload', preventUnloadPage);
            window.location.replace(window.redirectUrlStart);
        }).fail(function (err) {
            $('#submit-welcome-form').prop('disabled', false);
            console.log(err)
            console.log('Welcome form captcha failed.');
        });
    });

    let welcomeForm = function () {
        let validateDefer = jQuery.Deferred();
        let welcome_captcha = $('#g-recaptcha-response').val();

        $.ajax({
            type: "POST",
            url: '/preview-epos/demo-default-form',
            data: {
                welcome_captcha: welcome_captcha,
            },
            success: function (data) {
                if (data.success) {
                    validateDefer.resolve();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'passed') {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).val('');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                } else {
                    validateDefer.reject();
                    grecaptcha.reset();

                    $.each(data.payload, function (id, validation) {
                        if (data.payload[id] === 'failed') {
                            $(`#${id}`).not('.gen2-error-input').addClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').removeClass('d-none');
                        } else {
                            $(`#${id}`).removeClass('gen2-error-input');
                            $(`#${id}`).closest('.input-wrap').find('.gen2-form-error-message').not('.d-none').addClass('d-none');
                        }
                    })
                }
            },
            error: function (data) {
                console.log(data);
                validateDefer.reject();
            }
        });

        return validateDefer.promise();
    };
});
